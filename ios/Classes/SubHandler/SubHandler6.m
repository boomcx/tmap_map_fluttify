//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler6.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TmapMapFluttifyPlugin (SubHandler6)
- (NSDictionary<NSString*, Handler>*) getSubHandler6 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"QMSRoutePlan::set_taxi_fare": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRoutePlan::set_taxi_fare");
            }
        
            // args
            // ref arg
            QMSTaxiFare* taxi_fare = (QMSTaxiFare*) (args[@"taxi_fare"] == [NSNull null] ? nil : args[@"taxi_fare"]);
        
            // ref
            QMSRoutePlan* ref = (QMSRoutePlan*) args[@"__this__"];
        
            ref.taxi_fare = taxi_fare;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_instruction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_instruction");
            }
        
            // args
            // jsonable arg
            NSString* instruction = (NSString*) args[@"instruction"];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.instruction = instruction;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_road_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_road_name");
            }
        
            // args
            // jsonable arg
            NSString* road_name = (NSString*) args[@"road_name"];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.road_name = road_name;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_dir_desc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_dir_desc");
            }
        
            // args
            // jsonable arg
            NSString* dir_desc = (NSString*) args[@"dir_desc"];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.dir_desc = dir_desc;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_duration");
            }
        
            // args
            // jsonable arg
            CGFloat duration = [args[@"duration"] floatValue];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_act_desc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_act_desc");
            }
        
            // args
            // jsonable arg
            NSString* act_desc = (NSString*) args[@"act_desc"];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.act_desc = act_desc;
            methodResult(@"success");
        },
        
        @"QMSRouteStep::set_polyline_idx": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSRouteStep::set_polyline_idx");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* polyline_idx = (NSArray<NSObject*>*) args[@"polyline_idx"];
        
            // ref
            QMSRouteStep* ref = (QMSRouteStep*) args[@"__this__"];
        
            ref.polyline_idx = polyline_idx;
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchResult::set_routes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchResult::set_routes");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* routes = (NSArray<NSObject*>*) args[@"routes"];
        
            // ref
            QMSDrivingRouteSearchResult* ref = (QMSDrivingRouteSearchResult*) args[@"__this__"];
        
            ref.routes = routes;
            methodResult(@"success");
        },
        
        @"QMSBusingRoutePlan::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRoutePlan::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            QMSBusingRoutePlan* ref = (QMSBusingRoutePlan*) args[@"__this__"];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"QMSBusingRoutePlan::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRoutePlan::set_duration");
            }
        
            // args
            // jsonable arg
            CGFloat duration = [args[@"duration"] floatValue];
        
            // ref
            QMSBusingRoutePlan* ref = (QMSBusingRoutePlan*) args[@"__this__"];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"QMSBusingRoutePlan::set_bounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRoutePlan::set_bounds");
            }
        
            // args
            // jsonable arg
            NSString* bounds = (NSString*) args[@"bounds"];
        
            // ref
            QMSBusingRoutePlan* ref = (QMSBusingRoutePlan*) args[@"__this__"];
        
            ref.bounds = bounds;
            methodResult(@"success");
        },
        
        @"QMSBusingRoutePlan::set_steps": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRoutePlan::set_steps");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* steps = (NSArray<NSObject*>*) args[@"steps"];
        
            // ref
            QMSBusingRoutePlan* ref = (QMSBusingRoutePlan*) args[@"__this__"];
        
            ref.steps = steps;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_mode");
            }
        
            // args
            // jsonable arg
            NSString* mode = (NSString*) args[@"mode"];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.mode = mode;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_duration");
            }
        
            // args
            // jsonable arg
            CGFloat duration = [args[@"duration"] floatValue];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_price": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_price");
            }
        
            // args
            // jsonable arg
            CGFloat price = [args[@"price"] floatValue];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.price = price;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_polyline");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* polyline = (NSArray<NSObject*>*) args[@"polyline"];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"QMSBusingSegmentRoutePlan::set_lines": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingSegmentRoutePlan::set_lines");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* lines = (NSArray<NSObject*>*) args[@"lines"];
        
            // ref
            QMSBusingSegmentRoutePlan* ref = (QMSBusingSegmentRoutePlan*) args[@"__this__"];
        
            ref.lines = lines;
            methodResult(@"success");
        },
        
        @"QMSStationEntrance::set_id_": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSStationEntrance::set_id_");
            }
        
            // args
            // jsonable arg
            NSString* id_ = (NSString*) args[@"id_"];
        
            // ref
            QMSStationEntrance* ref = (QMSStationEntrance*) args[@"__this__"];
        
            ref.id_ = id_;
            methodResult(@"success");
        },
        
        @"QMSStationEntrance::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSStationEntrance::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            QMSStationEntrance* ref = (QMSStationEntrance*) args[@"__this__"];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"QMSBusStation::set_id_": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusStation::set_id_");
            }
        
            // args
            // jsonable arg
            NSString* id_ = (NSString*) args[@"id_"];
        
            // ref
            QMSBusStation* ref = (QMSBusStation*) args[@"__this__"];
        
            ref.id_ = id_;
            methodResult(@"success");
        },
        
        @"QMSBusStation::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusStation::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            QMSBusStation* ref = (QMSBusStation*) args[@"__this__"];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"QMSBusStation::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusStation::set_location");
            }
        
            // args
            // struct arg
            NSValue* locationValue = (NSValue*) args[@"location"];
            CLLocationCoordinate2D location;
            [locationValue getValue:&location];
        
            // ref
            QMSBusStation* ref = (QMSBusStation*) args[@"__this__"];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"QMSBusStation::set_exit": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusStation::set_exit");
            }
        
            // args
            // ref arg
            QMSStationEntrance* exit = (QMSStationEntrance*) (args[@"exit"] == [NSNull null] ? nil : args[@"exit"]);
        
            // ref
            QMSBusStation* ref = (QMSBusStation*) args[@"__this__"];
        
            ref.exit = exit;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_vehicle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_vehicle");
            }
        
            // args
            // jsonable arg
            NSString* vehicle = (NSString*) args[@"vehicle"];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.vehicle = vehicle;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_id_": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_id_");
            }
        
            // args
            // jsonable arg
            NSString* id_ = (NSString*) args[@"id_"];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.id_ = id_;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_distance");
            }
        
            // args
            // jsonable arg
            CGFloat distance = [args[@"distance"] floatValue];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_duration");
            }
        
            // args
            // jsonable arg
            NSTimeInterval duration = [args[@"duration"] doubleValue];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.duration = duration;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_polyline");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* polyline = (NSArray<NSObject*>*) args[@"polyline"];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.polyline = polyline;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_station_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_station_count");
            }
        
            // args
            // jsonable arg
            NSInteger station_count = [args[@"station_count"] longValue];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.station_count = station_count;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_stations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_stations");
            }
        
            // args
            // list arg
            NSArray<QMSBusStation*>* stations = (NSArray<QMSBusStation*>*) args[@"stations"];
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.stations = stations;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_destination");
            }
        
            // args
            // ref arg
            QMSStationEntrance* destination = (QMSStationEntrance*) (args[@"destination"] == [NSNull null] ? nil : args[@"destination"]);
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_geton": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_geton");
            }
        
            // args
            // ref arg
            QMSBusStation* geton = (QMSBusStation*) (args[@"geton"] == [NSNull null] ? nil : args[@"geton"]);
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.geton = geton;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteTransitLine::set_getoff": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteTransitLine::set_getoff");
            }
        
            // args
            // ref arg
            QMSBusStation* getoff = (QMSBusStation*) (args[@"getoff"] == [NSNull null] ? nil : args[@"getoff"]);
        
            // ref
            QMSBusingRouteTransitLine* ref = (QMSBusingRouteTransitLine*) args[@"__this__"];
        
            ref.getoff = getoff;
            methodResult(@"success");
        },
        
        @"QMSBusingRouteSearchResult::set_routes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteSearchResult::set_routes");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* routes = (NSArray<NSObject*>*) args[@"routes"];
        
            // ref
            QMSBusingRouteSearchResult* ref = (QMSBusingRouteSearchResult*) args[@"__this__"];
        
            ref.routes = routes;
            methodResult(@"success");
        },
        
        @"QMSDistrictBaseSearchResult::set_data_version": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictBaseSearchResult::set_data_version");
            }
        
            // args
            // jsonable arg
            NSString* data_version = (NSString*) args[@"data_version"];
        
            // ref
            QMSDistrictBaseSearchResult* ref = (QMSDistrictBaseSearchResult*) args[@"__this__"];
        
            ref.data_version = data_version;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_id_": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_id_");
            }
        
            // args
            // jsonable arg
            NSString* id_ = (NSString*) args[@"id_"];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.id_ = id_;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_fullname": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_fullname");
            }
        
            // args
            // jsonable arg
            NSString* fullname = (NSString*) args[@"fullname"];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.fullname = fullname;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_location");
            }
        
            // args
            // struct arg
            NSValue* locationValue = (NSValue*) args[@"location"];
            CLLocationCoordinate2D location;
            [locationValue getValue:&location];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_pinyin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_pinyin");
            }
        
            // args
            // jsonable arg
            NSArray<NSString*>* pinyin = (NSArray<NSString*>*) args[@"pinyin"];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.pinyin = pinyin;
            methodResult(@"success");
        },
        
        @"QMSDistrictData::set_cidx": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictData::set_cidx");
            }
        
            // args
            // jsonable arg
            NSArray<NSNumber*>* cidx = (NSArray<NSNumber*>*) args[@"cidx"];
        
            // ref
            QMSDistrictData* ref = (QMSDistrictData*) args[@"__this__"];
        
            ref.cidx = cidx;
            methodResult(@"success");
        },
        
        @"QShape::set_userData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QShape::set_userData");
            }
        
            // args
            // id arg
            id userData;
            // jsonable
            if ([args[@"userData"] isKindOfClass:[NSNumber class]]
                    || [args[@"userData"] isKindOfClass:[NSString class]]
                    || [args[@"userData"] isKindOfClass:[NSArray class]]
                    || [args[@"userData"] isKindOfClass:[NSDictionary class]]) {
                userData = args[@"userData"];
            }
            // non jsonable
            else {
                userData = args[@"userData"];
            }
        
            // ref
            QShape* ref = (QShape*) args[@"__this__"];
        
            ref.userData = userData;
            methodResult(@"success");
        },
        
        @"QOverlayView::set_displayLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlayView::set_displayLevel");
            }
        
            // args
            // enum arg
            QOverlayLevel displayLevel = (QOverlayLevel) [args[@"displayLevel"] integerValue];
        
            // ref
            QOverlayView* ref = (QOverlayView*) args[@"__this__"];
        
            ref.displayLevel = displayLevel;
            methodResult(@"success");
        },
        
        @"QOverlayView::set_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlayView::set_zIndex");
            }
        
            // args
            // jsonable arg
            int zIndex = [args[@"zIndex"] intValue];
        
            // ref
            QOverlayView* ref = (QOverlayView*) args[@"__this__"];
        
            ref.zIndex = zIndex;
            methodResult(@"success");
        },
        
        @"QCoordinateSpan::set_latitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCoordinateSpan::set_latitudeDelta");
            }
        
            // args
            // jsonable arg
            CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QCoordinateSpan ref;
            [dataValue getValue:&ref];
        
            ref.latitudeDelta = latitudeDelta;
            methodResult(@"success");
        },
        
        @"QCoordinateSpan::set_longitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCoordinateSpan::set_longitudeDelta");
            }
        
            // args
            // jsonable arg
            CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QCoordinateSpan ref;
            [dataValue getValue:&ref];
        
            ref.longitudeDelta = longitudeDelta;
            methodResult(@"success");
        },
        
        @"QCoordinateRegion::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCoordinateRegion::set_center");
            }
        
            // args
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            CLLocationCoordinate2D center;
            [centerValue getValue:&center];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QCoordinateRegion ref;
            [dataValue getValue:&ref];
        
            ref.center = center;
            methodResult(@"success");
        },
        
        @"QCoordinateRegion::set_span": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCoordinateRegion::set_span");
            }
        
            // args
            // struct arg
            NSValue* spanValue = (NSValue*) args[@"span"];
            QCoordinateSpan span;
            [spanValue getValue:&span];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QCoordinateRegion ref;
            [dataValue getValue:&ref];
        
            ref.span = span;
            methodResult(@"success");
        },
        
        @"QMapPoint::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapPoint::set_x");
            }
        
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapPoint ref;
            [dataValue getValue:&ref];
        
            ref.x = x;
            methodResult(@"success");
        },
        
        @"QMapPoint::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapPoint::set_y");
            }
        
            // args
            // jsonable arg
            double y = [args[@"y"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapPoint ref;
            [dataValue getValue:&ref];
        
            ref.y = y;
            methodResult(@"success");
        },
        
        @"QMapSize::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapSize::set_width");
            }
        
            // args
            // jsonable arg
            double width = [args[@"width"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapSize ref;
            [dataValue getValue:&ref];
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"QMapSize::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapSize::set_height");
            }
        
            // args
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapSize ref;
            [dataValue getValue:&ref];
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"QMapRect::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapRect::set_origin");
            }
        
            // args
            // struct arg
            NSValue* originValue = (NSValue*) args[@"origin"];
            QMapPoint origin;
            [originValue getValue:&origin];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapRect ref;
            [dataValue getValue:&ref];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"QMapRect::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapRect::set_size");
            }
        
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) args[@"size"];
            QMapSize size;
            [sizeValue getValue:&size];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QMapRect ref;
            [dataValue getValue:&ref];
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"QMapView::set_userLocationAccessibilityLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::set_userLocationAccessibilityLabel");
            }
        
            // args
            // jsonable arg
            NSString* userLocationAccessibilityLabel = (NSString*) args[@"userLocationAccessibilityLabel"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            ref.userLocationAccessibilityLabel = userLocationAccessibilityLabel;
            methodResult(@"success");
        },
        
        @"QMapView::set_annotationAccessibilityFrameClipToBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::set_annotationAccessibilityFrameClipToBounds");
            }
        
            // args
            // jsonable arg
            BOOL annotationAccessibilityFrameClipToBounds = [args[@"annotationAccessibilityFrameClipToBounds"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            ref.annotationAccessibilityFrameClipToBounds = annotationAccessibilityFrameClipToBounds;
            methodResult(@"success");
        },
        
        @"QTileOverlayPath::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayPath::set_x");
            }
        
            // args
            // jsonable arg
            NSInteger x = [args[@"x"] longValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QTileOverlayPath ref;
            [dataValue getValue:&ref];
        
            ref.x = x;
            methodResult(@"success");
        },
        
        @"QTileOverlayPath::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayPath::set_y");
            }
        
            // args
            // jsonable arg
            NSInteger y = [args[@"y"] longValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QTileOverlayPath ref;
            [dataValue getValue:&ref];
        
            ref.y = y;
            methodResult(@"success");
        },
        
        @"QTileOverlayPath::set_z": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayPath::set_z");
            }
        
            // args
            // jsonable arg
            NSInteger z = [args[@"z"] longValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QTileOverlayPath ref;
            [dataValue getValue:&ref];
        
            ref.z = z;
            methodResult(@"success");
        },
        
        @"QTileOverlayPath::set_language": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayPath::set_language");
            }
        
            // args
            // jsonable arg
            NSInteger language = [args[@"language"] longValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QTileOverlayPath ref;
            [dataValue getValue:&ref];
        
            ref.language = language;
            methodResult(@"success");
        },
        
        @"QTileOverlayPath::set_contentScaleFactor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayPath::set_contentScaleFactor");
            }
        
            // args
            // jsonable arg
            CGFloat contentScaleFactor = [args[@"contentScaleFactor"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            QTileOverlayPath ref;
            [dataValue getValue:&ref];
        
            ref.contentScaleFactor = contentScaleFactor;
            methodResult(@"success");
        },
        
        @"QTileOverlay::set_isHighResoultionTile": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlay::set_isHighResoultionTile");
            }
        
            // args
            // jsonable arg
            BOOL isHighResoultionTile = [args[@"isHighResoultionTile"] boolValue];
        
            // ref
            QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
            ref.isHighResoultionTile = isHighResoultionTile;
            methodResult(@"success");
        },
        
        @"QTileOverlay::set_tileCacheDir": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlay::set_tileCacheDir");
            }
        
            // args
            // jsonable arg
            NSString* tileCacheDir = (NSString*) args[@"tileCacheDir"];
        
            // ref
            QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
            ref.tileCacheDir = tileCacheDir;
            methodResult(@"success");
        },
        
        @"QPinAnnotationView::set_pinColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QPinAnnotationColor pinColor = (QPinAnnotationColor) [args[@"pinColor"] integerValue];
        
                // ref
                QPinAnnotationView* ref = (QPinAnnotationView*) args[@"__this__"];
        
                ref.pinColor = pinColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPinAnnotationView::set_animatesDrop_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
        
                // ref
                QPinAnnotationView* ref = (QPinAnnotationView*) args[@"__this__"];
        
                ref.animatesDrop = animatesDrop;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_annotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.annotation = annotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_zIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int zIndex = [args[@"zIndex"] intValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.zIndex = zIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_image_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) (args[@"image"] == [NSNull null] ? nil : args[@"image"]);
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.image = image;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_centerOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerOffsetValue = (NSValue*) args[@"centerOffset"];
                CGPoint centerOffset;
                [centerOffsetValue getValue:&centerOffset];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.centerOffset = centerOffset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_calloutOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* calloutOffsetValue = (NSValue*) args[@"calloutOffset"];
                CGPoint calloutOffset;
                [calloutOffsetValue getValue:&calloutOffset];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.calloutOffset = calloutOffset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_enabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enabled = [args[@"enabled"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.enabled = enabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_selected_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL selected = [args[@"selected"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.selected = selected;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_canShowCallout_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.canShowCallout = canShowCallout;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_customCalloutView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* customCalloutView = (UIView*) (args[@"customCalloutView"] == [NSNull null] ? nil : args[@"customCalloutView"]);
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.customCalloutView = customCalloutView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_leftCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* leftCalloutAccessoryView = (UIView*) (args[@"leftCalloutAccessoryView"] == [NSNull null] ? nil : args[@"leftCalloutAccessoryView"]);
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_rightCalloutAccessoryView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIView* rightCalloutAccessoryView = (UIView*) (args[@"rightCalloutAccessoryView"] == [NSNull null] ? nil : args[@"rightCalloutAccessoryView"]);
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_draggable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL draggable = [args[@"draggable"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.draggable = draggable;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationView::set_dragState_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QAnnotationViewDragState dragState = (QAnnotationViewDragState) [args[@"dragState"] integerValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                ref.dragState = dragState;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPointAnnotation::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPointAnnotation::set_title_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* title = (NSString*) args[@"title"];
        
                // ref
                QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
                ref.title = title;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPointAnnotation::set_subtitle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* subtitle = (NSString*) args[@"subtitle"];
        
                // ref
                QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
                ref.subtitle = subtitle;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPointAnnotation::set_indoorInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QIndoorInfo* indoorInfo = (QIndoorInfo*) (args[@"indoorInfo"] == [NSNull null] ? nil : args[@"indoorInfo"]);
        
                // ref
                QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
                ref.indoorInfo = indoorInfo;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTextStyle::set_textColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* textColor = (UIColor*) (args[@"textColor"] == [NSNull null] ? nil : args[@"textColor"]);
        
                // ref
                QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
                ref.textColor = textColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTextStyle::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) (args[@"strokeColor"] == [NSNull null] ? nil : args[@"strokeColor"]);
        
                // ref
                QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTextStyle::set_fontSize_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat fontSize = [args[@"fontSize"] floatValue];
        
                // ref
                QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
                ref.fontSize = fontSize;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTextStyle::set_priority_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QTextPriority priority = (QTextPriority) [args[@"priority"] integerValue];
        
                // ref
                QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
                ref.priority = priority;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentText::set_startIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int startIndex = [args[@"startIndex"] intValue];
        
                // ref
                QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
                ref.startIndex = startIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentText::set_endIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int endIndex = [args[@"endIndex"] intValue];
        
                // ref
                QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
                ref.endIndex = endIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentText::set_name_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
                QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
                ref.name = name;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QText::set_style_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QTextStyle* style = (QTextStyle*) (args[@"style"] == [NSNull null] ? nil : args[@"style"]);
        
                // ref
                QText* ref = (QText*) args[@"__this__"];
        
                ref.style = style;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_page_size_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger page_size = [args[@"page_size"] unsignedIntegerValue];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.page_size = page_size;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_page_index_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger page_index = [args[@"page_index"] unsignedIntegerValue];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.page_index = page_index;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.keyword = keyword;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_boundary_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* boundary = (NSString*) args[@"boundary"];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.boundary = boundary;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_filter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* filter = (NSString*) args[@"filter"];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.filter = filter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSPoiSearchOption::set_orderby_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* orderby = (NSString*) args[@"orderby"];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                ref.orderby = orderby;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.keyword = keyword;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_region_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* region = (NSString*) args[@"region"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.region = region;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_filter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* filter = (NSString*) args[@"filter"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.filter = filter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_region_fix_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* region_fix = (NSNumber*) args[@"region_fix"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.region_fix = region_fix;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* location = (NSString*) args[@"location"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_get_subpois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* get_subpois = (NSNumber*) args[@"get_subpois"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.get_subpois = get_subpois;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_policy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* policy = (NSNumber*) args[@"policy"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.policy = policy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_address_format_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address_format = (NSString*) args[@"address_format"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.address_format = address_format;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_page_index_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* page_index = (NSNumber*) args[@"page_index"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.page_index = page_index;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSuggestionSearchOption::set_page_size_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* page_size = (NSNumber*) args[@"page_size"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                ref.page_size = page_size;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSReverseGeoCodeSearchOption::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* location = (NSString*) args[@"location"];
        
                // ref
                QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSReverseGeoCodeSearchOption::set_poi_options_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poi_options = (NSString*) args[@"poi_options"];
        
                // ref
                QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
                ref.poi_options = poi_options;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSReverseGeoCodeSearchOption::set_get_poi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL get_poi = [args[@"get_poi"] boolValue];
        
                // ref
                QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
                ref.get_poi = get_poi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSGeoCodeSearchOption::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                QMSGeoCodeSearchOption* ref = (QMSGeoCodeSearchOption*) args[@"__this__"];
        
                ref.address = address;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSGeoCodeSearchOption::set_region_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* region = (NSString*) args[@"region"];
        
                // ref
                QMSGeoCodeSearchOption* ref = (QMSGeoCodeSearchOption*) args[@"__this__"];
        
                ref.region = region;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSWalkingRouteSearchOption::set_from_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* from = (NSString*) args[@"from"];
        
                // ref
                QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
                ref.from = from;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSWalkingRouteSearchOption::set_to_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* to = (NSString*) args[@"to"];
        
                // ref
                QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
                ref.to = to;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_speed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double speed = [args[@"speed"] doubleValue];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.speed = speed;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_accuracy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double accuracy = [args[@"accuracy"] doubleValue];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.accuracy = accuracy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_course_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double course = [args[@"course"] doubleValue];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.course = course;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_heading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double heading = [args[@"heading"] doubleValue];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.heading = heading;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSTrackPoint::set_time_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double time = [args[@"time"] doubleValue];
        
                // ref
                QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
                ref.time = time;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_from_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* from = (NSString*) args[@"from"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.from = from;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_from_poi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* from_poi = (NSString*) args[@"from_poi"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.from_poi = from_poi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_from_track_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* from_track = (NSString*) args[@"from_track"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.from_track = from_track;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_to_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* to = (NSString*) args[@"to"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.to = to;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_to_poi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* to_poi = (NSString*) args[@"to_poi"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.to_poi = to_poi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_policy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* policy = (NSString*) args[@"policy"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.policy = policy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_waypoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* waypoints = (NSString*) args[@"waypoints"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.waypoints = waypoints;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_heading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* heading = (NSNumber*) args[@"heading"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.heading = heading;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_speed_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* speed = (NSNumber*) args[@"speed"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.speed = speed;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_accuracy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* accuracy = (NSNumber*) args[@"accuracy"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.accuracy = accuracy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDrivingRouteSearchOption::set_plate_number_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* plate_number = (NSString*) args[@"plate_number"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                ref.plate_number = plate_number;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSBusingRouteSearchOption::set_from_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* from = (NSString*) args[@"from"];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                ref.from = from;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSBusingRouteSearchOption::set_to_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* to = (NSString*) args[@"to"];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                ref.to = to;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSBusingRouteSearchOption::set_policy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* policy = (NSString*) args[@"policy"];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                ref.policy = policy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDistrictChildrenSearchOption::set_ID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* ID = (NSString*) args[@"ID"];
        
                // ref
                QMSDistrictChildrenSearchOption* ref = (QMSDistrictChildrenSearchOption*) args[@"__this__"];
        
                ref.ID = ID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSDistrictSearchSearchOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                QMSDistrictSearchSearchOption* ref = (QMSDistrictSearchSearchOption*) args[@"__this__"];
        
                ref.keyword = keyword;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QCircle::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double radius = [args[@"radius"] doubleValue];
        
                // ref
                QCircle* ref = (QCircle*) args[@"__this__"];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QOverlayPathView::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) (args[@"fillColor"] == [NSNull null] ? nil : args[@"fillColor"]);
        
                // ref
                QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
                ref.fillColor = fillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QOverlayPathView::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) (args[@"strokeColor"] == [NSNull null] ? nil : args[@"strokeColor"]);
        
                // ref
                QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QOverlayPathView::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
                ref.lineWidth = lineWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QCustomLayer::set_layerID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* layerID = (NSString*) args[@"layerID"];
        
                // ref
                QCustomLayer* ref = (QCustomLayer*) args[@"__this__"];
        
                ref.layerID = layerID;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QBasicMapViewLayer::set_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
                CGPoint centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
        
                // ref
                QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
                ref.centerCoordinate = centerCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QBasicMapViewLayer::set_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
                ref.zoomLevel = zoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QBasicMapViewLayer::set_rotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat rotation = [args[@"rotation"] floatValue];
        
                // ref
                QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
                ref.rotation = rotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QBasicMapViewLayer::set_overlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat overlooking = [args[@"overlooking"] floatValue];
        
                // ref
                QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
                ref.overlooking = overlooking;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTileOverlayView::set_zIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int zIndex = [args[@"zIndex"] intValue];
        
                // ref
                QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
                ref.zIndex = zIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_indoorPicker_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL indoorPicker = [args[@"indoorPicker"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.indoorPicker = indoorPicker;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_indoorPickerOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* indoorPickerOffsetValue = (NSValue*) args[@"indoorPickerOffset"];
                CGPoint indoorPickerOffset;
                [indoorPickerOffsetValue getValue:&indoorPickerOffset];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.indoorPickerOffset = indoorPickerOffset;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_activeLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QIndoorLevel* activeLevel = (QIndoorLevel*) (args[@"activeLevel"] == [NSNull null] ? nil : args[@"activeLevel"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.activeLevel = activeLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentStyle::set_startIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int startIndex = [args[@"startIndex"] intValue];
        
                // ref
                QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
                ref.startIndex = startIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentStyle::set_endIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int endIndex = [args[@"endIndex"] intValue];
        
                // ref
                QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
                ref.endIndex = endIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentStyle::set_colorImageIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int colorImageIndex = [args[@"colorImageIndex"] intValue];
        
                // ref
                QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
                ref.colorImageIndex = colorImageIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentColor::set_startIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int startIndex = [args[@"startIndex"] intValue];
        
                // ref
                QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
                ref.startIndex = startIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentColor::set_endIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int endIndex = [args[@"endIndex"] intValue];
        
                // ref
                QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
                ref.endIndex = endIndex;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentColor::set_color_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* color = (UIColor*) (args[@"color"] == [NSNull null] ? nil : args[@"color"]);
        
                // ref
                QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
                ref.color = color;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QSegmentColor::set_borderColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* borderColor = (UIColor*) (args[@"borderColor"] == [NSNull null] ? nil : args[@"borderColor"]);
        
                // ref
                QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
                ref.borderColor = borderColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_drawType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QTextureLineDrawType drawType = (QTextureLineDrawType) [args[@"drawType"] integerValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.drawType = drawType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_segmentColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<QSegmentColor*>* segmentColor = (NSArray<QSegmentColor*>*) args[@"segmentColor"];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.segmentColor = segmentColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_styleTextureImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* styleTextureImage = (UIImage*) (args[@"styleTextureImage"] == [NSNull null] ? nil : args[@"styleTextureImage"]);
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.styleTextureImage = styleTextureImage;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_segmentStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<QSegmentStyle*>* segmentStyle = (NSArray<QSegmentStyle*>*) args[@"segmentStyle"];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.segmentStyle = segmentStyle;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_drawSymbol_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL drawSymbol = [args[@"drawSymbol"] boolValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.drawSymbol = drawSymbol;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_symbolImage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* symbolImage = (UIImage*) (args[@"symbolImage"] == [NSNull null] ? nil : args[@"symbolImage"]);
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.symbolImage = symbolImage;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_symbolGap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat symbolGap = [args[@"symbolGap"] floatValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.symbolGap = symbolGap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_eraseColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* eraseColor = (UIColor*) (args[@"eraseColor"] == [NSNull null] ? nil : args[@"eraseColor"]);
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.eraseColor = eraseColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_footprintStep_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat footprintStep = [args[@"footprintStep"] floatValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.footprintStep = footprintStep;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPolylineView::set_borderWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat borderWidth = [args[@"borderWidth"] floatValue];
        
                // ref
                QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
                ref.borderWidth = borderWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPolylineView::set_borderColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* borderColor = (UIColor*) (args[@"borderColor"] == [NSNull null] ? nil : args[@"borderColor"]);
        
                // ref
                QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
                ref.borderColor = borderColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPolylineView::set_lineDashPattern_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSArray<NSNumber*>* lineDashPattern = (NSArray<NSNumber*>*) args[@"lineDashPattern"];
        
                // ref
                QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
                ref.lineDashPattern = lineDashPattern;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPolylineView::set_text_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QText* text = (QText*) (args[@"text"] == [NSNull null] ? nil : args[@"text"]);
        
                // ref
                QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
                ref.text = text;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QHeatTileNode::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QHeatTileNode* ref = (QHeatTileNode*) args[@"__this__"];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QHeatTileNode::set_value_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat value = [args[@"value"] floatValue];
        
                // ref
                QHeatTileNode* ref = (QHeatTileNode*) args[@"__this__"];
        
                ref.value = value;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMSSearchServices::set_apiKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* apiKey = (NSString*) args[@"apiKey"];
        
                // ref
                QMSSearchServices* ref = (QMSSearchServices*) args[@"__this__"];
        
                ref.apiKey = apiKey;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QPolyline::set_indoorInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QIndoorInfo* indoorInfo = (QIndoorInfo*) (args[@"indoorInfo"] == [NSNull null] ? nil : args[@"indoorInfo"]);
        
                // ref
                QPolyline* ref = (QPolyline*) args[@"__this__"];
        
                ref.indoorInfo = indoorInfo;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapServices::set_APIKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* APIKey = (NSString*) args[@"APIKey"];
        
                // ref
                QMapServices* ref = (QMapServices*) args[@"__this__"];
        
                ref.APIKey = APIKey;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapServices::set_userId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* userId = (NSString*) args[@"userId"];
        
                // ref
                QMapServices* ref = (QMapServices*) args[@"__this__"];
        
                ref.userId = userId;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapConfig::set_mapFont_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* mapFont = (NSString*) args[@"mapFont"];
        
                // ref
                QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
                ref.mapFont = mapFont;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnimation::set_duration_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat duration = [args[@"duration"] floatValue];
        
                // ref
                QAnimation* ref = (QAnimation*) args[@"__this__"];
        
                ref.duration = duration;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QTexturePolylineView::set_emergeAnimation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QAnimation* emergeAnimation = (QAnimation*) (args[@"emergeAnimation"] == [NSNull null] ? nil : args[@"emergeAnimation"]);
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                ref.emergeAnimation = emergeAnimation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QAnnotationViewLayer::set_coordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CGPoint coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QAnnotationViewLayer* ref = (QAnnotationViewLayer*) args[@"__this__"];
        
                ref.coordinate = coordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QUserLocationPresentation::set_icon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* icon = (UIImage*) (args[@"icon"] == [NSNull null] ? nil : args[@"icon"]);
        
                // ref
                QUserLocationPresentation* ref = (QUserLocationPresentation*) args[@"__this__"];
        
                ref.icon = icon;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QUserLocationPresentation::set_circleFillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* circleFillColor = (UIColor*) (args[@"circleFillColor"] == [NSNull null] ? nil : args[@"circleFillColor"]);
        
                // ref
                QUserLocationPresentation* ref = (QUserLocationPresentation*) args[@"__this__"];
        
                ref.circleFillColor = circleFillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QHeatTileOverlay::set_decayRadius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger decayRadius = [args[@"decayRadius"] longValue];
        
                // ref
                QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
                ref.decayRadius = decayRadius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QHeatTileOverlay::set_opacity_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat opacity = [args[@"opacity"] floatValue];
        
                // ref
                QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
                ref.opacity = opacity;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QHeatTileOverlay::set_gradient_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QHeatTileGradient* gradient = (QHeatTileGradient*) (args[@"gradient"] == [NSNull null] ? nil : args[@"gradient"]);
        
                // ref
                QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
                ref.gradient = gradient;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_handDrawMapEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL handDrawMapEnabled = [args[@"handDrawMapEnabled"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.handDrawMapEnabled = handDrawMapEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_showsTraffic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsTraffic = [args[@"showsTraffic"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.showsTraffic = showsTraffic;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_mapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QMapType mapType = (QMapType) [args[@"mapType"] integerValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.mapType = mapType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_showsScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsScale = [args[@"showsScale"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.showsScale = showsScale;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_showsBuildings_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsBuildings = [args[@"showsBuildings"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.showsBuildings = showsBuildings;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_shows3DBuildings_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL shows3DBuildings = [args[@"shows3DBuildings"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.shows3DBuildings = shows3DBuildings;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_showsPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsPoi = [args[@"showsPoi"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.showsPoi = showsPoi;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_showsCompass_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsCompass = [args[@"showsCompass"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.showsCompass = showsCompass;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
                CLLocationCoordinate2D centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.centerCoordinate = centerCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.zoomLevel = zoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_rotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat rotation = [args[@"rotation"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.rotation = rotation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_overlooking_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat overlooking = [args[@"overlooking"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.overlooking = overlooking;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"QMapView::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) args[@"visibleMapRect"];
                QMapRect visibleMapRect;
                [visibleMapRectValue getValue:&visibleMapRect];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                ref.visibleMapRect = visibleMapRect;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
    };
}

@end
