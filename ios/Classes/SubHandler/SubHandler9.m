//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler9.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TmapMapFluttifyPlugin (SubHandler9)
- (NSDictionary<NSString*, Handler>*) getSubHandler9 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"ObjectFactory::create_batchQPolygonView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QPolygonView* __this__;
                if ([init boolValue]) {
                    __this__ = [[QPolygonView alloc] init];
                } else {
                    __this__ = [QPolygonView alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBaseResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBaseResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBaseResult alloc] init];
                } else {
                    __this__ = [QMSBaseResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSSearchResult alloc] init];
                } else {
                    __this__ = [QMSSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSPoiData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSPoiData* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSPoiData alloc] init];
                } else {
                    __this__ = [QMSPoiData alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSPoiSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSPoiSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSPoiSearchResult alloc] init];
                } else {
                    __this__ = [QMSPoiSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSSuggestionPoiData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSSuggestionPoiData* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSSuggestionPoiData alloc] init];
                } else {
                    __this__ = [QMSSuggestionPoiData alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSSuggestionSubPoiData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSSuggestionSubPoiData* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSSuggestionSubPoiData alloc] init];
                } else {
                    __this__ = [QMSSuggestionSubPoiData alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSSuggestionResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSSuggestionResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSSuggestionResult alloc] init];
                } else {
                    __this__ = [QMSSuggestionResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReGeoCodeFormattedAddresses": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReGeoCodeFormattedAddresses* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReGeoCodeFormattedAddresses alloc] init];
                } else {
                    __this__ = [QMSReGeoCodeFormattedAddresses alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSAddressComponent* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSAddressComponent alloc] init];
                } else {
                    __this__ = [QMSAddressComponent alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReGeoCodeAdInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReGeoCodeAdInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReGeoCodeAdInfo alloc] init];
                } else {
                    __this__ = [QMSReGeoCodeAdInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReGeoCodeFamousArea": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReGeoCodeFamousArea* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReGeoCodeFamousArea alloc] init];
                } else {
                    __this__ = [QMSReGeoCodeFamousArea alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReGeoCodeAddressReference": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReGeoCodeAddressReference* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReGeoCodeAddressReference alloc] init];
                } else {
                    __this__ = [QMSReGeoCodeAddressReference alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReGeoCodePoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReGeoCodePoi* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReGeoCodePoi alloc] init];
                } else {
                    __this__ = [QMSReGeoCodePoi alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSReverseGeoCodeSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSReverseGeoCodeSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSReverseGeoCodeSearchResult alloc] init];
                } else {
                    __this__ = [QMSReverseGeoCodeSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSGeoCodeAdInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSGeoCodeAdInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSGeoCodeAdInfo alloc] init];
                } else {
                    __this__ = [QMSGeoCodeAdInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSGeoCodeSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSGeoCodeSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSGeoCodeSearchResult alloc] init];
                } else {
                    __this__ = [QMSGeoCodeSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSWalkingRouteSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSWalkingRouteSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSWalkingRouteSearchResult alloc] init];
                } else {
                    __this__ = [QMSWalkingRouteSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSDriveRestriction": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSDriveRestriction* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSDriveRestriction alloc] init];
                } else {
                    __this__ = [QMSDriveRestriction alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSTaxiFare": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSTaxiFare* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSTaxiFare alloc] init];
                } else {
                    __this__ = [QMSTaxiFare alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSRoutePlan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSRoutePlan* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSRoutePlan alloc] init];
                } else {
                    __this__ = [QMSRoutePlan alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSRouteStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSRouteStep* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSRouteStep alloc] init];
                } else {
                    __this__ = [QMSRouteStep alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSDrivingRouteSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSDrivingRouteSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSDrivingRouteSearchResult alloc] init];
                } else {
                    __this__ = [QMSDrivingRouteSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBusingRoutePlan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBusingRoutePlan* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBusingRoutePlan alloc] init];
                } else {
                    __this__ = [QMSBusingRoutePlan alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBusingSegmentRoutePlan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBusingSegmentRoutePlan* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBusingSegmentRoutePlan alloc] init];
                } else {
                    __this__ = [QMSBusingSegmentRoutePlan alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSStationEntrance": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSStationEntrance* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSStationEntrance alloc] init];
                } else {
                    __this__ = [QMSStationEntrance alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBusStation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBusStation* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBusStation alloc] init];
                } else {
                    __this__ = [QMSBusStation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBusingRouteTransitLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBusingRouteTransitLine* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBusingRouteTransitLine alloc] init];
                } else {
                    __this__ = [QMSBusingRouteTransitLine alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSBusingRouteSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSBusingRouteSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSBusingRouteSearchResult alloc] init];
                } else {
                    __this__ = [QMSBusingRouteSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSDistrictBaseSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSDistrictBaseSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSDistrictBaseSearchResult alloc] init];
                } else {
                    __this__ = [QMSDistrictBaseSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSDistrictData": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSDistrictData* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSDistrictData alloc] init];
                } else {
                    __this__ = [QMSDistrictData alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMSDistrictSearchResult": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMSDistrictSearchResult* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMSDistrictSearchResult alloc] init];
                } else {
                    __this__ = [QMSDistrictSearchResult alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QShape* __this__;
                if ([init boolValue]) {
                    __this__ = [[QShape alloc] init];
                } else {
                    __this__ = [QShape alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQCircleView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QCircleView* __this__;
                if ([init boolValue]) {
                    __this__ = [[QCircleView alloc] init];
                } else {
                    __this__ = [QCircleView alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QOverlayView* __this__;
                if ([init boolValue]) {
                    __this__ = [[QOverlayView alloc] init];
                } else {
                    __this__ = [QOverlayView alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQCoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QCoordinateSpan data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QCoordinateSpan)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QCoordinateRegion data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QCoordinateRegion)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QMapPoint data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QMapPoint)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QMapSize data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QMapSize)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QMapRect data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QMapRect)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QMultiPoint* __this__;
                if ([init boolValue]) {
                    __this__ = [[QMultiPoint alloc] init];
                } else {
                    __this__ = [QMultiPoint alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQHeatTileOverlayView": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QHeatTileOverlayView* __this__;
                if ([init boolValue]) {
                    __this__ = [[QHeatTileOverlayView alloc] init];
                } else {
                    __this__ = [QHeatTileOverlayView alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQTileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                QTileOverlayPath data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(QTileOverlayPath)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchQTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                QTileOverlay* __this__;
                if ([init boolValue]) {
                    __this__ = [[QTileOverlay alloc] init];
                } else {
                    __this__ = [QTileOverlay alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"QCoordinateSpanMake::QCoordinateSpanMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
            // jsonable arg
            CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCoordinateSpanMake::QCoordinateSpanMake(%@, %@)", args[@"latitudeDelta"], args[@"longitudeDelta"]);
            }
        
            // invoke native method
            QCoordinateSpan result = QCoordinateSpanMake(latitudeDelta, longitudeDelta);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateSpan)];
        
            methodResult(__result__);
        },
        @"QCoordinateRegionMake::QCoordinateRegionMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // struct arg
            NSValue* spanValue = (NSValue*) args[@"span"];
            QCoordinateSpan span;
            [spanValue getValue:&span];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCoordinateRegionMake::QCoordinateRegionMake(%@, %@)", args[@"centerCoordinate"], args[@"span"]);
            }
        
            // invoke native method
            QCoordinateRegion result = QCoordinateRegionMake(centerCoordinate, span);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"QMapPointMake::QMapPointMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapPointMake::QMapPointMake(%@, %@)", args[@"x"], args[@"y"]);
            }
        
            // invoke native method
            QMapPoint result = QMapPointMake(x, y);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapPoint)];
        
            methodResult(__result__);
        },
        @"QMapSizeMake::QMapSizeMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapSizeMake::QMapSizeMake(%@, %@)", args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            QMapSize result = QMapSizeMake(width, height);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapSize)];
        
            methodResult(__result__);
        },
        @"QMapRectMake::QMapRectMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectMake::QMapRectMake(%@, %@, %@, %@)", args[@"x"], args[@"y"], args[@"width"], args[@"height"]);
            }
        
            // invoke native method
            QMapRect result = QMapRectMake(x, y, width, height);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMapRectGetMinX::QMapRectGetMinX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMinX::QMapRectGetMinX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMinX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetMinY::QMapRectGetMinY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMinY::QMapRectGetMinY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMinY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetMidX::QMapRectGetMidX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMidX::QMapRectGetMidX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMidX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetMidY::QMapRectGetMidY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMidY::QMapRectGetMidY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMidY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetMaxX::QMapRectGetMaxX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMaxX::QMapRectGetMaxX(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMaxX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetMaxY::QMapRectGetMaxY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetMaxY::QMapRectGetMaxY(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetMaxY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetWidth::QMapRectGetWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetWidth::QMapRectGetWidth(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetWidth(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectGetHeight::QMapRectGetHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectGetHeight::QMapRectGetHeight(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = QMapRectGetHeight(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapPointEqualToPoint::QMapPointEqualToPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* point1Value = (NSValue*) args[@"point1"];
            QMapPoint point1;
            [point1Value getValue:&point1];
            // struct arg
            NSValue* point2Value = (NSValue*) args[@"point2"];
            QMapPoint point2;
            [point2Value getValue:&point2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapPointEqualToPoint::QMapPointEqualToPoint(%@, %@)", args[@"point1"], args[@"point2"]);
            }
        
            // invoke native method
            BOOL result = QMapPointEqualToPoint(point1, point2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapSizeEqualToSize::QMapSizeEqualToSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* size1Value = (NSValue*) args[@"size1"];
            QMapSize size1;
            [size1Value getValue:&size1];
            // struct arg
            NSValue* size2Value = (NSValue*) args[@"size2"];
            QMapSize size2;
            [size2Value getValue:&size2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapSizeEqualToSize::QMapSizeEqualToSize(%@, %@)", args[@"size1"], args[@"size2"]);
            }
        
            // invoke native method
            BOOL result = QMapSizeEqualToSize(size1, size2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectEqualToRect::QMapRectEqualToRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            QMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            QMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectEqualToRect::QMapRectEqualToRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = QMapRectEqualToRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectIsNull::QMapRectIsNull": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectIsNull::QMapRectIsNull(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = QMapRectIsNull(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectIsEmpty::QMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectIsEmpty::QMapRectIsEmpty(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = QMapRectIsEmpty(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectContainsPoint::QMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            QMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectContainsPoint::QMapRectContainsPoint(%@, %@)", args[@"rect"], args[@"point"]);
            }
        
            // invoke native method
            BOOL result = QMapRectContainsPoint(rect, point);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectUnionPoint::QMapRectUnionPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            QMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectUnionPoint::QMapRectUnionPoint(%@, %@)", args[@"rect"], args[@"point"]);
            }
        
            // invoke native method
            QMapRect result = QMapRectUnionPoint(rect, point);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMapRectUnion::QMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            QMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            QMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectUnion::QMapRectUnion(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            QMapRect result = QMapRectUnion(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMapRectIntersectsRect::QMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            QMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            QMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectIntersectsRect::QMapRectIntersectsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = QMapRectIntersectsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapRectContainsRect::QMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            QMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            QMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectContainsRect::QMapRectContainsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = QMapRectContainsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QStringFromMapPoint::QStringFromMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            QMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QStringFromMapPoint::QStringFromMapPoint(%@)", args[@"point"]);
            }
        
            // invoke native method
            NSString* result = QStringFromMapPoint(point);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QStringFromMapSize::QStringFromMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) args[@"size"];
            QMapSize size;
            [sizeValue getValue:&size];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QStringFromMapSize::QStringFromMapSize(%@)", args[@"size"]);
            }
        
            // invoke native method
            NSString* result = QStringFromMapSize(size);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QStringFromMapRect::QStringFromMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QStringFromMapRect::QStringFromMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            NSString* result = QStringFromMapRect(rect);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapPointForCoordinate::QMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapPointForCoordinate::QMapPointForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            QMapPoint result = QMapPointForCoordinate(coordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapPoint)];
        
            methodResult(__result__);
        },
        @"QCoordinateForMapPoint::QCoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
            QMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCoordinateForMapPoint::QCoordinateForMapPoint(%@)", args[@"mapPoint"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = QCoordinateForMapPoint(mapPoint);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"QCoordinateRegionForMapRect::QCoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            QMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCoordinateRegionForMapRect::QCoordinateRegionForMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            QCoordinateRegion result = QCoordinateRegionForMapRect(rect);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"QMapRectForCoordinateRegion::QMapRectForCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            QCoordinateRegion region;
            [regionValue getValue:&region];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapRectForCoordinateRegion::QMapRectForCoordinateRegion(%@)", args[@"region"]);
            }
        
            // invoke native method
            QMapRect result = QMapRectForCoordinateRegion(region);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMetersPerMapPointAtLatitude::QMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMetersPerMapPointAtLatitude::QMetersPerMapPointAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            CLLocationDistance result = QMetersPerMapPointAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapPointsPerMeterAtLatitude::QMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapPointsPerMeterAtLatitude::QMapPointsPerMeterAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            double result = QMapPointsPerMeterAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QCoordinateRegionMakeWithDistance::QCoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // jsonable arg
            CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
            // jsonable arg
            CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCoordinateRegionMakeWithDistance::QCoordinateRegionMakeWithDistance(%@, %@, %@)", args[@"centerCoordinate"], args[@"latitudinalMeters"], args[@"longitudinalMeters"]);
            }
        
            // invoke native method
            QCoordinateRegion result = QCoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"QPolygonContainsPoint::QPolygonContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            QMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray<NSValue*>* polygonValueList = (NSArray<NSValue*>*) args[@"polygon"];
            QMapPoint polygon[polygonValueList.count];
            for (int __i__ = 0; __i__ < polygonValueList.count; __i__++) {
                NSValue* polygonValue = (NSValue*) [polygonValueList objectAtIndex:__i__];
                QMapPoint polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygonContainsPoint::QPolygonContainsPoint(%@, %@, %@)", args[@"point"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = QPolygonContainsPoint(point, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QPolygonContainsCoordinate::QPolygonContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // list arg struct
            NSArray<NSValue*>* polygonValueList = (NSArray<NSValue*>*) args[@"polygon"];
            CLLocationCoordinate2D polygon[polygonValueList.count];
            for (int __i__ = 0; __i__ < polygonValueList.count; __i__++) {
                NSValue* polygonValue = (NSValue*) [polygonValueList objectAtIndex:__i__];
                CLLocationCoordinate2D polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygonContainsCoordinate::QPolygonContainsCoordinate(%@, %@, %@)", args[@"coordinate"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = QPolygonContainsCoordinate(coordinate, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMetersBetweenMapPoints::QMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* aValue = (NSValue*) args[@"a"];
            QMapPoint a;
            [aValue getValue:&a];
            // struct arg
            NSValue* bValue = (NSValue*) args[@"b"];
            QMapPoint b;
            [bValue getValue:&b];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMetersBetweenMapPoints::QMetersBetweenMapPoints(%@, %@)", args[@"a"], args[@"b"]);
            }
        
            // invoke native method
            CLLocationDistance result = QMetersBetweenMapPoints(a, b);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMetersBetweenCoordinates::QMetersBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* aValue = (NSValue*) args[@"a"];
            CLLocationCoordinate2D a;
            [aValue getValue:&a];
            // struct arg
            NSValue* bValue = (NSValue*) args[@"b"];
            CLLocationCoordinate2D b;
            [bValue getValue:&b];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMetersBetweenCoordinates::QMetersBetweenCoordinates(%@, %@)", args[@"a"], args[@"b"]);
            }
        
            // invoke native method
            CLLocationDistance result = QMetersBetweenCoordinates(a, b);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QBoundingMapRectWithPoints::QBoundingMapRectWithPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QBoundingMapRectWithPoints::QBoundingMapRectWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            QMapRect result = QBoundingMapRectWithPoints(points, count);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QBoundingMapRectWithPointsAndCenter::QBoundingMapRectWithPointsAndCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // struct arg
            NSValue* centerPointValue = (NSValue*) args[@"centerPoint"];
            QMapPoint centerPoint;
            [centerPointValue getValue:&centerPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QBoundingMapRectWithPointsAndCenter::QBoundingMapRectWithPointsAndCenter(%@, %@, %@)", args[@"points"], args[@"count"], args[@"centerPoint"]);
            }
        
            // invoke native method
            QMapRect result = QBoundingMapRectWithPointsAndCenter(points, count, centerPoint);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QBoundingCoordinateRegionWithCoordinates::QBoundingCoordinateRegionWithCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesValueList.count];
            for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QBoundingCoordinateRegionWithCoordinates::QBoundingCoordinateRegionWithCoordinates(%@, %@)", args[@"coordinates"], args[@"count"]);
            }
        
            // invoke native method
            QCoordinateRegion result = QBoundingCoordinateRegionWithCoordinates(coordinates, count);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"QBoundingCoordinateRegionWithCoordinatesAndCenter::QBoundingCoordinateRegionWithCoordinatesAndCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesValueList.count];
            for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QBoundingCoordinateRegionWithCoordinatesAndCenter::QBoundingCoordinateRegionWithCoordinatesAndCenter(%@, %@, %@)", args[@"coordinates"], args[@"count"], args[@"centerCoordinate"]);
            }
        
            // invoke native method
            QCoordinateRegion result = QBoundingCoordinateRegionWithCoordinatesAndCenter(coordinates, count, centerCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
    };
}

@end
