//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TmapMapFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"QMapView::convertRect_toRegionFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rectValue = (NSValue*) args[@"rect"];
                CGRect rect;
                [rectValue getValue:&rect];
                // ref arg
                UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::configureUserLocationPresentation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QUserLocationPresentation* presentation = (QUserLocationPresentation*) (args[@"presentation"] == [NSNull null] ? nil : args[@"presentation"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref configureUserLocationPresentation : presentation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setUserTrackingMode_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QUserTrackingMode mode = (QUserTrackingMode) [args[@"mode"] integerValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setUserTrackingMode : mode animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setUserLocationHidden_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL hidden = [args[@"hidden"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setUserLocationHidden : hidden];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::addAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::addAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::removeAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeAnnotation : annotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::removeAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeAnnotations : annotations];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::viewForAnnotation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QAnnotationView* result = [ref viewForAnnotation: annotation];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::dequeueReusableAnnotationViewWithIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* identifier = (NSString*) args[@"identifier"];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::bringAnnotationToFront_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref bringAnnotationToFront : annotation];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::selectAnnotation_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref selectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::deselectAnnotation_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref deselectAnnotation : annotation animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::addOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addOverlay : overlay];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::addOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addOverlays : overlays];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::removeOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeOverlay : overlay];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::removeOverlays_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeOverlays : overlays];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::viewForOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QOverlayView* result = [ref viewForOverlay: overlay];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::addCustomLayer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref addCustomLayer : layer];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::removeCustomLayer_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref removeCustomLayer : layer];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::takeSnapshot_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                UIImage* result = [ref takeSnapshot];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::getDebugError_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref getDebugError];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithWalkingRouteSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSWalkingRouteSearchOption* wakingRouteSearchOption = (QMSWalkingRouteSearchOption*) (args[@"wakingRouteSearchOption"] == [NSNull null] ? nil : args[@"wakingRouteSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithWalkingRouteSearchOption : wakingRouteSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithPoiSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSPoiSearchOption* poiSearchOption = (QMSPoiSearchOption*) (args[@"poiSearchOption"] == [NSNull null] ? nil : args[@"poiSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithPoiSearchOption : poiSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithSuggestionSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSSuggestionSearchOption* suggestionSearchOption = (QMSSuggestionSearchOption*) (args[@"suggestionSearchOption"] == [NSNull null] ? nil : args[@"suggestionSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithSuggestionSearchOption : suggestionSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithReverseGeoCodeSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSReverseGeoCodeSearchOption* reverseGeoCodeSearchOption = (QMSReverseGeoCodeSearchOption*) (args[@"reverseGeoCodeSearchOption"] == [NSNull null] ? nil : args[@"reverseGeoCodeSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithReverseGeoCodeSearchOption : reverseGeoCodeSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithGeoCodeSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSGeoCodeSearchOption* geoCodeSearchOption = (QMSGeoCodeSearchOption*) (args[@"geoCodeSearchOption"] == [NSNull null] ? nil : args[@"geoCodeSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithGeoCodeSearchOption : geoCodeSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithDrivingRouteSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSDrivingRouteSearchOption* drivingRouteSearchOption = (QMSDrivingRouteSearchOption*) (args[@"drivingRouteSearchOption"] == [NSNull null] ? nil : args[@"drivingRouteSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithDrivingRouteSearchOption : drivingRouteSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithBusingRouteSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSBusingRouteSearchOption* busingRouteSearchOption = (QMSBusingRouteSearchOption*) (args[@"busingRouteSearchOption"] == [NSNull null] ? nil : args[@"busingRouteSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithBusingRouteSearchOption : busingRouteSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithDistrictListSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSDistrictListSearchOption* districtListSearchOption = (QMSDistrictListSearchOption*) (args[@"districtListSearchOption"] == [NSNull null] ? nil : args[@"districtListSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithDistrictListSearchOption : districtListSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithDistrictChildrenSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSDistrictChildrenSearchOption* districtChildrenSearchOption = (QMSDistrictChildrenSearchOption*) (args[@"districtChildrenSearchOption"] == [NSNull null] ? nil : args[@"districtChildrenSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithDistrictChildrenSearchOption : districtChildrenSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearcher::searchWithDistrictSearchSearchOption_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QMSDistrictSearchSearchOption* districtSearchSearchOption = (QMSDistrictSearchSearchOption*) (args[@"districtSearchSearchOption"] == [NSNull null] ? nil : args[@"districtSearchSearchOption"]);
        
                // ref
                QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
                // invoke native method
                [ref searchWithDistrictSearchSearchOption : districtSearchSearchOption];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolygonView::initWithPolygon_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QPolygon* polygon = (QPolygon*) (args[@"polygon"] == [NSNull null] ? nil : args[@"polygon"]);
        
                // ref
                QPolygonView* ref = (QPolygonView*) args[@"__this__"];
        
                // invoke native method
                QPolygonView* result = [ref initWithPolygon: polygon];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotation::title_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref title];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotation::subtitle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref subtitle];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotation::setCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* newCoordinateValue = (NSValue*) args[@"newCoordinate"];
                CLLocationCoordinate2D newCoordinate;
                [newCoordinateValue getValue:&newCoordinate];
        
                // ref
                id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
                // invoke native method
                [ref setCoordinate : newCoordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotation::indoorInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
                // invoke native method
                QIndoorInfo* result = [ref indoorInfo];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QCircleView::initWithCircle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QCircle* circle = (QCircle*) (args[@"circle"] == [NSNull null] ? nil : args[@"circle"]);
        
                // ref
                QCircleView* ref = (QCircleView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithCircle: circle];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTileOverlay::initWithURLTemplate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
                // ref
                QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
                // invoke native method
                QTileOverlay* result = [ref initWithURLTemplate: URLTemplate];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTileOverlay::cancelLoadOfTileAtPath_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* tilePathValue = (NSValue*) args[@"tilePath"];
                QTileOverlayPath tilePath;
                [tilePathValue getValue:&tilePath];
        
                // ref
                QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
                // invoke native method
                [ref cancelLoadOfTileAtPath : tilePath];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        // top constant
        @"getkQBasicMapViewLayerCenterCoordinateKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            methodResult(kQBasicMapViewLayerCenterCoordinateKey);
        },
        // top constant
        @"getkQBasicMapViewLayerZoomLevelKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            methodResult(kQBasicMapViewLayerZoomLevelKey);
        },
        // top constant
        @"getkQBasicMapViewLayerRotationKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            methodResult(kQBasicMapViewLayerRotationKey);
        },
        // top constant
        @"getkQBasicMapViewLayerOverlookingKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            methodResult(kQBasicMapViewLayerOverlookingKey);
        },
        @"QIndoorBuilding::get_guid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_guid");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.guid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QIndoorBuilding::get_defaultLevelIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_defaultLevelIndex");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.defaultLevelIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QIndoorBuilding::get_levels": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_levels");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            NSArray<QIndoorLevel*>* result = ref.levels;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QIndoorBuilding::get_centerPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_centerPoint");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            QMapPoint result = ref.centerPoint;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapPoint)];
        
            methodResult(__result__);
        },
        
        @"QIndoorBuilding::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_name");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QIndoorBuilding::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorBuilding::get_boundingMapRect");
            }
        
            // ref object
            QIndoorBuilding* ref = (QIndoorBuilding*) args[@"__this__"];
        
            // invoke native method
            QMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        
        @"QHeatTileNodeProtocol::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileNodeProtocol::get_coordinate");
            }
        
            // ref object
            id<QHeatTileNodeProtocol> ref = (id<QHeatTileNodeProtocol>) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"QHeatTileNodeProtocol::get_value": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileNodeProtocol::get_value");
            }
        
            // ref object
            id<QHeatTileNodeProtocol> ref = (id<QHeatTileNodeProtocol>) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.value;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QPinAnnotationView::get_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPinAnnotationView::get_pinColor");
            }
        
            // ref object
            QPinAnnotationView* ref = (QPinAnnotationView*) args[@"__this__"];
        
            // invoke native method
            QPinAnnotationColor result = ref.pinColor;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QPinAnnotationView::get_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPinAnnotationView::get_animatesDrop");
            }
        
            // ref object
            QPinAnnotationView* ref = (QPinAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.animatesDrop;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QIndoorLevel::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorLevel::get_name");
            }
        
            // ref object
            QIndoorLevel* ref = (QIndoorLevel*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QIndoorLevel::get_shortName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorLevel::get_shortName");
            }
        
            // ref object
            QIndoorLevel* ref = (QIndoorLevel*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.shortName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QUserLocation::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QUserLocation::get_location");
            }
        
            // ref object
            QUserLocation* ref = (QUserLocation*) args[@"__this__"];
        
            // invoke native method
            CLLocation* result = ref.location;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QUserLocation::get_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QUserLocation::get_heading");
            }
        
            // ref object
            QUserLocation* ref = (QUserLocation*) args[@"__this__"];
        
            // invoke native method
            CLHeading* result = ref.heading;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_reuseIdentifier");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.reuseIdentifier;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_annotation");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            id<QAnnotation> result = ref.annotation;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_zIndex");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            int result = ref.zIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_image");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            UIImage* result = ref.image;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_centerOffset");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.centerOffset;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_calloutOffset");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.calloutOffset;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_isEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_isEnabled");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.enabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_isSelected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_isSelected");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.selected;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_canShowCallout");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.canShowCallout;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_customCalloutView");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            UIView* result = ref.customCalloutView;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_leftCalloutAccessoryView");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            UIView* result = ref.leftCalloutAccessoryView;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_rightCalloutAccessoryView");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            UIView* result = ref.rightCalloutAccessoryView;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_isDraggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_isDraggable");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.draggable;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QAnnotationView::get_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationView::get_dragState");
            }
        
            // ref object
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // invoke native method
            QAnnotationViewDragState result = ref.dragState;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QPointAnnotation::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPointAnnotation::get_coordinate");
            }
        
            // ref object
            QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"QPointAnnotation::get_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPointAnnotation::get_title");
            }
        
            // ref object
            QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.title;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPointAnnotation::get_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPointAnnotation::get_subtitle");
            }
        
            // ref object
            QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.subtitle;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPointAnnotation::get_indoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPointAnnotation::get_indoorInfo");
            }
        
            // ref object
            QPointAnnotation* ref = (QPointAnnotation*) args[@"__this__"];
        
            // invoke native method
            QIndoorInfo* result = ref.indoorInfo;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTextStyle::get_textColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTextStyle::get_textColor");
            }
        
            // ref object
            QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.textColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTextStyle::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTextStyle::get_strokeColor");
            }
        
            // ref object
            QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.strokeColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTextStyle::get_fontSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTextStyle::get_fontSize");
            }
        
            // ref object
            QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.fontSize;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTextStyle::get_priority": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTextStyle::get_priority");
            }
        
            // ref object
            QTextStyle* ref = (QTextStyle*) args[@"__this__"];
        
            // invoke native method
            QTextPriority result = ref.priority;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentText::get_startIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentText::get_startIndex");
            }
        
            // ref object
            QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
            // invoke native method
            int result = ref.startIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentText::get_endIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentText::get_endIndex");
            }
        
            // ref object
            QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
            // invoke native method
            int result = ref.endIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentText::get_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentText::get_name");
            }
        
            // ref object
            QSegmentText* ref = (QSegmentText*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.name;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QText::get_style": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QText::get_style");
            }
        
            // ref object
            QText* ref = (QText*) args[@"__this__"];
        
            // invoke native method
            QTextStyle* result = ref.style;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QText::get_segments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QText::get_segments");
            }
        
            // ref object
            QText* ref = (QText*) args[@"__this__"];
        
            // invoke native method
            NSArray<QSegmentText*>* result = ref.segments;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QOverlay::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlay::get_boundingMapRect");
            }
        
            // ref object
            id<QOverlay> ref = (id<QOverlay>) args[@"__this__"];
        
            // invoke native method
            QMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_page_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_page_size");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.page_size;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_page_index": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_page_index");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.page_index;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_keyword");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.keyword;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_boundary": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_boundary");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.boundary;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_filter");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.filter;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSPoiSearchOption::get_orderby": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSPoiSearchOption::get_orderby");
            }
        
            // ref object
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.orderby;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_keyword");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.keyword;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_region");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.region;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_filter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_filter");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.filter;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_region_fix": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_region_fix");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.region_fix;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_location");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.location;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_get_subpois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_get_subpois");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.get_subpois;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_policy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_policy");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.policy;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_address_format": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_address_format");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.address_format;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_page_index": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_page_index");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.page_index;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSuggestionSearchOption::get_page_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSuggestionSearchOption::get_page_size");
            }
        
            // ref object
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.page_size;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSReverseGeoCodeSearchOption::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSReverseGeoCodeSearchOption::get_location");
            }
        
            // ref object
            QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.location;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSReverseGeoCodeSearchOption::get_poi_options": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSReverseGeoCodeSearchOption::get_poi_options");
            }
        
            // ref object
            QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.poi_options;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSReverseGeoCodeSearchOption::get_get_poi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSReverseGeoCodeSearchOption::get_get_poi");
            }
        
            // ref object
            QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.get_poi;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSGeoCodeSearchOption::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSGeoCodeSearchOption::get_address");
            }
        
            // ref object
            QMSGeoCodeSearchOption* ref = (QMSGeoCodeSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSGeoCodeSearchOption::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSGeoCodeSearchOption::get_region");
            }
        
            // ref object
            QMSGeoCodeSearchOption* ref = (QMSGeoCodeSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.region;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSWalkingRouteSearchOption::get_from": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSWalkingRouteSearchOption::get_from");
            }
        
            // ref object
            QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.from;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSWalkingRouteSearchOption::get_to": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSWalkingRouteSearchOption::get_to");
            }
        
            // ref object
            QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.to;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_coordinate");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_speed");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            double result = ref.speed;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_accuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_accuracy");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            double result = ref.accuracy;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_course": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_course");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            double result = ref.course;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_heading");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            double result = ref.heading;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSTrackPoint::get_time": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSTrackPoint::get_time");
            }
        
            // ref object
            QMSTrackPoint* ref = (QMSTrackPoint*) args[@"__this__"];
        
            // invoke native method
            double result = ref.time;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_from": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_from");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.from;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_from_poi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_from_poi");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.from_poi;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_from_track": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_from_track");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.from_track;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_to": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_to");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.to;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_to_poi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_to_poi");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.to_poi;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_policy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_policy");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.policy;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_waypoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_waypoints");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.waypoints;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_heading");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.heading;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_speed": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_speed");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.speed;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_accuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_accuracy");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSNumber* result = ref.accuracy;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDrivingRouteSearchOption::get_plate_number": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDrivingRouteSearchOption::get_plate_number");
            }
        
            // ref object
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.plate_number;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSBusingRouteSearchOption::get_from": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteSearchOption::get_from");
            }
        
            // ref object
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.from;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSBusingRouteSearchOption::get_to": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteSearchOption::get_to");
            }
        
            // ref object
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.to;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSBusingRouteSearchOption::get_policy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSBusingRouteSearchOption::get_policy");
            }
        
            // ref object
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.policy;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDistrictChildrenSearchOption::get_ID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictChildrenSearchOption::get_ID");
            }
        
            // ref object
            QMSDistrictChildrenSearchOption* ref = (QMSDistrictChildrenSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.ID;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSDistrictSearchSearchOption::get_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSDistrictSearchSearchOption::get_keyword");
            }
        
            // ref object
            QMSDistrictSearchSearchOption* ref = (QMSDistrictSearchSearchOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.keyword;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QCircle::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCircle::get_coordinate");
            }
        
            // ref object
            QCircle* ref = (QCircle*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"QCircle::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCircle::get_radius");
            }
        
            // ref object
            QCircle* ref = (QCircle*) args[@"__this__"];
        
            // invoke native method
            double result = ref.radius;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QCircle::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCircle::get_boundingMapRect");
            }
        
            // ref object
            QCircle* ref = (QCircle*) args[@"__this__"];
        
            // invoke native method
            QMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        
        @"QOverlayPathView::get_fillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlayPathView::get_fillColor");
            }
        
            // ref object
            QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.fillColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QOverlayPathView::get_strokeColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlayPathView::get_strokeColor");
            }
        
            // ref object
            QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.strokeColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QOverlayPathView::get_lineWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QOverlayPathView::get_lineWidth");
            }
        
            // ref object
            QOverlayPathView* ref = (QOverlayPathView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.lineWidth;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QCustomLayer::get_layerID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QCustomLayer::get_layerID");
            }
        
            // ref object
            QCustomLayer* ref = (QCustomLayer*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.layerID;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QBasicMapViewLayer::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QBasicMapViewLayer::get_centerCoordinate");
            }
        
            // ref object
            QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.centerCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"QBasicMapViewLayer::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QBasicMapViewLayer::get_zoomLevel");
            }
        
            // ref object
            QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.zoomLevel;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QBasicMapViewLayer::get_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QBasicMapViewLayer::get_rotation");
            }
        
            // ref object
            QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.rotation;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QBasicMapViewLayer::get_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QBasicMapViewLayer::get_overlooking");
            }
        
            // ref object
            QBasicMapViewLayer* ref = (QBasicMapViewLayer*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.overlooking;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTileOverlayView::get_tileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayView::get_tileOverlay");
            }
        
            // ref object
            QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
            // invoke native method
            QTileOverlay* result = ref.tileOverlay;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTileOverlayView::get_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTileOverlayView::get_zIndex");
            }
        
            // ref object
            QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
            // invoke native method
            int result = ref.zIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_indoorPicker": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_indoorPicker");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.indoorPicker;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_indoorPickerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_indoorPickerOffset");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.indoorPickerOffset;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"QMapView::get_activeBuilding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_activeBuilding");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            QIndoorBuilding* result = ref.activeBuilding;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapView::get_activeLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_activeLevel");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            QIndoorLevel* result = ref.activeLevel;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QSegmentStyle::get_startIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentStyle::get_startIndex");
            }
        
            // ref object
            QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
            // invoke native method
            int result = ref.startIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentStyle::get_endIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentStyle::get_endIndex");
            }
        
            // ref object
            QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
            // invoke native method
            int result = ref.endIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentStyle::get_colorImageIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentStyle::get_colorImageIndex");
            }
        
            // ref object
            QSegmentStyle* ref = (QSegmentStyle*) args[@"__this__"];
        
            // invoke native method
            int result = ref.colorImageIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentColor::get_startIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentColor::get_startIndex");
            }
        
            // ref object
            QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
            // invoke native method
            int result = ref.startIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentColor::get_endIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentColor::get_endIndex");
            }
        
            // ref object
            QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
            // invoke native method
            int result = ref.endIndex;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QSegmentColor::get_color": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentColor::get_color");
            }
        
            // ref object
            QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.color;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QSegmentColor::get_borderColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QSegmentColor::get_borderColor");
            }
        
            // ref object
            QSegmentColor* ref = (QSegmentColor*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.borderColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_drawType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_drawType");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            QTextureLineDrawType result = ref.drawType;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_segmentColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_segmentColor");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            NSArray<QSegmentColor*>* result = ref.segmentColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_styleTextureImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_styleTextureImage");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            UIImage* result = ref.styleTextureImage;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_segmentStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_segmentStyle");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            NSArray<QSegmentStyle*>* result = ref.segmentStyle;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_isDrawSymbol": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_isDrawSymbol");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.drawSymbol;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_symbolImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_symbolImage");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            UIImage* result = ref.symbolImage;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_symbolGap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_symbolGap");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.symbolGap;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_eraseColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_eraseColor");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.eraseColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_footprintStep": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_footprintStep");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.footprintStep;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QIndoorInfo::get_buildUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorInfo::get_buildUid");
            }
        
            // ref object
            QIndoorInfo* ref = (QIndoorInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.buildUid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QIndoorInfo::get_levelName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QIndoorInfo::get_levelName");
            }
        
            // ref object
            QIndoorInfo* ref = (QIndoorInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.levelName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPolylineView::get_polyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolylineView::get_polyline");
            }
        
            // ref object
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // invoke native method
            QPolyline* result = ref.polyline;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPolylineView::get_borderWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolylineView::get_borderWidth");
            }
        
            // ref object
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.borderWidth;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QPolylineView::get_borderColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolylineView::get_borderColor");
            }
        
            // ref object
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.borderColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPolylineView::get_lineDashPattern": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolylineView::get_lineDashPattern");
            }
        
            // ref object
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // invoke native method
            NSArray<NSNumber*>* result = ref.lineDashPattern;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPolylineView::get_text": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolylineView::get_text");
            }
        
            // ref object
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // invoke native method
            QText* result = ref.text;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QHeatTileNode::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileNode::get_coordinate");
            }
        
            // ref object
            QHeatTileNode* ref = (QHeatTileNode*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"QHeatTileNode::get_value": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileNode::get_value");
            }
        
            // ref object
            QHeatTileNode* ref = (QHeatTileNode*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.value;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMSSearchServices::get_apiKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSearchServices::get_apiKey");
            }
        
            // ref object
            QMSSearchServices* ref = (QMSSearchServices*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.apiKey;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMSSearchServices::get_SDKVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMSSearchServices::get_SDKVersion");
            }
        
            // ref object
            QMSSearchServices* ref = (QMSSearchServices*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.SDKVersion;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QPolygon::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolygon::get_boundingMapRect");
            }
        
            // ref object
            QPolygon* ref = (QPolygon*) args[@"__this__"];
        
            // invoke native method
            QMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        
        @"QPolyline::get_boundingMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolyline::get_boundingMapRect");
            }
        
            // ref object
            QPolyline* ref = (QPolyline*) args[@"__this__"];
        
            // invoke native method
            QMapRect result = ref.boundingMapRect;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        
        @"QPolyline::get_indoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QPolyline::get_indoorInfo");
            }
        
            // ref object
            QPolyline* ref = (QPolyline*) args[@"__this__"];
        
            // invoke native method
            QIndoorInfo* result = ref.indoorInfo;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapServices::get_APIKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapServices::get_APIKey");
            }
        
            // ref object
            QMapServices* ref = (QMapServices*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.APIKey;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapServices::get_userId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapServices::get_userId");
            }
        
            // ref object
            QMapServices* ref = (QMapServices*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.userId;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapConfig::get_subID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapConfig::get_subID");
            }
        
            // ref object
            QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.subID;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapConfig::get_subKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapConfig::get_subKey");
            }
        
            // ref object
            QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.subKey;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapConfig::get_mapFont": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapConfig::get_mapFont");
            }
        
            // ref object
            QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.mapFont;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnimation::get_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnimation::get_duration");
            }
        
            // ref object
            QAnimation* ref = (QAnimation*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.duration;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QTexturePolylineView::get_emergeAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QTexturePolylineView::get_emergeAnimation");
            }
        
            // ref object
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // invoke native method
            QAnimation* result = ref.emergeAnimation;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QAnnotationViewLayer::get_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QAnnotationViewLayer::get_coordinate");
            }
        
            // ref object
            QAnnotationViewLayer* ref = (QAnnotationViewLayer*) args[@"__this__"];
        
            // invoke native method
            CGPoint result = ref.coordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        
        @"QUserLocationPresentation::get_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QUserLocationPresentation::get_icon");
            }
        
            // ref object
            QUserLocationPresentation* ref = (QUserLocationPresentation*) args[@"__this__"];
        
            // invoke native method
            UIImage* result = ref.icon;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QUserLocationPresentation::get_circleFillColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QUserLocationPresentation::get_circleFillColor");
            }
        
            // ref object
            QUserLocationPresentation* ref = (QUserLocationPresentation*) args[@"__this__"];
        
            // invoke native method
            UIColor* result = ref.circleFillColor;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QHeatTileGradient::get_colors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileGradient::get_colors");
            }
        
            // ref object
            QHeatTileGradient* ref = (QHeatTileGradient*) args[@"__this__"];
        
            // invoke native method
            NSArray<UIColor*>* result = ref.colors;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QHeatTileGradient::get_startPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileGradient::get_startPoints");
            }
        
            // ref object
            QHeatTileGradient* ref = (QHeatTileGradient*) args[@"__this__"];
        
            // invoke native method
            NSArray<NSNumber*>* result = ref.startPoints;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QHeatTileOverlay::get_decayRadius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileOverlay::get_decayRadius");
            }
        
            // ref object
            QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
            // invoke native method
            NSInteger result = ref.decayRadius;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QHeatTileOverlay::get_opacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileOverlay::get_opacity");
            }
        
            // ref object
            QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
            // invoke native method
            CGFloat result = ref.opacity;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QHeatTileOverlay::get_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QHeatTileOverlay::get_gradient");
            }
        
            // ref object
            QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
            // invoke native method
            QHeatTileGradient* result = ref.gradient;
        
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        
        @"QMapView::get_isHandDrawMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_isHandDrawMapEnabled");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.handDrawMapEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_showsTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_showsTraffic");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showsTraffic;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_mapType");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            QMapType result = ref.mapType;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_showsScale");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showsScale;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_showsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_showsBuildings");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showsBuildings;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_shows3DBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_shows3DBuildings");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.shows3DBuildings;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"QMapView::get_showsPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"QMapView::get_showsPoi");
            }
        
            // ref object
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.showsPoi;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
    };
}

@end
