//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TmapMapFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"QAnnotationView::initWithAnnotation_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
            // jsonable arg
            NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
            // ref
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotationView@%@::initWithAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"reuseIdentifier"]);
            }
        
            // invoke native method
            id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotationView@%@::prepareForReuse()", args[@"refId"]);
            }
        
            // invoke native method
            [ref prepareForReuse ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QAnnotationView::setSelected_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotationView@%@::setSelected(%@, %@)", args[@"refId"], args[@"selected"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setSelected : selected animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QAnnotationView::setDragState_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            QAnnotationViewDragState newDragState = (QAnnotationViewDragState) [args[@"newDragState"] integerValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotationView@%@::setDragState(%@, %@)", args[@"refId"], args[@"newDragState"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setDragState : newDragState animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QText::initWithSegments": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<QSegmentText*>* segments = (NSArray<QSegmentText*>*) args[@"segments"];
        
            // ref
            QText* ref = (QText*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QText@%@::initWithSegments(%@)", args[@"refId"], args[@"segments"]);
            }
        
            // invoke native method
            QText* result = [ref initWithSegments: segments];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMSPoiSearchOption::setBoundaryByRegionWithCityName_autoExtend": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
            // jsonable arg
            BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
        
            // ref
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSPoiSearchOption@%@::setBoundaryByRegionWithCityName(%@, %@)", args[@"refId"], args[@"cityName"], args[@"isAutoEntend"]);
            }
        
            // invoke native method
            [ref setBoundaryByRegionWithCityName : cityName autoExtend: isAutoEntend];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSPoiSearchOption::setBoundaryByRegionWithCityName_autoExtend_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
            // jsonable arg
            BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSPoiSearchOption@%@::setBoundaryByRegionWithCityName(%@, %@, %@)", args[@"refId"], args[@"cityName"], args[@"isAutoEntend"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setBoundaryByRegionWithCityName : cityName autoExtend: isAutoEntend center: coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSPoiSearchOption::setBoundaryByNearbyWithCenterCoordinate_radius_autoExtend": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // jsonable arg
            NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
            // jsonable arg
            BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
        
            // ref
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSPoiSearchOption@%@::setBoundaryByNearbyWithCenterCoordinate(%@, %@, %@)", args[@"refId"], args[@"centerCoordinate"], args[@"radius"], args[@"isAutoEntend"]);
            }
        
            // invoke native method
            [ref setBoundaryByNearbyWithCenterCoordinate : centerCoordinate radius: radius autoExtend: isAutoEntend];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSPoiSearchOption::setBoundaryByRectangleWithleftBottomCoordinate_rightTopCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* leftBottomCoordinateValue = (NSValue*) args[@"leftBottomCoordinate"];
            CLLocationCoordinate2D leftBottomCoordinate;
            [leftBottomCoordinateValue getValue:&leftBottomCoordinate];
            // struct arg
            NSValue* rightTopCoordinateValue = (NSValue*) args[@"rightTopCoordinate"];
            CLLocationCoordinate2D rightTopCoordinate;
            [rightTopCoordinateValue getValue:&rightTopCoordinate];
        
            // ref
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSPoiSearchOption@%@::setBoundaryByRectangleWithleftBottomCoordinate(%@, %@)", args[@"refId"], args[@"leftBottomCoordinate"], args[@"rightTopCoordinate"]);
            }
        
            // invoke native method
            [ref setBoundaryByRectangleWithleftBottomCoordinate : leftBottomCoordinate rightTopCoordinate: rightTopCoordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSPoiSearchOption::setFilterByCategories": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSArray<NSString*>* categories = (NSArray<NSString*>*) args[@"categories"];
        
            // ref
            QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSPoiSearchOption@%@::setFilterByCategories(%@)", args[@"refId"], args[@"categories"]);
            }
        
            // invoke native method
            [ref setFilterByCategories : categories];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSuggestionSearchOption::setFilterByCategories": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSArray<NSString*>* categories = (NSArray<NSString*>*) args[@"categories"];
        
            // ref
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSuggestionSearchOption@%@::setFilterByCategories(%@)", args[@"refId"], args[@"categories"]);
            }
        
            // invoke native method
            [ref setFilterByCategories : categories];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSuggestionSearchOption::setLocationWithCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSuggestionSearchOption@%@::setLocationWithCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setLocationWithCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSReverseGeoCodeSearchOption::setLocationWithCenterCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
        
            // ref
            QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSReverseGeoCodeSearchOption@%@::setLocationWithCenterCoordinate(%@)", args[@"refId"], args[@"centerCoordinate"]);
            }
        
            // invoke native method
            [ref setLocationWithCenterCoordinate : centerCoordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSWalkingRouteSearchOption::setFromCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSWalkingRouteSearchOption@%@::setFromCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setFromCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSWalkingRouteSearchOption::setToCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSWalkingRouteSearchOption@%@::setToCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setToCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSDrivingRouteSearchOption::setFromCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSDrivingRouteSearchOption@%@::setFromCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setFromCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSDrivingRouteSearchOption::setTrackPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<QMSTrackPoint*>* points = (NSArray<QMSTrackPoint*>*) args[@"points"];
        
            // ref
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSDrivingRouteSearchOption@%@::setTrackPoints(%@)", args[@"refId"], args[@"points"]);
            }
        
            // invoke native method
            [ref setTrackPoints : points];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSDrivingRouteSearchOption::setToCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSDrivingRouteSearchOption@%@::setToCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setToCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSDrivingRouteSearchOption::setPolicyWithType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            QMSDrivingRoutePolicyType type = (QMSDrivingRoutePolicyType) [args[@"type"] integerValue];
        
            // ref
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSDrivingRouteSearchOption@%@::setPolicyWithType(%@)", args[@"refId"], args[@"type"]);
            }
        
            // invoke native method
            [ref setPolicyWithType : type];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSDrivingRouteSearchOption::setWayPointsWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesValueList.count];
            for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSDrivingRouteSearchOption@%@::setWayPointsWithCoordinates(%@, %@)", args[@"refId"], args[@"coordinates"], args[@"count"]);
            }
        
            // invoke native method
            [ref setWayPointsWithCoordinates : coordinates count: count];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSBusingRouteSearchOption::setFromCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSBusingRouteSearchOption@%@::setFromCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setFromCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSBusingRouteSearchOption::setToCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSBusingRouteSearchOption@%@::setToCoordinate(%@)", args[@"refId"], args[@"coordinate"]);
            }
        
            // invoke native method
            [ref setToCoordinate : coordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSBusingRouteSearchOption::setPolicyWithType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            QMSBusingRoutePolicyType type = (QMSBusingRoutePolicyType) [args[@"type"] integerValue];
        
            // ref
            QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSBusingRouteSearchOption@%@::setPolicyWithType(%@)", args[@"refId"], args[@"type"]);
            }
        
            // invoke native method
            [ref setPolicyWithType : type];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QCircle::circleWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) args[@"coord"];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCircle::circleWithCenterCoordinate(%@, %@)", args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            QCircle* result = [QCircle circleWithCenterCoordinate: coord radius: radius];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QCircle::circleWithMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCircle::circleWithMapRect(%@)", args[@"mapRect"]);
            }
        
            // invoke native method
            QCircle* result = [QCircle circleWithMapRect: mapRect];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QCircle::initWithWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) args[@"coord"];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
            QCircle* ref = (QCircle*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCircle@%@::initWithWithCenterCoordinate(%@, %@)", args[@"refId"], args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            id result = [ref initWithWithCenterCoordinate: coord radius: radius];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QTileOverlayView::initWithTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QTileOverlay* tileOverlay = (QTileOverlay*) (args[@"tileOverlay"] == [NSNull null] ? nil : args[@"tileOverlay"]);
        
            // ref
            QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTileOverlayView@%@::initWithTileOverlay(%@)", args[@"refId"], args[@"tileOverlay"]);
            }
        
            // invoke native method
            QTileOverlayView* result = [ref initWithTileOverlay: tileOverlay];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QTileOverlayView::reloadData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTileOverlayView@%@::reloadData()", args[@"refId"]);
            }
        
            // invoke native method
            [ref reloadData ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setIndoorEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL indoorEnabled = [args[@"indoorEnabled"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setIndoorEnabled(%@)", args[@"refId"], args[@"indoorEnabled"]);
            }
        
            // invoke native method
            [ref setIndoorEnabled : indoorEnabled];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setActiveIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QIndoorInfo* indoorInfo = (QIndoorInfo*) (args[@"indoorInfo"] == [NSNull null] ? nil : args[@"indoorInfo"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setActiveIndoorInfo(%@)", args[@"refId"], args[@"indoorInfo"]);
            }
        
            // invoke native method
            [ref setActiveIndoorInfo : indoorInfo];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QTexturePolylineView::eraseFromStartToCurrentPoint_searchFrom_toColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            int pointIndex = [args[@"pointIndex"] intValue];
            // jsonable arg
            BOOL clearColor = [args[@"clearColor"] boolValue];
        
            // ref
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTexturePolylineView@%@::eraseFromStartToCurrentPoint(%@, %@, %@)", args[@"refId"], args[@"coordinate"], args[@"pointIndex"], args[@"clearColor"]);
            }
        
            // invoke native method
            [ref eraseFromStartToCurrentPoint : coordinate searchFrom: pointIndex toColor: clearColor];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QTexturePolylineView::setTurnArrowAtSegmentIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int index = [args[@"index"] intValue];
        
            // ref
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTexturePolylineView@%@::setTurnArrowAtSegmentIndex(%@)", args[@"refId"], args[@"index"]);
            }
        
            // invoke native method
            [ref setTurnArrowAtSegmentIndex : index];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QTexturePolylineView::clearTurnArrow": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTexturePolylineView@%@::clearTurnArrow()", args[@"refId"]);
            }
        
            // invoke native method
            [ref clearTurnArrow ];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QTexturePolylineView::setTurnArrowColor_borderColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIColor* filler = (UIColor*) (args[@"filler"] == [NSNull null] ? nil : args[@"filler"]);
            // ref arg
            UIColor* border = (UIColor*) (args[@"border"] == [NSNull null] ? nil : args[@"border"]);
        
            // ref
            QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTexturePolylineView@%@::setTurnArrowColor(%@, %@)", args[@"refId"], args[@"filler"], args[@"border"]);
            }
        
            // invoke native method
            [ref setTurnArrowColor : filler borderColor: border];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QIndoorInfo::initWithBuildUid_levelName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* buildUid = (NSString*) args[@"buildUid"];
            // jsonable arg
            NSString* levelName = (NSString*) args[@"levelName"];
        
            // ref
            QIndoorInfo* ref = (QIndoorInfo*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QIndoorInfo@%@::initWithBuildUid(%@, %@)", args[@"refId"], args[@"buildUid"], args[@"levelName"]);
            }
        
            // invoke native method
            QIndoorInfo* result = [ref initWithBuildUid: buildUid levelName: levelName];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolylineView::initWithPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QPolyline* polyline = (QPolyline*) (args[@"polyline"] == [NSNull null] ? nil : args[@"polyline"]);
        
            // ref
            QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolylineView@%@::initWithPolyline(%@)", args[@"refId"], args[@"polyline"]);
            }
        
            // invoke native method
            QPolylineView* result = [ref initWithPolyline: polyline];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMSSearchServices::sharedServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearchServices::sharedServices()");
            }
        
            // invoke native method
            QMSSearchServices* result = [QMSSearchServices sharedServices];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolygon::polygonWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygon::polygonWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            QPolygon* result = [QPolygon polygonWithCoordinates: coords count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolygon::polygonWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygon::polygonWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            QPolygon* result = [QPolygon polygonWithPoints: points count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolygon::initWithWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            QPolygon* ref = (QPolygon*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygon@%@::initWithWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            id result = [ref initWithWithCoordinates: coords count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolygon::initWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            QPolygon* ref = (QPolygon*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygon@%@::initWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            id result = [ref initWithPoints: points count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolyline::polylineWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolyline::polylineWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            QPolyline* result = [QPolyline polylineWithCoordinates: coords count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolyline::polylineWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolyline::polylineWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            QPolyline* result = [QPolyline polylineWithPoints: points count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolyline::initWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsValueList.count];
            for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            QPolyline* ref = (QPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolyline@%@::initWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            QPolyline* result = [ref initWithCoordinates: coords count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QPolyline::initWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
            QMapPoint points[pointsValueList.count];
            for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                QMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            QPolyline* ref = (QPolyline*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolyline@%@::initWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            QPolyline* result = [ref initWithPoints: points count: count];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapServices::sharedServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapServices::sharedServices()");
            }
        
            // invoke native method
            QMapServices* result = [QMapServices sharedServices];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapServices::sdkVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QMapServices* ref = (QMapServices*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapServices@%@::sdkVersion()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref sdkVersion];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapConfig::initWithSubID_subKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* subID = (NSString*) args[@"subID"];
            // jsonable arg
            NSString* subKey = (NSString*) args[@"subKey"];
        
            // ref
            QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapConfig@%@::initWithSubID(%@, %@)", args[@"refId"], args[@"subID"], args[@"subKey"]);
            }
        
            // invoke native method
            QMapConfig* result = [ref initWithSubID: subID subKey: subKey];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QHeatTileGradient::initWithColor_andWithStartPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<UIColor*>* colors = (NSArray<UIColor*>*) args[@"colors"];
            // jsonable arg
            NSArray<NSNumber*>* startPoints = (NSArray<NSNumber*>*) args[@"startPoints"];
        
            // ref
            QHeatTileGradient* ref = (QHeatTileGradient*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QHeatTileGradient@%@::initWithColor(%@, %@)", args[@"refId"], args[@"colors"], args[@"startPoints"]);
            }
        
            // invoke native method
            QHeatTileGradient* result = [ref initWithColor: colors andWithStartPoints: startPoints];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QHeatTileOverlay::initWithHeatTileNodes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* heatTileNodes = (NSArray<NSObject*>*) args[@"heatTileNodes"];
        
            // ref
            QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QHeatTileOverlay@%@::initWithHeatTileNodes(%@)", args[@"refId"], args[@"heatTileNodes"]);
            }
        
            // invoke native method
            QHeatTileOverlay* result = [ref initWithHeatTileNodes: heatTileNodes];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapView::loadPrefferedResourceFilesFromDirectory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* path = (NSString*) args[@"path"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView::loadPrefferedResourceFilesFromDirectory(%@)", args[@"path"]);
            }
        
            // invoke native method
            [QMapView loadPrefferedResourceFilesFromDirectory: path];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int styleType = [args[@"styleType"] intValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setMapStyle(%@)", args[@"refId"], args[@"styleType"]);
            }
        
            // invoke native method
            [ref setMapStyle : styleType];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setCompassOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* offsetValue = (NSValue*) args[@"offset"];
            CGPoint offset;
            [offsetValue getValue:&offset];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setCompassOffset(%@)", args[@"refId"], args[@"offset"]);
            }
        
            // invoke native method
            [ref setCompassOffset : offset];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setForeignLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            QMapLanguage language = (QMapLanguage) [args[@"language"] integerValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setForeignLanguage(%@)", args[@"refId"], args[@"language"]);
            }
        
            // invoke native method
            [ref setForeignLanguage : language];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setCenterOffsetY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float offset = [args[@"offset"] floatValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setCenterOffsetY(%@)", args[@"refId"], args[@"offset"]);
            }
        
            // invoke native method
            [ref setCenterOffsetY : offset];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setCenterOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* offsetValue = (NSValue*) args[@"offset"];
            CGPoint offset;
            [offsetValue getValue:&offset];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setCenterOffset(%@)", args[@"refId"], args[@"offset"]);
            }
        
            // invoke native method
            [ref setCenterOffset : offset];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setCenterOffset_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* offsetValue = (NSValue*) args[@"offset"];
            CGPoint offset;
            [offsetValue getValue:&offset];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setCenterOffset(%@, %@)", args[@"refId"], args[@"offset"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setCenterOffset : offset animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setLogoOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* offsetValue = (NSValue*) args[@"offset"];
            CGPoint offset;
            [offsetValue getValue:&offset];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setLogoOffset(%@)", args[@"refId"], args[@"offset"]);
            }
        
            // invoke native method
            [ref setLogoOffset : offset];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setLogoMargin_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* marginValue = (NSValue*) args[@"margin"];
            CGPoint margin;
            [marginValue getValue:&margin];
            // enum arg
            QMapLogoAnchor anchor = (QMapLogoAnchor) [args[@"anchor"] integerValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setLogoMargin(%@, %@)", args[@"refId"], args[@"margin"], args[@"anchor"]);
            }
        
            // invoke native method
            [ref setLogoMargin : margin anchor: anchor];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setLogoScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat scale = [args[@"scale"] floatValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setLogoScale(%@)", args[@"refId"], args[@"scale"]);
            }
        
            // invoke native method
            [ref setLogoScale : scale];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setScaleViewOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* offsetValue = (NSValue*) args[@"offset"];
            CGPoint offset;
            [offsetValue getValue:&offset];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setScaleViewOffset(%@)", args[@"refId"], args[@"offset"]);
            }
        
            // invoke native method
            [ref setScaleViewOffset : offset];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setRoadEventVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL visible = [args[@"visible"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setRoadEventVisible(%@)", args[@"refId"], args[@"visible"]);
            }
        
            // invoke native method
            [ref setRoadEventVisible : visible];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setCenterCoordinate_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setCenterCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setCenterCoordinate : coordinate animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setMinZoomLevel_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat minZoomLevel = [args[@"minZoomLevel"] floatValue];
            // jsonable arg
            CGFloat maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setMinZoomLevel(%@, %@)", args[@"refId"], args[@"minZoomLevel"], args[@"maxZoomLevel"]);
            }
        
            // invoke native method
            [ref setMinZoomLevel : minZoomLevel maxZoomLevel: maxZoomLevel];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setZoomLevel_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setZoomLevel(%@, %@)", args[@"refId"], args[@"zoomLevel"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setZoomLevel : zoomLevel animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setRotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat rotation = [args[@"rotation"] floatValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setRotation(%@, %@)", args[@"refId"], args[@"rotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setRotation : rotation animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setOverlooking_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat overlooking = [args[@"overlooking"] floatValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setOverlooking(%@, %@)", args[@"refId"], args[@"overlooking"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setOverlooking : overlooking animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setVisibleMapRect_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setVisibleMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setVisibleMapRect_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setVisibleMapRect(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setRegion_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            QCoordinateRegion region;
            [regionValue getValue:&region];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setRegion : region animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setRegion_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            QCoordinateRegion region;
            [regionValue getValue:&region];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setRegion(%@, %@, %@)", args[@"refId"], args[@"region"], args[@"insets"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setRegion : region edgePadding: insets animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::mapRectThatFits_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::mapRectThatFits(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"]);
            }
        
            // invoke native method
            QMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMapView::mapRectThatFits_containsCalloutView_annotations_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // jsonable arg
            BOOL bContainsCalloutView = [args[@"bContainsCalloutView"] boolValue];
            // list arg
            NSArray<id<QAnnotation>>* annotations = (NSArray<id<QAnnotation>>*) args[@"annotations"];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::mapRectThatFits(%@, %@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"bContainsCalloutView"], args[@"annotations"], args[@"insets"]);
            }
        
            // invoke native method
            QMapRect result = [ref mapRectThatFits: mapRect containsCalloutView: bContainsCalloutView annotations: annotations edgePadding: insets];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
            methodResult(__result__);
        },
        @"QMapView::zoomLevelThatFits_edgePadding_outCenterCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) args[@"insets"];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // list arg struct
            NSArray<NSValue*>* outCoordinateValueList = (NSArray<NSValue*>*) args[@"outCoordinate"];
            CLLocationCoordinate2D outCoordinate[outCoordinateValueList.count];
            for (int __i__ = 0; __i__ < outCoordinateValueList.count; __i__++) {
                NSValue* outCoordinateValue = (NSValue*) [outCoordinateValueList objectAtIndex:__i__];
                CLLocationCoordinate2D outCoordinateItem;
                [outCoordinateValue getValue:&outCoordinateItem];
                outCoordinate[__i__] = outCoordinateItem;
            }
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::zoomLevelThatFits(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"outCoordinate"]);
            }
        
            // invoke native method
            CGFloat result = [ref zoomLevelThatFits: mapRect edgePadding: insets outCenterCoordinate: outCoordinate];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"QMapView::setLimitMapRect_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
            QMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // enum arg
            QMapLimitRectFitMode mode = (QMapLimitRectFitMode) [args[@"mode"] integerValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setLimitMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"mode"]);
            }
        
            // invoke native method
            [ref setLimitMapRect : mapRect mode: mode];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::convertCoordinate_toPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // ref arg
            UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::convertCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"view"]);
            }
        
            // invoke native method
            CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"QMapView::convertPoint_toCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            CGPoint point;
            [pointValue getValue:&point];
            // ref arg
            UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::convertPoint(%@, %@)", args[@"refId"], args[@"point"], args[@"view"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"QMapView::convertRegion_toRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) args[@"region"];
            QCoordinateRegion region;
            [regionValue getValue:&region];
            // ref arg
            UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::convertRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"view"]);
            }
        
            // invoke native method
            CGRect result = [ref convertRegion: region toRectToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
            methodResult(__result__);
        },
        @"QMapView::convertRect_toRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
            // ref arg
            UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::convertRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"view"]);
            }
        
            // invoke native method
            QCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"QMapView::configureUserLocationPresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QUserLocationPresentation* presentation = (QUserLocationPresentation*) (args[@"presentation"] == [NSNull null] ? nil : args[@"presentation"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::configureUserLocationPresentation(%@)", args[@"refId"], args[@"presentation"]);
            }
        
            // invoke native method
            [ref configureUserLocationPresentation : presentation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setUserTrackingMode_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            QUserTrackingMode mode = (QUserTrackingMode) [args[@"mode"] integerValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setUserTrackingMode(%@, %@)", args[@"refId"], args[@"mode"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setUserTrackingMode : mode animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::setUserLocationHidden": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL hidden = [args[@"hidden"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::setUserLocationHidden(%@)", args[@"refId"], args[@"hidden"]);
            }
        
            // invoke native method
            [ref setUserLocationHidden : hidden];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::addAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref addAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::addAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref addAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::removeAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref removeAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::removeAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref removeAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::viewForAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            QAnnotationView* result = [ref viewForAnnotation: annotation];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* identifier = (NSString*) args[@"identifier"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::dequeueReusableAnnotationViewWithIdentifier(%@)", args[@"refId"], args[@"identifier"]);
            }
        
            // invoke native method
            QAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapView::bringAnnotationToFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::bringAnnotationToFront(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref bringAnnotationToFront : annotation];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::selectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::selectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref selectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::deselectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::deselectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref deselectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::addOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref addOverlay : overlay];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::addOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref addOverlays : overlays];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::removeOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref removeOverlay : overlay];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::removeOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref removeOverlays : overlays];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::viewForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::viewForOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            QOverlayView* result = [ref viewForOverlay: overlay];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapView::addCustomLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::addCustomLayer(%@)", args[@"refId"], args[@"layer"]);
            }
        
            // invoke native method
            [ref addCustomLayer : layer];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::removeCustomLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::removeCustomLayer(%@)", args[@"refId"], args[@"layer"]);
            }
        
            // invoke native method
            [ref removeCustomLayer : layer];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::takeSnapshot": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::takeSnapshot()", args[@"refId"]);
            }
        
            // invoke native method
            UIImage* result = [ref takeSnapshot];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMapView::takeSnapshotInRect_completion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
        
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::takeSnapshotInRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"completion"]);
            }
        
            // invoke native method
            [ref takeSnapshotInRect : rect completion: ^(UIImage* resultImage) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#resultImage::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                UIImage* argresultImage = resultImage;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|UIImage*#resultImage::void|UIImage*#resultImage" arguments:@{@"resultImage": argresultImage == nil ? [NSNull null] : argresultImage}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::takeSnapshotInRect_timeout_completion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            CGRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            CFTimeInterval timeout = [args[@"timeout"] doubleValue];
        
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::takeSnapshotInRect(%@, %@, %@)", args[@"refId"], args[@"rect"], args[@"timeout"], args[@"completion"]);
            }
        
            // invoke native method
            [ref takeSnapshotInRect : rect timeout: timeout completion: ^(UIImage* resultImage) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#resultImage::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                UIImage* argresultImage = resultImage;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|UIImage*#resultImage::void|UIImage*#resultImage" arguments:@{@"resultImage": argresultImage == nil ? [NSNull null] : argresultImage}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMapView::getDebugError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            QMapView* ref = (QMapView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMapView@%@::getDebugError()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref getDebugError];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QMSSearcher::initWithDelegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<QMSSearchDelegate> delegate = (id<QMSSearchDelegate>) (args[@"delegate"] == [NSNull null] ? nil : args[@"delegate"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::initWithDelegate(%@)", args[@"refId"], args[@"delegate"]);
            }
        
            // invoke native method
            QMSSearcher* result = [ref initWithDelegate: self];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithWalkingRouteSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSWalkingRouteSearchOption* wakingRouteSearchOption = (QMSWalkingRouteSearchOption*) (args[@"wakingRouteSearchOption"] == [NSNull null] ? nil : args[@"wakingRouteSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithWalkingRouteSearchOption(%@)", args[@"refId"], args[@"wakingRouteSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithWalkingRouteSearchOption : wakingRouteSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithPoiSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSPoiSearchOption* poiSearchOption = (QMSPoiSearchOption*) (args[@"poiSearchOption"] == [NSNull null] ? nil : args[@"poiSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithPoiSearchOption(%@)", args[@"refId"], args[@"poiSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithPoiSearchOption : poiSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithSuggestionSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSSuggestionSearchOption* suggestionSearchOption = (QMSSuggestionSearchOption*) (args[@"suggestionSearchOption"] == [NSNull null] ? nil : args[@"suggestionSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithSuggestionSearchOption(%@)", args[@"refId"], args[@"suggestionSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithSuggestionSearchOption : suggestionSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithReverseGeoCodeSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSReverseGeoCodeSearchOption* reverseGeoCodeSearchOption = (QMSReverseGeoCodeSearchOption*) (args[@"reverseGeoCodeSearchOption"] == [NSNull null] ? nil : args[@"reverseGeoCodeSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithReverseGeoCodeSearchOption(%@)", args[@"refId"], args[@"reverseGeoCodeSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithReverseGeoCodeSearchOption : reverseGeoCodeSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithGeoCodeSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSGeoCodeSearchOption* geoCodeSearchOption = (QMSGeoCodeSearchOption*) (args[@"geoCodeSearchOption"] == [NSNull null] ? nil : args[@"geoCodeSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithGeoCodeSearchOption(%@)", args[@"refId"], args[@"geoCodeSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithGeoCodeSearchOption : geoCodeSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithDrivingRouteSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSDrivingRouteSearchOption* drivingRouteSearchOption = (QMSDrivingRouteSearchOption*) (args[@"drivingRouteSearchOption"] == [NSNull null] ? nil : args[@"drivingRouteSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithDrivingRouteSearchOption(%@)", args[@"refId"], args[@"drivingRouteSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithDrivingRouteSearchOption : drivingRouteSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithBusingRouteSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSBusingRouteSearchOption* busingRouteSearchOption = (QMSBusingRouteSearchOption*) (args[@"busingRouteSearchOption"] == [NSNull null] ? nil : args[@"busingRouteSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithBusingRouteSearchOption(%@)", args[@"refId"], args[@"busingRouteSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithBusingRouteSearchOption : busingRouteSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithDistrictListSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSDistrictListSearchOption* districtListSearchOption = (QMSDistrictListSearchOption*) (args[@"districtListSearchOption"] == [NSNull null] ? nil : args[@"districtListSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithDistrictListSearchOption(%@)", args[@"refId"], args[@"districtListSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithDistrictListSearchOption : districtListSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithDistrictChildrenSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSDistrictChildrenSearchOption* districtChildrenSearchOption = (QMSDistrictChildrenSearchOption*) (args[@"districtChildrenSearchOption"] == [NSNull null] ? nil : args[@"districtChildrenSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithDistrictChildrenSearchOption(%@)", args[@"refId"], args[@"districtChildrenSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithDistrictChildrenSearchOption : districtChildrenSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QMSSearcher::searchWithDistrictSearchSearchOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QMSDistrictSearchSearchOption* districtSearchSearchOption = (QMSDistrictSearchSearchOption*) (args[@"districtSearchSearchOption"] == [NSNull null] ? nil : args[@"districtSearchSearchOption"]);
        
            // ref
            QMSSearcher* ref = (QMSSearcher*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QMSSearcher@%@::searchWithDistrictSearchSearchOption(%@)", args[@"refId"], args[@"districtSearchSearchOption"]);
            }
        
            // invoke native method
            [ref searchWithDistrictSearchSearchOption : districtSearchSearchOption];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QPolygonView::initWithPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QPolygon* polygon = (QPolygon*) (args[@"polygon"] == [NSNull null] ? nil : args[@"polygon"]);
        
            // ref
            QPolygonView* ref = (QPolygonView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QPolygonView@%@::initWithPolygon(%@)", args[@"refId"], args[@"polygon"]);
            }
        
            // invoke native method
            QPolygonView* result = [ref initWithPolygon: polygon];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QAnnotation::title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotation@%@::title()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref title];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QAnnotation::subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotation@%@::subtitle()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref subtitle];
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"QAnnotation::setCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* newCoordinateValue = (NSValue*) args[@"newCoordinate"];
            CLLocationCoordinate2D newCoordinate;
            [newCoordinateValue getValue:&newCoordinate];
        
            // ref
            id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotation@%@::setCoordinate(%@)", args[@"refId"], args[@"newCoordinate"]);
            }
        
            // invoke native method
            [ref setCoordinate : newCoordinate];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QAnnotation::indoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<QAnnotation> ref = (id<QAnnotation>) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QAnnotation@%@::indoorInfo()", args[@"refId"]);
            }
        
            // invoke native method
            QIndoorInfo* result = [ref indoorInfo];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QCircleView::initWithCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            QCircle* circle = (QCircle*) (args[@"circle"] == [NSNull null] ? nil : args[@"circle"]);
        
            // ref
            QCircleView* ref = (QCircleView*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QCircleView@%@::initWithCircle(%@)", args[@"refId"], args[@"circle"]);
            }
        
            // invoke native method
            id result = [ref initWithCircle: circle];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QTileOverlay::initWithURLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
            // ref
            QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTileOverlay@%@::initWithURLTemplate(%@)", args[@"refId"], args[@"URLTemplate"]);
            }
        
            // invoke native method
            QTileOverlay* result = [ref initWithURLTemplate: URLTemplate];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"QTileOverlay::loadTileAtPath_result": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pathValue = (NSValue*) args[@"path"];
            QTileOverlayPath path;
            [pathValue getValue:&path];
        
        
            // ref
            QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTileOverlay@%@::loadTileAtPath(%@, %@)", args[@"refId"], args[@"path"], args[@"result"]);
            }
        
            // invoke native method
            [ref loadTileAtPath : path result: ^(NSData* tileData, NSError* error) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                      methodChannelWithName:[NSString stringWithFormat:@"void|NSData*#tileData,NSError*#error::Callback@%@", @(ref.hash)]
                            binaryMessenger:[[weakSelf registrar] messenger]
                                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSData* argtileData = tileData;
                // ref callback arg
                NSError* argerror = error;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                  [channel invokeMethod:@"Callback::void|NSData*#tileData,NSError*#error::void|NSData*#tileData,NSError*#error" arguments:@{@"tileData": argtileData == nil ? [NSNull null] : argtileData, @"error": argerror == nil ? [NSNull null] : argerror}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QTileOverlay::cancelLoadOfTileAtPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* tilePathValue = (NSValue*) args[@"tilePath"];
            QTileOverlayPath tilePath;
            [tilePathValue getValue:&tilePath];
        
            // ref
            QTileOverlay* ref = (QTileOverlay*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: QTileOverlay@%@::cancelLoadOfTileAtPath(%@)", args[@"refId"], args[@"tilePath"]);
            }
        
            // invoke native method
            [ref cancelLoadOfTileAtPath : tilePath];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"QAnnotationView::initWithAnnotation_reuseIdentifier_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
                // jsonable arg
                NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotationView::prepareForReuse_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                // invoke native method
                [ref prepareForReuse ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotationView::setSelected_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL selected = [args[@"selected"] boolValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                // invoke native method
                [ref setSelected : selected animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QAnnotationView::setDragState_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QAnnotationViewDragState newDragState = (QAnnotationViewDragState) [args[@"newDragState"] integerValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QAnnotationView* ref = (QAnnotationView*) args[@"__this__"];
        
                // invoke native method
                [ref setDragState : newDragState animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QText::initWithSegments_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<QSegmentText*>* segments = (NSArray<QSegmentText*>*) args[@"segments"];
        
                // ref
                QText* ref = (QText*) args[@"__this__"];
        
                // invoke native method
                QText* result = [ref initWithSegments: segments];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSPoiSearchOption::setBoundaryByRegionWithCityName_autoExtend_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
                // jsonable arg
                BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setBoundaryByRegionWithCityName : cityName autoExtend: isAutoEntend];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSPoiSearchOption::setBoundaryByRegionWithCityName_autoExtend_center_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
                // jsonable arg
                BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setBoundaryByRegionWithCityName : cityName autoExtend: isAutoEntend center: coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSPoiSearchOption::setBoundaryByNearbyWithCenterCoordinate_radius_autoExtend_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
                CLLocationCoordinate2D centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
                // jsonable arg
                NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
                // jsonable arg
                BOOL isAutoEntend = [args[@"isAutoEntend"] boolValue];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setBoundaryByNearbyWithCenterCoordinate : centerCoordinate radius: radius autoExtend: isAutoEntend];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSPoiSearchOption::setBoundaryByRectangleWithleftBottomCoordinate_rightTopCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* leftBottomCoordinateValue = (NSValue*) args[@"leftBottomCoordinate"];
                CLLocationCoordinate2D leftBottomCoordinate;
                [leftBottomCoordinateValue getValue:&leftBottomCoordinate];
                // struct arg
                NSValue* rightTopCoordinateValue = (NSValue*) args[@"rightTopCoordinate"];
                CLLocationCoordinate2D rightTopCoordinate;
                [rightTopCoordinateValue getValue:&rightTopCoordinate];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setBoundaryByRectangleWithleftBottomCoordinate : leftBottomCoordinate rightTopCoordinate: rightTopCoordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSPoiSearchOption::setFilterByCategories_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSArray<NSString*>* categories = (NSArray<NSString*>*) args[@"categories"];
        
                // ref
                QMSPoiSearchOption* ref = (QMSPoiSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setFilterByCategories : categories];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSuggestionSearchOption::setFilterByCategories_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSArray<NSString*>* categories = (NSArray<NSString*>*) args[@"categories"];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setFilterByCategories : categories];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSuggestionSearchOption::setLocationWithCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSSuggestionSearchOption* ref = (QMSSuggestionSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setLocationWithCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSReverseGeoCodeSearchOption::setLocationWithCenterCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
                CLLocationCoordinate2D centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
        
                // ref
                QMSReverseGeoCodeSearchOption* ref = (QMSReverseGeoCodeSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setLocationWithCenterCoordinate : centerCoordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSWalkingRouteSearchOption::setFromCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setFromCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSWalkingRouteSearchOption::setToCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSWalkingRouteSearchOption* ref = (QMSWalkingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setToCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSDrivingRouteSearchOption::setFromCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setFromCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSDrivingRouteSearchOption::setTrackPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<QMSTrackPoint*>* points = (NSArray<QMSTrackPoint*>*) args[@"points"];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setTrackPoints : points];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSDrivingRouteSearchOption::setToCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setToCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSDrivingRouteSearchOption::setPolicyWithType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QMSDrivingRoutePolicyType type = (QMSDrivingRoutePolicyType) [args[@"type"] integerValue];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setPolicyWithType : type];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSDrivingRouteSearchOption::setWayPointsWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
                CLLocationCoordinate2D coordinates[coordinatesValueList.count];
                for (int __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                    NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordinatesItem;
                    [coordinatesValue getValue:&coordinatesItem];
                    coordinates[__i__] = coordinatesItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                QMSDrivingRouteSearchOption* ref = (QMSDrivingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setWayPointsWithCoordinates : coordinates count: count];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSBusingRouteSearchOption::setFromCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setFromCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSBusingRouteSearchOption::setToCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setToCoordinate : coordinate];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSBusingRouteSearchOption::setPolicyWithType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QMSBusingRoutePolicyType type = (QMSBusingRoutePolicyType) [args[@"type"] integerValue];
        
                // ref
                QMSBusingRouteSearchOption* ref = (QMSBusingRouteSearchOption*) args[@"__this__"];
        
                // invoke native method
                [ref setPolicyWithType : type];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QCircle::circleWithCenterCoordinate_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordValue = (NSValue*) args[@"coord"];
                CLLocationCoordinate2D coord;
                [coordValue getValue:&coord];
                // jsonable arg
                double radius = [args[@"radius"] doubleValue];
        
                // ref
        
        
                // invoke native method
                QCircle* result = [QCircle circleWithCenterCoordinate: coord radius: radius];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QCircle::circleWithMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
        
                // ref
        
        
                // invoke native method
                QCircle* result = [QCircle circleWithMapRect: mapRect];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QCircle::initWithWithCenterCoordinate_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordValue = (NSValue*) args[@"coord"];
                CLLocationCoordinate2D coord;
                [coordValue getValue:&coord];
                // jsonable arg
                double radius = [args[@"radius"] doubleValue];
        
                // ref
                QCircle* ref = (QCircle*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithWithCenterCoordinate: coord radius: radius];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTileOverlayView::initWithTileOverlay_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QTileOverlay* tileOverlay = (QTileOverlay*) (args[@"tileOverlay"] == [NSNull null] ? nil : args[@"tileOverlay"]);
        
                // ref
                QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
                // invoke native method
                QTileOverlayView* result = [ref initWithTileOverlay: tileOverlay];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTileOverlayView::reloadData_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QTileOverlayView* ref = (QTileOverlayView*) args[@"__this__"];
        
                // invoke native method
                [ref reloadData ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setIndoorEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL indoorEnabled = [args[@"indoorEnabled"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setIndoorEnabled : indoorEnabled];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setActiveIndoorInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QIndoorInfo* indoorInfo = (QIndoorInfo*) (args[@"indoorInfo"] == [NSNull null] ? nil : args[@"indoorInfo"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setActiveIndoorInfo : indoorInfo];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTexturePolylineView::eraseFromStartToCurrentPoint_searchFrom_toColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                int pointIndex = [args[@"pointIndex"] intValue];
                // jsonable arg
                BOOL clearColor = [args[@"clearColor"] boolValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                // invoke native method
                [ref eraseFromStartToCurrentPoint : coordinate searchFrom: pointIndex toColor: clearColor];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTexturePolylineView::setTurnArrowAtSegmentIndex_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int index = [args[@"index"] intValue];
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                // invoke native method
                [ref setTurnArrowAtSegmentIndex : index];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTexturePolylineView::clearTurnArrow_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                // invoke native method
                [ref clearTurnArrow ];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QTexturePolylineView::setTurnArrowColor_borderColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* filler = (UIColor*) (args[@"filler"] == [NSNull null] ? nil : args[@"filler"]);
                // ref arg
                UIColor* border = (UIColor*) (args[@"border"] == [NSNull null] ? nil : args[@"border"]);
        
                // ref
                QTexturePolylineView* ref = (QTexturePolylineView*) args[@"__this__"];
        
                // invoke native method
                [ref setTurnArrowColor : filler borderColor: border];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QIndoorInfo::initWithBuildUid_levelName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* buildUid = (NSString*) args[@"buildUid"];
                // jsonable arg
                NSString* levelName = (NSString*) args[@"levelName"];
        
                // ref
                QIndoorInfo* ref = (QIndoorInfo*) args[@"__this__"];
        
                // invoke native method
                QIndoorInfo* result = [ref initWithBuildUid: buildUid levelName: levelName];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolylineView::initWithPolyline_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                QPolyline* polyline = (QPolyline*) (args[@"polyline"] == [NSNull null] ? nil : args[@"polyline"]);
        
                // ref
                QPolylineView* ref = (QPolylineView*) args[@"__this__"];
        
                // invoke native method
                QPolylineView* result = [ref initWithPolyline: polyline];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMSSearchServices::sharedServices_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                QMSSearchServices* result = [QMSSearchServices sharedServices];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolygon::polygonWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                QPolygon* result = [QPolygon polygonWithCoordinates: coords count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolygon::polygonWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                QMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    QMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                QPolygon* result = [QPolygon polygonWithPoints: points count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolygon::initWithWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                QPolygon* ref = (QPolygon*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithWithCoordinates: coords count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolygon::initWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                QMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    QMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                QPolygon* ref = (QPolygon*) args[@"__this__"];
        
                // invoke native method
                id result = [ref initWithPoints: points count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolyline::polylineWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                QPolyline* result = [QPolyline polylineWithCoordinates: coords count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolyline::polylineWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                QMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    QMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
        
        
                // invoke native method
                QPolyline* result = [QPolyline polylineWithPoints: points count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolyline::initWithCoordinates_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* coordsValueList = (NSArray<NSValue*>*) args[@"coords"];
                CLLocationCoordinate2D coords[coordsValueList.count];
                for (int __i__ = 0; __i__ < coordsValueList.count; __i__++) {
                    NSValue* coordsValue = (NSValue*) [coordsValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D coordsItem;
                    [coordsValue getValue:&coordsItem];
                    coords[__i__] = coordsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                QPolyline* ref = (QPolyline*) args[@"__this__"];
        
                // invoke native method
                QPolyline* result = [ref initWithCoordinates: coords count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QPolyline::initWithPoints_count_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg struct
                NSArray<NSValue*>* pointsValueList = (NSArray<NSValue*>*) args[@"points"];
                QMapPoint points[pointsValueList.count];
                for (int __i__ = 0; __i__ < pointsValueList.count; __i__++) {
                    NSValue* pointsValue = (NSValue*) [pointsValueList objectAtIndex:__i__];
                    QMapPoint pointsItem;
                    [pointsValue getValue:&pointsItem];
                    points[__i__] = pointsItem;
                }
                // jsonable arg
                NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
                // ref
                QPolyline* ref = (QPolyline*) args[@"__this__"];
        
                // invoke native method
                QPolyline* result = [ref initWithPoints: points count: count];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapServices::sharedServices_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                QMapServices* result = [QMapServices sharedServices];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapServices::sdkVersion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                QMapServices* ref = (QMapServices*) args[@"__this__"];
        
                // invoke native method
                NSString* result = [ref sdkVersion];
        
                // result
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapConfig::initWithSubID_subKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* subID = (NSString*) args[@"subID"];
                // jsonable arg
                NSString* subKey = (NSString*) args[@"subKey"];
        
                // ref
                QMapConfig* ref = (QMapConfig*) args[@"__this__"];
        
                // invoke native method
                QMapConfig* result = [ref initWithSubID: subID subKey: subKey];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QHeatTileGradient::initWithColor_andWithStartPoints_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<UIColor*>* colors = (NSArray<UIColor*>*) args[@"colors"];
                // jsonable arg
                NSArray<NSNumber*>* startPoints = (NSArray<NSNumber*>*) args[@"startPoints"];
        
                // ref
                QHeatTileGradient* ref = (QHeatTileGradient*) args[@"__this__"];
        
                // invoke native method
                QHeatTileGradient* result = [ref initWithColor: colors andWithStartPoints: startPoints];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QHeatTileOverlay::initWithHeatTileNodes_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSObject*>* heatTileNodes = (NSArray<NSObject*>*) args[@"heatTileNodes"];
        
                // ref
                QHeatTileOverlay* ref = (QHeatTileOverlay*) args[@"__this__"];
        
                // invoke native method
                QHeatTileOverlay* result = [ref initWithHeatTileNodes: heatTileNodes];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::loadPrefferedResourceFilesFromDirectory_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* path = (NSString*) args[@"path"];
        
                // ref
        
        
                // invoke native method
                [QMapView loadPrefferedResourceFilesFromDirectory: path];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setMapStyle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int styleType = [args[@"styleType"] intValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMapStyle : styleType];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setCompassOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* offsetValue = (NSValue*) args[@"offset"];
                CGPoint offset;
                [offsetValue getValue:&offset];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCompassOffset : offset];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setForeignLanguage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                QMapLanguage language = (QMapLanguage) [args[@"language"] integerValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setForeignLanguage : language];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setCenterOffsetY_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                float offset = [args[@"offset"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCenterOffsetY : offset];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setCenterOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* offsetValue = (NSValue*) args[@"offset"];
                CGPoint offset;
                [offsetValue getValue:&offset];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCenterOffset : offset];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setCenterOffset_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* offsetValue = (NSValue*) args[@"offset"];
                CGPoint offset;
                [offsetValue getValue:&offset];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCenterOffset : offset animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setLogoOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* offsetValue = (NSValue*) args[@"offset"];
                CGPoint offset;
                [offsetValue getValue:&offset];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setLogoOffset : offset];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setLogoMargin_anchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* marginValue = (NSValue*) args[@"margin"];
                CGPoint margin;
                [marginValue getValue:&margin];
                // enum arg
                QMapLogoAnchor anchor = (QMapLogoAnchor) [args[@"anchor"] integerValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setLogoMargin : margin anchor: anchor];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setLogoScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat scale = [args[@"scale"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setLogoScale : scale];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setScaleViewOffset_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* offsetValue = (NSValue*) args[@"offset"];
                CGPoint offset;
                [offsetValue getValue:&offset];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setScaleViewOffset : offset];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setRoadEventVisible_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL visible = [args[@"visible"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setRoadEventVisible : visible];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setCenterCoordinate_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setCenterCoordinate : coordinate animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setMinZoomLevel_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat minZoomLevel = [args[@"minZoomLevel"] floatValue];
                // jsonable arg
                CGFloat maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setMinZoomLevel : minZoomLevel maxZoomLevel: maxZoomLevel];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setZoomLevel_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setZoomLevel : zoomLevel animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setRotation_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat rotation = [args[@"rotation"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setRotation : rotation animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setOverlooking_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat overlooking = [args[@"overlooking"] floatValue];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setOverlooking : overlooking animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setVisibleMapRect_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setVisibleMapRect_edgePadding_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setRegion_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                QCoordinateRegion region;
                [regionValue getValue:&region];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setRegion : region animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setRegion_edgePadding_animated_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                QCoordinateRegion region;
                [regionValue getValue:&region];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // jsonable arg
                BOOL animated = [args[@"animated"] boolValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setRegion : region edgePadding: insets animated: animated];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::mapRectThatFits_edgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::mapRectThatFits_containsCalloutView_annotations_edgePadding_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // jsonable arg
                BOOL bContainsCalloutView = [args[@"bContainsCalloutView"] boolValue];
                // list arg
                NSArray<id<QAnnotation>>* annotations = (NSArray<id<QAnnotation>>*) args[@"annotations"];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                QMapRect result = [ref mapRectThatFits: mapRect containsCalloutView: bContainsCalloutView annotations: annotations edgePadding: insets];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::zoomLevelThatFits_edgePadding_outCenterCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // struct arg
                NSValue* insetsValue = (NSValue*) args[@"insets"];
                UIEdgeInsets insets;
                [insetsValue getValue:&insets];
                // list arg struct
                NSArray<NSValue*>* outCoordinateValueList = (NSArray<NSValue*>*) args[@"outCoordinate"];
                CLLocationCoordinate2D outCoordinate[outCoordinateValueList.count];
                for (int __i__ = 0; __i__ < outCoordinateValueList.count; __i__++) {
                    NSValue* outCoordinateValue = (NSValue*) [outCoordinateValueList objectAtIndex:__i__];
                    CLLocationCoordinate2D outCoordinateItem;
                    [outCoordinateValue getValue:&outCoordinateItem];
                    outCoordinate[__i__] = outCoordinateItem;
                }
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                CGFloat result = [ref zoomLevelThatFits: mapRect edgePadding: insets outCenterCoordinate: outCoordinate];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::setLimitMapRect_mode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
                QMapRect mapRect;
                [mapRectValue getValue:&mapRect];
                // enum arg
                QMapLimitRectFitMode mode = (QMapLimitRectFitMode) [args[@"mode"] integerValue];
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                [ref setLimitMapRect : mapRect mode: mode];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::convertCoordinate_toPointToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
                CLLocationCoordinate2D coordinate;
                [coordinateValue getValue:&coordinate];
                // ref arg
                UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::convertPoint_toCoordinateFromView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* pointValue = (NSValue*) args[@"point"];
                CGPoint point;
                [pointValue getValue:&point];
                // ref arg
                UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"QMapView::convertRegion_toRectToView_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) args[@"region"];
                QCoordinateRegion region;
                [regionValue getValue:&region];
                // ref arg
                UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
        
                // ref
                QMapView* ref = (QMapView*) args[@"__this__"];
        
                // invoke native method
                CGRect result = [ref convertRegion: region toRectToView: view];
        
                // result
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
    };
}

@end
