//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "QMapViewFactory.h"
#import "TmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation QMapViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject<FlutterMessageCodec>*)createArgsCodec {
  return [FlutterStandardMessageCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]];
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[QMapViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar arguments: args];
}

@end

@implementation QMapViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler>* _handlerMap;
  QMapView* _view;
  id _args;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar arguments:(id _Nullable)args {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
    _args = args;
  }

  return self;
}

- (UIView *)view {
  __weak __typeof(self)weakSelf = self;
  if (_view == nil) {
    NSDictionary<NSString*, id>* params = (NSDictionary<NSString*, id>*) _args;

    _view = [[QMapView alloc] initWithFrame:_frame];

    ////////////////////////////////初始化UiKitView////////////////////////////////////////
      NSNumber* mapType = (NSNumber*) params[@"mapType"];
      NSNumber* showZoomControl = (NSNumber*) params[@"showZoomControl"];
      NSNumber* showCompass = (NSNumber*) params[@"showCompass"];
      NSNumber* showScaleControl = (NSNumber*) params[@"showScaleControl"];
      NSNumber* zoomGesturesEnabled = (NSNumber*) params[@"zoomGesturesEnabled"];
      NSNumber* scrollGesturesEnabled = (NSNumber*) params[@"scrollGesturesEnabled"];
      NSNumber* rotateGestureEnabled = (NSNumber*) params[@"rotateGestureEnabled"];
      NSNumber* tiltGestureEnabled = (NSNumber*) params[@"tiltGestureEnabled"];
      NSNumber* zoomLevel = (NSNumber*) params[@"zoomLevel"];
      NSNumber* tilt = (NSNumber*) params[@"tilt"];
      NSNumber* bearing = (NSNumber*) params[@"bearing"];
      NSNumber* centerCoordinateLatitude = (NSNumber*) params[@"centerCoordinateLatitude"];
      NSNumber* centerCoordinateLongitude = (NSNumber*) params[@"centerCoordinateLongitude"];
      
      if (mapType != nil && (NSNull*)
          mapType != [NSNull null]) _view.mapType = [mapType intValue];
      if (showCompass != nil && (NSNull*) showCompass != [NSNull null])
          _view.showsCompass = [showCompass boolValue];
      if (showScaleControl != nil && (NSNull*) showScaleControl != [NSNull null])
          _view.showsScale = [showScaleControl boolValue];
      if (zoomGesturesEnabled != nil && (NSNull*) zoomGesturesEnabled != [NSNull null])
          _view.zoomEnabled = [zoomGesturesEnabled boolValue];
      if (scrollGesturesEnabled != nil && (NSNull*) scrollGesturesEnabled != [NSNull null])
          _view.scrollEnabled = [scrollGesturesEnabled boolValue];
      if (rotateGestureEnabled != nil && (NSNull*) rotateGestureEnabled != [NSNull null])
          _view.rotateEnabled = [rotateGestureEnabled boolValue];
      if (tiltGestureEnabled != nil && (NSNull*) tiltGestureEnabled != [NSNull null])
          _view.overlookingEnabled = [tiltGestureEnabled boolValue];
      if (zoomLevel != nil && (NSNull*) zoomLevel != [NSNull null])
          _view.zoomLevel = [zoomLevel doubleValue];
      if (tilt != nil && (NSNull*) tilt != [NSNull null])
          _view.overlooking = [tilt doubleValue];
      if (bearing != nil && (NSNull*) bearing != [NSNull null])
          _view.rotation = [bearing doubleValue];
      if ((centerCoordinateLatitude != nil && (NSNull*) centerCoordinateLatitude != [NSNull null])
          && (centerCoordinateLongitude != nil && (NSNull*) centerCoordinateLongitude != [NSNull null]))
          _view.centerCoordinate = CLLocationCoordinate2DMake([centerCoordinateLatitude doubleValue], [centerCoordinateLongitude doubleValue]);
    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    // 这里用一个magic number调整一下id
    // 同时存放viewId和refId的对象, 供后续viewId转refId使用
    HEAP[[NSString stringWithFormat:@"%@", @(2147483647 - _viewId)]] = _view;
    HEAP[[NSString stringWithFormat:@"%@", @(_view.hash)]] = _view;
  }

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"me.yohom/tmap_map_fluttify/QMapView"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf) strongSelf = weakSelf;
    if (strongSelf != nil && strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion

  //region handlers
  _handlerMap = @{
      @"QMapView::loadPrefferedResourceFilesFromDirectory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* path = (NSString*) args[@"path"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView::loadPrefferedResourceFilesFromDirectory(%@)", args[@"path"]);
          }
      
          // invoke native method
          [QMapView loadPrefferedResourceFilesFromDirectory: path];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int styleType = [args[@"styleType"] intValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setMapStyle(%@)", args[@"refId"], args[@"styleType"]);
          }
      
          // invoke native method
          [ref setMapStyle : styleType];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setCompassOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* offsetValue = (NSValue*) args[@"offset"];
          CGPoint offset;
          [offsetValue getValue:&offset];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setCompassOffset(%@)", args[@"refId"], args[@"offset"]);
          }
      
          // invoke native method
          [ref setCompassOffset : offset];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setForeignLanguage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          QMapLanguage language = (QMapLanguage) [args[@"language"] integerValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setForeignLanguage(%@)", args[@"refId"], args[@"language"]);
          }
      
          // invoke native method
          [ref setForeignLanguage : language];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setCenterOffsetY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          float offset = [args[@"offset"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setCenterOffsetY(%@)", args[@"refId"], args[@"offset"]);
          }
      
          // invoke native method
          [ref setCenterOffsetY : offset];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setCenterOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* offsetValue = (NSValue*) args[@"offset"];
          CGPoint offset;
          [offsetValue getValue:&offset];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setCenterOffset(%@)", args[@"refId"], args[@"offset"]);
          }
      
          // invoke native method
          [ref setCenterOffset : offset];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setCenterOffset_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* offsetValue = (NSValue*) args[@"offset"];
          CGPoint offset;
          [offsetValue getValue:&offset];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setCenterOffset(%@, %@)", args[@"refId"], args[@"offset"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setCenterOffset : offset animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setLogoOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* offsetValue = (NSValue*) args[@"offset"];
          CGPoint offset;
          [offsetValue getValue:&offset];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setLogoOffset(%@)", args[@"refId"], args[@"offset"]);
          }
      
          // invoke native method
          [ref setLogoOffset : offset];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setLogoMargin_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* marginValue = (NSValue*) args[@"margin"];
          CGPoint margin;
          [marginValue getValue:&margin];
          // enum arg
          QMapLogoAnchor anchor = (QMapLogoAnchor) [args[@"anchor"] integerValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setLogoMargin(%@, %@)", args[@"refId"], args[@"margin"], args[@"anchor"]);
          }
      
          // invoke native method
          [ref setLogoMargin : margin anchor: anchor];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setLogoScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat scale = [args[@"scale"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setLogoScale(%@)", args[@"refId"], args[@"scale"]);
          }
      
          // invoke native method
          [ref setLogoScale : scale];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setScaleViewOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* offsetValue = (NSValue*) args[@"offset"];
          CGPoint offset;
          [offsetValue getValue:&offset];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setScaleViewOffset(%@)", args[@"refId"], args[@"offset"]);
          }
      
          // invoke native method
          [ref setScaleViewOffset : offset];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setRoadEventVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL visible = [args[@"visible"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setRoadEventVisible(%@)", args[@"refId"], args[@"visible"]);
          }
      
          // invoke native method
          [ref setRoadEventVisible : visible];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setCenterCoordinate_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setCenterCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setCenterCoordinate : coordinate animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setMinZoomLevel_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat minZoomLevel = [args[@"minZoomLevel"] floatValue];
          // jsonable arg
          CGFloat maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setMinZoomLevel(%@, %@)", args[@"refId"], args[@"minZoomLevel"], args[@"maxZoomLevel"]);
          }
      
          // invoke native method
          [ref setMinZoomLevel : minZoomLevel maxZoomLevel: maxZoomLevel];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setZoomLevel_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setZoomLevel(%@, %@)", args[@"refId"], args[@"zoomLevel"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setZoomLevel : zoomLevel animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setRotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat rotation = [args[@"rotation"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setRotation(%@, %@)", args[@"refId"], args[@"rotation"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setRotation : rotation animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setOverlooking_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          CGFloat overlooking = [args[@"overlooking"] floatValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setOverlooking(%@, %@)", args[@"refId"], args[@"overlooking"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setOverlooking : overlooking animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setVisibleMapRect_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setVisibleMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setVisibleMapRect_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) args[@"insets"];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setVisibleMapRect(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setRegion_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) args[@"region"];
          QCoordinateRegion region;
          [regionValue getValue:&region];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setRegion : region animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setRegion_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) args[@"region"];
          QCoordinateRegion region;
          [regionValue getValue:&region];
          // struct arg
          NSValue* insetsValue = (NSValue*) args[@"insets"];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setRegion(%@, %@, %@)", args[@"refId"], args[@"region"], args[@"insets"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setRegion : region edgePadding: insets animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::mapRectThatFits_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) args[@"insets"];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::mapRectThatFits(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"]);
          }
      
          // invoke native method
          QMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
      
          methodResult(__result__);
      },
      @"QMapView::mapRectThatFits_containsCalloutView_annotations_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // jsonable arg
          BOOL bContainsCalloutView = [args[@"bContainsCalloutView"] boolValue];
          // list arg
          NSArray<id<QAnnotation>>* annotations = (NSArray<id<QAnnotation>>*) args[@"annotations"];
          // struct arg
          NSValue* insetsValue = (NSValue*) args[@"insets"];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::mapRectThatFits(%@, %@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"bContainsCalloutView"], args[@"annotations"], args[@"insets"]);
          }
      
          // invoke native method
          QMapRect result = [ref mapRectThatFits: mapRect containsCalloutView: bContainsCalloutView annotations: annotations edgePadding: insets];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
      
          methodResult(__result__);
      },
      @"QMapView::zoomLevelThatFits_edgePadding_outCenterCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // struct arg
          NSValue* insetsValue = (NSValue*) args[@"insets"];
          UIEdgeInsets insets;
          [insetsValue getValue:&insets];
          // list arg struct
          NSArray<NSValue*>* outCoordinateValueList = (NSArray<NSValue*>*) args[@"outCoordinate"];
          CLLocationCoordinate2D outCoordinate[outCoordinateValueList.count];
          for (int __i__ = 0; __i__ < outCoordinateValueList.count; __i__++) {
              NSValue* outCoordinateValue = (NSValue*) [outCoordinateValueList objectAtIndex:__i__];
              CLLocationCoordinate2D outCoordinateItem;
              [outCoordinateValue getValue:&outCoordinateItem];
              outCoordinate[__i__] = outCoordinateItem;
          }
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::zoomLevelThatFits(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"outCoordinate"]);
          }
      
          // invoke native method
          CGFloat result = [ref zoomLevelThatFits: mapRect edgePadding: insets outCenterCoordinate: outCoordinate];
      
          // result
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      @"QMapView::setLimitMapRect_mode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* mapRectValue = (NSValue*) args[@"mapRect"];
          QMapRect mapRect;
          [mapRectValue getValue:&mapRect];
          // enum arg
          QMapLimitRectFitMode mode = (QMapLimitRectFitMode) [args[@"mode"] integerValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setLimitMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"mode"]);
          }
      
          // invoke native method
          [ref setLimitMapRect : mapRect mode: mode];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::convertCoordinate_toPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
          CLLocationCoordinate2D coordinate;
          [coordinateValue getValue:&coordinate];
          // ref arg
          UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::convertCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"view"]);
          }
      
          // invoke native method
          CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
      
          methodResult(__result__);
      },
      @"QMapView::convertPoint_toCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* pointValue = (NSValue*) args[@"point"];
          CGPoint point;
          [pointValue getValue:&point];
          // ref arg
          UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::convertPoint(%@, %@)", args[@"refId"], args[@"point"], args[@"view"]);
          }
      
          // invoke native method
          CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
      
          methodResult(__result__);
      },
      @"QMapView::convertRegion_toRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) args[@"region"];
          QCoordinateRegion region;
          [regionValue getValue:&region];
          // ref arg
          UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::convertRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"view"]);
          }
      
          // invoke native method
          CGRect result = [ref convertRegion: region toRectToView: view];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
      
          methodResult(__result__);
      },
      @"QMapView::convertRect_toRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) args[@"rect"];
          CGRect rect;
          [rectValue getValue:&rect];
          // ref arg
          UIView* view = (UIView*) (args[@"view"] == [NSNull null] ? nil : args[@"view"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::convertRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"view"]);
          }
      
          // invoke native method
          QCoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
      
          // result
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
      
          methodResult(__result__);
      },
      @"QMapView::setIndoorEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL indoorEnabled = [args[@"indoorEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setIndoorEnabled(%@)", args[@"refId"], args[@"indoorEnabled"]);
          }
      
          // invoke native method
          [ref setIndoorEnabled : indoorEnabled];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setActiveIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          QIndoorInfo* indoorInfo = (QIndoorInfo*) (args[@"indoorInfo"] == [NSNull null] ? nil : args[@"indoorInfo"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setActiveIndoorInfo(%@)", args[@"refId"], args[@"indoorInfo"]);
          }
      
          // invoke native method
          [ref setActiveIndoorInfo : indoorInfo];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::configureUserLocationPresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          QUserLocationPresentation* presentation = (QUserLocationPresentation*) (args[@"presentation"] == [NSNull null] ? nil : args[@"presentation"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::configureUserLocationPresentation(%@)", args[@"refId"], args[@"presentation"]);
          }
      
          // invoke native method
          [ref configureUserLocationPresentation : presentation];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setUserTrackingMode_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          QUserTrackingMode mode = (QUserTrackingMode) [args[@"mode"] integerValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setUserTrackingMode(%@, %@)", args[@"refId"], args[@"mode"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setUserTrackingMode : mode animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::setUserLocationHidden": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL hidden = [args[@"hidden"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::setUserLocationHidden(%@)", args[@"refId"], args[@"hidden"]);
          }
      
          // invoke native method
          [ref setUserLocationHidden : hidden];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::addAnnotation(%@)", args[@"refId"], args[@"annotation"]);
          }
      
          // invoke native method
          [ref addAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::addAnnotations(%@)", args[@"refId"], args[@"annotations"]);
          }
      
          // invoke native method
          [ref addAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::removeAnnotation(%@)", args[@"refId"], args[@"annotation"]);
          }
      
          // invoke native method
          [ref removeAnnotation : annotation];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSObject*>* annotations = (NSArray<NSObject*>*) args[@"annotations"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::removeAnnotations(%@)", args[@"refId"], args[@"annotations"]);
          }
      
          // invoke native method
          [ref removeAnnotations : annotations];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::viewForAnnotation(%@)", args[@"refId"], args[@"annotation"]);
          }
      
          // invoke native method
          QAnnotationView* result = [ref viewForAnnotation: annotation];
      
          // result
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      @"QMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* identifier = (NSString*) args[@"identifier"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::dequeueReusableAnnotationViewWithIdentifier(%@)", args[@"refId"], args[@"identifier"]);
          }
      
          // invoke native method
          QAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
      
          // result
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      @"QMapView::bringAnnotationToFront": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::bringAnnotationToFront(%@)", args[@"refId"], args[@"annotation"]);
          }
      
          // invoke native method
          [ref bringAnnotationToFront : annotation];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::selectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::selectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
          }
      
          // invoke native method
          [ref selectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::deselectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QAnnotation> annotation = (id<QAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::deselectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
          }
      
          // invoke native method
          [ref deselectAnnotation : annotation animated: animated];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::addOverlay(%@)", args[@"refId"], args[@"overlay"]);
          }
      
          // invoke native method
          [ref addOverlay : overlay];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::addOverlays(%@)", args[@"refId"], args[@"overlays"]);
          }
      
          // invoke native method
          [ref addOverlays : overlays];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::removeOverlay(%@)", args[@"refId"], args[@"overlay"]);
          }
      
          // invoke native method
          [ref removeOverlay : overlay];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<id<QOverlay>>* overlays = (NSArray<id<QOverlay>>*) args[@"overlays"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::removeOverlays(%@)", args[@"refId"], args[@"overlays"]);
          }
      
          // invoke native method
          [ref removeOverlays : overlays];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::viewForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<QOverlay> overlay = (id<QOverlay>) (args[@"overlay"] == [NSNull null] ? nil : args[@"overlay"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::viewForOverlay(%@)", args[@"refId"], args[@"overlay"]);
          }
      
          // invoke native method
          QOverlayView* result = [ref viewForOverlay: overlay];
      
          // result
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      @"QMapView::addCustomLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::addCustomLayer(%@)", args[@"refId"], args[@"layer"]);
          }
      
          // invoke native method
          [ref addCustomLayer : layer];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::removeCustomLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          QCustomLayer* layer = (QCustomLayer*) (args[@"layer"] == [NSNull null] ? nil : args[@"layer"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::removeCustomLayer(%@)", args[@"refId"], args[@"layer"]);
          }
      
          // invoke native method
          [ref removeCustomLayer : layer];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::takeSnapshot": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::takeSnapshot()", args[@"refId"]);
          }
      
          // invoke native method
          UIImage* result = [ref takeSnapshot];
      
          // result
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      @"QMapView::takeSnapshotInRect_completion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) args[@"rect"];
          CGRect rect;
          [rectValue getValue:&rect];
      
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::takeSnapshotInRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"completion"]);
          }
      
          // invoke native method
          [ref takeSnapshotInRect : rect completion: ^(UIImage* resultImage) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#resultImage::Callback@%@", @(ref.hash)]
                          binaryMessenger:[[weakSelf registrar] messenger]
                                    codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              UIImage* argresultImage = resultImage;
      
              dispatch_async(dispatch_get_main_queue(), ^{
                [channel invokeMethod:@"Callback::void|UIImage*#resultImage::void|UIImage*#resultImage" arguments:@{@"resultImage": argresultImage == nil ? [NSNull null] : argresultImage}];
              });
      
          }];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::takeSnapshotInRect_timeout_completion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* rectValue = (NSValue*) args[@"rect"];
          CGRect rect;
          [rectValue getValue:&rect];
          // jsonable arg
          CFTimeInterval timeout = [args[@"timeout"] doubleValue];
      
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::takeSnapshotInRect(%@, %@, %@)", args[@"refId"], args[@"rect"], args[@"timeout"], args[@"completion"]);
          }
      
          // invoke native method
          [ref takeSnapshotInRect : rect timeout: timeout completion: ^(UIImage* resultImage) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:[NSString stringWithFormat:@"void|UIImage*#resultImage::Callback@%@", @(ref.hash)]
                          binaryMessenger:[[weakSelf registrar] messenger]
                                    codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // ref callback arg
              UIImage* argresultImage = resultImage;
      
              dispatch_async(dispatch_get_main_queue(), ^{
                [channel invokeMethod:@"Callback::void|UIImage*#resultImage::void|UIImage*#resultImage" arguments:@{@"resultImage": argresultImage == nil ? [NSNull null] : argresultImage}];
              });
      
          }];
      
          // result
          // 无返回值
          NSString* __result__ = @"success";
      
          methodResult(__result__);
      },
      @"QMapView::getDebugError": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: QMapView@%@::getDebugError()", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref getDebugError];
      
          // result
          // 返回值: jsonable
          id __result__ = result;
      
          methodResult(__result__);
      },
      @"QMapView::get_isHandDrawMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isHandDrawMapEnabled");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.handDrawMapEnabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsTraffic");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsTraffic;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_mapType");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QMapType result = ref.mapType;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsScale");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsScale;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsBuildings");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsBuildings;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_shows3DBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_shows3DBuildings");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.shows3DBuildings;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsPoi");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsPoi;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsCompass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsCompass");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsCompass;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_animationLayer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_animationLayer");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QBasicMapViewLayer* result = ref.animationLayer;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_centerCoordinate");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CLLocationCoordinate2D result = ref.centerCoordinate;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
      
          methodResult(__result__);
      },
      
      @"QMapView::get_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_zoomLevel");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGFloat result = ref.zoomLevel;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_minZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_minZoomLevel");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGFloat result = ref.minZoomLevel;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_maxZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_maxZoomLevel");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGFloat result = ref.maxZoomLevel;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_rotation");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGFloat result = ref.rotation;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_overlooking");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGFloat result = ref.overlooking;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_visibleMapRect");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QMapRect result = ref.visibleMapRect;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QMapRect)];
      
          methodResult(__result__);
      },
      
      @"QMapView::get_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_region");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QCoordinateRegion result = ref.region;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(QCoordinateRegion)];
      
          methodResult(__result__);
      },
      
      @"QMapView::get_isZoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isZoomEnabled");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.zoomEnabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_isScrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isScrollEnabled");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.scrollEnabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_isOverlookingEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isOverlookingEnabled");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.overlookingEnabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_isRotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isRotateEnabled");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.rotateEnabled;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_indoorPicker": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_indoorPicker");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.indoorPicker;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_indoorPickerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_indoorPickerOffset");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CGPoint result = ref.indoorPickerOffset;
      
          // 返回值: 结构体
          NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
      
          methodResult(__result__);
      },
      
      @"QMapView::get_activeBuilding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_activeBuilding");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QIndoorBuilding* result = ref.activeBuilding;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_activeLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_activeLevel");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QIndoorLevel* result = ref.activeLevel;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_showsUserLocation");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.showsUserLocation;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_userLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_userLocation");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QUserLocation* result = ref.userLocation;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_desiredAccuracy");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CLLocationAccuracy result = ref.desiredAccuracy;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_distanceFilter");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CLLocationDistance result = ref.distanceFilter;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_headingFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_headingFilter");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          CLLocationDegrees result = ref.headingFilter;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_allowsBackgroundLocationUpdates");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.allowsBackgroundLocationUpdates;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_pausesLocationUpdatesAutomatically");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.pausesLocationUpdatesAutomatically;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_userTrackingMode");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          QUserTrackingMode result = ref.userTrackingMode;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_isUserLocationVisible": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_isUserLocationVisible");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.userLocationVisible;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::get_annotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_annotations");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          NSArray* result = ref.annotations;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_overlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_overlays");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          NSArray* result = ref.overlays;
      
          // return a ref
          NSObject* __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_userLocationAccessibilityLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_userLocationAccessibilityLabel");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          NSString* result = ref.userLocationAccessibilityLabel;
      
          // 返回值: jsonable
          id __result__ = result;
      
          methodResult(__result__);
      },
      
      @"QMapView::get_annotationAccessibilityFrameClipToBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::get_annotationAccessibilityFrameClipToBounds");
          }
      
          // ref object
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.annotationAccessibilityFrameClipToBounds;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"QMapView::set_handDrawMapEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_handDrawMapEnabled");
          }
      
          // args
          // jsonable arg
          BOOL handDrawMapEnabled = [args[@"handDrawMapEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.handDrawMapEnabled = handDrawMapEnabled;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsTraffic": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsTraffic");
          }
      
          // args
          // jsonable arg
          BOOL showsTraffic = [args[@"showsTraffic"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsTraffic = showsTraffic;
          methodResult(@"success");
      },
      
      @"QMapView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_delegate");
          }
      
          // args
      
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.delegate = weakSelf;
          methodResult(@"success");
      },
      
      @"QMapView::set_mapType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_mapType");
          }
      
          // args
          // enum arg
          QMapType mapType = (QMapType) [args[@"mapType"] integerValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.mapType = mapType;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsScale": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsScale");
          }
      
          // args
          // jsonable arg
          BOOL showsScale = [args[@"showsScale"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsScale = showsScale;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsBuildings");
          }
      
          // args
          // jsonable arg
          BOOL showsBuildings = [args[@"showsBuildings"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsBuildings = showsBuildings;
          methodResult(@"success");
      },
      
      @"QMapView::set_shows3DBuildings": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_shows3DBuildings");
          }
      
          // args
          // jsonable arg
          BOOL shows3DBuildings = [args[@"shows3DBuildings"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.shows3DBuildings = shows3DBuildings;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsPoi");
          }
      
          // args
          // jsonable arg
          BOOL showsPoi = [args[@"showsPoi"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsPoi = showsPoi;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsCompass": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsCompass");
          }
      
          // args
          // jsonable arg
          BOOL showsCompass = [args[@"showsCompass"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsCompass = showsCompass;
          methodResult(@"success");
      },
      
      @"QMapView::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_centerCoordinate");
          }
      
          // args
          // struct arg
          NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
          CLLocationCoordinate2D centerCoordinate;
          [centerCoordinateValue getValue:&centerCoordinate];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.centerCoordinate = centerCoordinate;
          methodResult(@"success");
      },
      
      @"QMapView::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_zoomLevel");
          }
      
          // args
          // jsonable arg
          CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.zoomLevel = zoomLevel;
          methodResult(@"success");
      },
      
      @"QMapView::set_rotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_rotation");
          }
      
          // args
          // jsonable arg
          CGFloat rotation = [args[@"rotation"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.rotation = rotation;
          methodResult(@"success");
      },
      
      @"QMapView::set_overlooking": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_overlooking");
          }
      
          // args
          // jsonable arg
          CGFloat overlooking = [args[@"overlooking"] floatValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.overlooking = overlooking;
          methodResult(@"success");
      },
      
      @"QMapView::set_visibleMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_visibleMapRect");
          }
      
          // args
          // struct arg
          NSValue* visibleMapRectValue = (NSValue*) args[@"visibleMapRect"];
          QMapRect visibleMapRect;
          [visibleMapRectValue getValue:&visibleMapRect];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.visibleMapRect = visibleMapRect;
          methodResult(@"success");
      },
      
      @"QMapView::set_region": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_region");
          }
      
          // args
          // struct arg
          NSValue* regionValue = (NSValue*) args[@"region"];
          QCoordinateRegion region;
          [regionValue getValue:&region];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.region = region;
          methodResult(@"success");
      },
      
      @"QMapView::set_zoomEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_zoomEnabled");
          }
      
          // args
          // jsonable arg
          BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.zoomEnabled = zoomEnabled;
          methodResult(@"success");
      },
      
      @"QMapView::set_scrollEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_scrollEnabled");
          }
      
          // args
          // jsonable arg
          BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.scrollEnabled = scrollEnabled;
          methodResult(@"success");
      },
      
      @"QMapView::set_overlookingEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_overlookingEnabled");
          }
      
          // args
          // jsonable arg
          BOOL overlookingEnabled = [args[@"overlookingEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.overlookingEnabled = overlookingEnabled;
          methodResult(@"success");
      },
      
      @"QMapView::set_rotateEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_rotateEnabled");
          }
      
          // args
          // jsonable arg
          BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.rotateEnabled = rotateEnabled;
          methodResult(@"success");
      },
      
      @"QMapView::set_indoorPicker": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_indoorPicker");
          }
      
          // args
          // jsonable arg
          BOOL indoorPicker = [args[@"indoorPicker"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.indoorPicker = indoorPicker;
          methodResult(@"success");
      },
      
      @"QMapView::set_indoorPickerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_indoorPickerOffset");
          }
      
          // args
          // struct arg
          NSValue* indoorPickerOffsetValue = (NSValue*) args[@"indoorPickerOffset"];
          CGPoint indoorPickerOffset;
          [indoorPickerOffsetValue getValue:&indoorPickerOffset];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.indoorPickerOffset = indoorPickerOffset;
          methodResult(@"success");
      },
      
      @"QMapView::set_activeLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_activeLevel");
          }
      
          // args
          // ref arg
          QIndoorLevel* activeLevel = (QIndoorLevel*) (args[@"activeLevel"] == [NSNull null] ? nil : args[@"activeLevel"]);
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.activeLevel = activeLevel;
          methodResult(@"success");
      },
      
      @"QMapView::set_showsUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_showsUserLocation");
          }
      
          // args
          // jsonable arg
          BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.showsUserLocation = showsUserLocation;
          methodResult(@"success");
      },
      
      @"QMapView::set_desiredAccuracy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_desiredAccuracy");
          }
      
          // args
          // jsonable arg
          CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.desiredAccuracy = desiredAccuracy;
          methodResult(@"success");
      },
      
      @"QMapView::set_distanceFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_distanceFilter");
          }
      
          // args
          // jsonable arg
          CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.distanceFilter = distanceFilter;
          methodResult(@"success");
      },
      
      @"QMapView::set_headingFilter": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_headingFilter");
          }
      
          // args
          // jsonable arg
          CLLocationDegrees headingFilter = [args[@"headingFilter"] doubleValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.headingFilter = headingFilter;
          methodResult(@"success");
      },
      
      @"QMapView::set_allowsBackgroundLocationUpdates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_allowsBackgroundLocationUpdates");
          }
      
          // args
          // jsonable arg
          BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
          methodResult(@"success");
      },
      
      @"QMapView::set_pausesLocationUpdatesAutomatically": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_pausesLocationUpdatesAutomatically");
          }
      
          // args
          // jsonable arg
          BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
          methodResult(@"success");
      },
      
      @"QMapView::set_userTrackingMode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_userTrackingMode");
          }
      
          // args
          // enum arg
          QUserTrackingMode userTrackingMode = (QUserTrackingMode) [args[@"userTrackingMode"] integerValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.userTrackingMode = userTrackingMode;
          methodResult(@"success");
      },
      
      @"QMapView::set_userLocationAccessibilityLabel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_userLocationAccessibilityLabel");
          }
      
          // args
          // jsonable arg
          NSString* userLocationAccessibilityLabel = (NSString*) args[@"userLocationAccessibilityLabel"];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.userLocationAccessibilityLabel = userLocationAccessibilityLabel;
          methodResult(@"success");
      },
      
      @"QMapView::set_annotationAccessibilityFrameClipToBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"QMapView::set_annotationAccessibilityFrameClipToBounds");
          }
      
          // args
          // jsonable arg
          BOOL annotationAccessibilityFrameClipToBounds = [args[@"annotationAccessibilityFrameClipToBounds"] boolValue];
      
          // ref
          QMapView* ref = (QMapView*) args[@"__this__"];
      
          ref.annotationAccessibilityFrameClipToBounds = annotationAccessibilityFrameClipToBounds;
          methodResult(@"success");
      },
      
  };
  //endregion
  return _view;
}

//region delegate
- (void)mapView : (QMapView*)mapView didChangeActiveBuilding: (QIndoorBuilding*)building
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewIndoorDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewIndoorDelegate::mapView_didChangeActiveBuilding");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QIndoorBuilding* argbuilding = building;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewIndoorDelegate::mapView_didChangeActiveBuilding" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"building": argbuilding == nil ? [NSNull null] : argbuilding}];
  });
  
}

- (void)mapView : (QMapView*)mapView didChangeActiveLevel: (QIndoorLevel*)level
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewIndoorDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewIndoorDelegate::mapView_didChangeActiveLevel");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QIndoorLevel* arglevel = level;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewIndoorDelegate::mapView_didChangeActiveLevel" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"level": arglevel == nil ? [NSNull null] : arglevel}];
  });
  
}

- (void)mapViewInitComplete : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewInitComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewInitComplete" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidFailLoadingMap : (QMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewDidFailLoadingMap_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewDidFailLoadingMap_withError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapView : (QMapView*)mapView regionWillChangeAnimated: (BOOL)animated gesture: (BOOL)bGesture
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_regionWillChangeAnimated_gesture");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argbGesture = @(bGesture);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_regionWillChangeAnimated_gesture" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"bGesture": argbGesture == nil ? [NSNull null] : argbGesture}];
  });
  
}

- (void)mapViewRegionChange : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewRegionChange");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewRegionChange" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (QMapView*)mapView regionDidChangeAnimated: (BOOL)animated gesture: (BOOL)bGesture
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_regionDidChangeAnimated_gesture");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argbGesture = @(bGesture);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_regionDidChangeAnimated_gesture" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"bGesture": argbGesture == nil ? [NSNull null] : argbGesture}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapAtCoordinate" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapPoi: (QPoiInfo*)poi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QPoiInfo* argpoi = poi;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapPoi" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"poi": argpoi == nil ? [NSNull null] : argpoi}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapOverlay: (id<QOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QOverlay> argoverlay = overlay;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapOverlay" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlay": argoverlay == nil ? [NSNull null] : argoverlay}];
  });
  
}

- (QAnnotationView*)mapView : (QMapView*)mapView viewForAnnotation: (id<QAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QAnnotation> argannotation = annotation;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_viewForAnnotation"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"annotation": argannotation == nil ? [NSNull null] : argannotation}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  UIImage* icon = (UIImage *) objc_getAssociatedObject(annotation, (const void *) 1);
  NSNumber* draggable = objc_getAssociatedObject(annotation, (const void *) 2);
  NSNumber* rotateAngle = objc_getAssociatedObject(annotation, (const void *) 3);
  NSNumber* infoWindowEnabled = objc_getAssociatedObject(annotation, (const void *) 4);
  NSNumber* anchorU = objc_getAssociatedObject(annotation, (const void *) 5);
  NSNumber* anchorV = objc_getAssociatedObject(annotation, (const void *) 6);
  // 7上绑的是自定义数据, 这里不需要
  // 8和9是原先的width和height, 升级foundation之后不再需要
  NSNumber* visible = objc_getAssociatedObject(annotation, (const void *) 10);

  if ([annotation isKindOfClass:[QPointAnnotation class]]) {
      QAnnotationView* annotationView;
      // 如果没有指定icon就使用m自带的annotation
      if (icon == nil) {
          annotationView = (QPinAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:@"pinAnnotationReuseIndentifier"];
          if (annotationView == nil) {
              annotationView = [[QPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"pinAnnotationReuseIndentifier"];
          }
      } else {
          annotationView = (QAnnotationView*)[mapView dequeueReusableAnnotationViewWithIdentifier:@"customAnnotationReuseIndentifier"];
          if (annotationView == nil) {
              annotationView = [[QAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:@"customAnnotationReuseIndentifier"];
          }
      }
      if (icon != nil && (NSNull*) icon != [NSNull null]) annotationView.image = icon;
      if (draggable != nil) annotationView.draggable = [draggable boolValue];
      if (infoWindowEnabled != nil) annotationView.canShowCallout = [infoWindowEnabled boolValue];
      // 旋转角度
      if (rotateAngle != nil) {
          annotationView.transform = CGAffineTransformRotate(CGAffineTransformIdentity, -[rotateAngle doubleValue] / 180.0 * M_PI);
      }
      // 锚点
      if (anchorU != nil && anchorV != nil
          && (NSNull*) anchorU != [NSNull null] && (NSNull*) anchorV != [NSNull null]) {
          annotationView.layer.anchorPoint = CGPointMake([anchorU doubleValue], [anchorV doubleValue]);
      }
      // 是否可见
      if (visible != nil && (NSNull*) visible != [NSNull null]) {
          annotationView.hidden = ![visible boolValue];
      }
      return annotationView;
  }
  ////////////////////////////////////////////////////////////////////////////////
  
  return (QAnnotationView*) nil;
}

- (UIView*)mapView : (QMapView*)mapView customCalloutForAnnotationView: (QAnnotationView*)annotationView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_customCalloutForAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argannotationView = annotationView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_customCalloutForAnnotationView"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"annotationView": argannotationView == nil ? [NSNull null] : argannotationView}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (UIView*) nil;
}

- (void)mapView : (QMapView*)mapView didAddAnnotationViews: (NSArray<QAnnotationView*>*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSArray<QAnnotationView*>* argviews = views;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"views": argviews == nil ? [NSNull null] : argviews}];
  });
  
}

- (void)mapView : (QMapView*)mapView didSelectAnnotationView: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (QMapView*)mapView didDeselectAnnotationView: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationView: (QAnnotationView*)view didChangeDragState: (QAnnotationViewDragState)newState fromOldState: (QAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;
  // enum callback arg
  NSNumber* argnewState = @((NSInteger) newState);
  // enum callback arg
  NSNumber* argoldState = @((NSInteger) oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"newState": argnewState == nil ? [NSNull null] : argnewState, @"oldState": argoldState == nil ? [NSNull null] : argoldState}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationView: (QAnnotationView*)view calloutAccessoryControlTapped: (UIControl*)control
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;
  // ref callback arg
  UIControl* argcontrol = control;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"control": argcontrol == nil ? [NSNull null] : argcontrol}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationViewCalloutTapped: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationViewCalloutTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationViewCalloutTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (QOverlayView*)mapView : (QMapView*)mapView viewForOverlay: (id<QOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_viewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QOverlay> argoverlay = overlay;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_viewForOverlay"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlay": argoverlay == nil ? [NSNull null] : argoverlay}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  // 线
  if ([overlay isKindOfClass:[QPolyline class]])
  {
      NSNumber* width = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 1);
      NSNumber* strokeColor = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 2);
//      UIImage* texture = (UIImage *) objc_getAssociatedObject(overlay, (const void *) 3);
//      NSNumber* lineCapType = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 4);
//      NSNumber* lineJoinType = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 5);
//      NSNumber* dashType = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 6);

      QPolylineView *polylineRenderer = [[QPolylineView alloc] initWithPolyline:overlay];

      polylineRenderer.lineWidth = [width doubleValue];
      // 描边颜色
      NSUInteger rgba = [strokeColor unsignedIntegerValue];
      float components[4];
      for (int i = 3; i >= 0; i--) {
          components[i] = (rgba & 0xff) / 255.0;
          rgba >>= 8;
      }
      polylineRenderer.strokeColor  = [UIColor colorWithRed:components[1] green:components[2] blue:components[3] alpha:components[0]];

      // 这次调用完成后 清空栈
      [STACK removeAllObjects];
      return polylineRenderer;
  }
  // 多边形
  if ([overlay isKindOfClass:[QPolygon class]])
  {
      NSNumber* width = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 1);
      NSNumber* strokeColor = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 2);
      NSNumber* fillColor = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 3);

      QPolygonView *polygonRenderer = [[QPolygonView alloc] initWithPolygon:overlay];

      if (width != nil) polygonRenderer.lineWidth = [width doubleValue];
      // 描边颜色
      NSUInteger rgba = [strokeColor unsignedIntegerValue];
      float components[4];
      for (int i = 3; i >= 0; i--) {
          components[i] = (rgba & 0xff) / 255.0;
          rgba >>= 8;
      }
      polygonRenderer.strokeColor  = [UIColor colorWithRed:components[1] green:components[2] blue:components[3] alpha:components[0]];

      // 填充颜色
      rgba = [fillColor unsignedIntegerValue];
      for (int i = 3; i >= 0; i--) {
          components[i] = (rgba & 0xff) / 255.0;
          rgba >>= 8;
      }
      polygonRenderer.fillColor  = [UIColor colorWithRed:components[1] green:components[2] blue:components[3] alpha:components[0]];

      // 这次调用完成后 清空栈
      [STACK removeAllObjects];
      return polygonRenderer;
  }

  // 圆
  if ([overlay isKindOfClass:[QCircle class]])
  {
      NSNumber* width = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 1);
      NSNumber* strokeColor = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 2);
      NSNumber* fillColor = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 3);

      QCircleView *circleRenderer = [[QCircleView alloc] initWithCircle:overlay];

      // 宽度
      if (width != nil) circleRenderer.lineWidth = [width doubleValue];

      // 描边颜色
      NSUInteger rgba = [strokeColor unsignedIntegerValue];
      float components[4];
      for (int i = 3; i >= 0; i--) {
          components[i] = (rgba & 0xff) / 255.0;
          rgba >>= 8;
      }
      circleRenderer.strokeColor  = [UIColor colorWithRed:components[1] green:components[2] blue:components[3] alpha:components[0]];

      // 填充颜色
      rgba = [fillColor unsignedIntegerValue];
      for (int i = 3; i >= 0; i--) {
          components[i] = (rgba & 0xff) / 255.0;
          rgba >>= 8;
      }
      circleRenderer.fillColor  = [UIColor colorWithRed:components[1] green:components[2] blue:components[3] alpha:components[0]];

      // 这次调用完成后 清空栈
      [STACK removeAllObjects];
      return circleRenderer;
  }

  // 瓦片图
  if ([overlay isKindOfClass:[QTileOverlay class]])
  {
      QTileOverlayView *tileOverlayRenderer = [[QTileOverlayView alloc] initWithTileOverlay:overlay];
      return tileOverlayRenderer;
  }

  // 海量点
//  if ([overlay isKindOfClass:[QMultiPoint class]])
//  {
//      UIImage* icon = (UIImage *) objc_getAssociatedObject(overlay, (const void *) 1);
//      NSNumber* width = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 2);
//      NSNumber* height = (NSNumber *) objc_getAssociatedObject(overlay, (const void *) 3);
//
//      QMultiPointView *multiPointOverlayRenderer = [[QMultiPointView alloc] init];
//      if (icon != nil) {
//          multiPointOverlayRenderer.icon = icon;
//      }
//      if (width != nil && height != nil) {
//          multiPointOverlayRenderer.pointSize = CGSizeMake([width doubleValue], [height doubleValue]);
//      }
//      return multiPointOverlayRenderer;
//  }

  // 图片
//  if ([overlay isKindOfClass:[QGroundOverlay class]])
//  {
//      MAGroundOverlayRenderer *groundPverlayRenderer = [[MAGroundOverlayRenderer alloc] initWithGroundOverlay: overlay];
//      return groundPverlayRenderer;
//  }
  ////////////////////////////////////////////////////////////////////////////////
  
  return (QOverlayView*) nil;
}

- (void)mapView : (QMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSArray* argoverlayViews = overlayViews;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didAddOverlayViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayViews": argoverlayViews == nil ? [NSNull null] : argoverlayViews}];
  });
  
}

- (void)mapViewWillStartLocatingUser : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewWillStartLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewWillStartLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidStopLocatingUser : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewDidStopLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewDidStopLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (QMapView*)mapView didUpdateUserLocation: (QUserLocation*)userLocation fromHeading: (BOOL)fromHeading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didUpdateUserLocation_fromHeading");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QUserLocation* arguserLocation = userLocation;
  // primitive callback arg
  NSNumber* argfromHeading = @(fromHeading);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didUpdateUserLocation_fromHeading" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"userLocation": arguserLocation == nil ? [NSNull null] : arguserLocation, @"fromHeading": argfromHeading == nil ? [NSNull null] : argfromHeading}];
  });
  
}

- (void)mapView : (QMapView*)mapView didFailToLocateUserWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didFailToLocateUserWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didFailToLocateUserWithError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapView : (QMapView*)mapView didChangeUserTrackingMode: (QUserTrackingMode)mode animated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didChangeUserTrackingMode_animated");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didChangeUserTrackingMode_animated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"mode": argmode == nil ? [NSNull null] : argmode, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)searchWithSearchOption : (QMSSearchOption*)searchOption didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithSearchOption_didFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSSearchOption* argsearchOption = searchOption;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithSearchOption_didFailWithError" arguments:@{@"searchOption": argsearchOption == nil ? [NSNull null] : argsearchOption, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)searchWithWalkingRouteSearchOption : (QMSWalkingRouteSearchOption*)walkingRouteSearchOption didRecevieResult: (QMSWalkingRouteSearchResult*)walkingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSWalkingRouteSearchOption* argwalkingRouteSearchOption = walkingRouteSearchOption;
  // ref callback arg
  QMSWalkingRouteSearchResult* argwalkingRouteSearchResult = walkingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult" arguments:@{@"walkingRouteSearchOption": argwalkingRouteSearchOption == nil ? [NSNull null] : argwalkingRouteSearchOption, @"walkingRouteSearchResult": argwalkingRouteSearchResult == nil ? [NSNull null] : argwalkingRouteSearchResult}];
  });
  
}

- (void)searchWithPoiSearchOption : (QMSPoiSearchOption*)poiSearchOption didReceiveResult: (QMSPoiSearchResult*)poiSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSPoiSearchOption* argpoiSearchOption = poiSearchOption;
  // ref callback arg
  QMSPoiSearchResult* argpoiSearchResult = poiSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult" arguments:@{@"poiSearchOption": argpoiSearchOption == nil ? [NSNull null] : argpoiSearchOption, @"poiSearchResult": argpoiSearchResult == nil ? [NSNull null] : argpoiSearchResult}];
  });
  
}

- (void)searchWithSuggestionSearchOption : (QMSSuggestionSearchOption*)suggestionSearchOption didReceiveResult: (QMSSuggestionResult*)suggestionSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSSuggestionSearchOption* argsuggestionSearchOption = suggestionSearchOption;
  // ref callback arg
  QMSSuggestionResult* argsuggestionSearchResult = suggestionSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult" arguments:@{@"suggestionSearchOption": argsuggestionSearchOption == nil ? [NSNull null] : argsuggestionSearchOption, @"suggestionSearchResult": argsuggestionSearchResult == nil ? [NSNull null] : argsuggestionSearchResult}];
  });
  
}

- (void)searchWithReverseGeoCodeSearchOption : (QMSReverseGeoCodeSearchOption*)reverseGeoCodeSearchOption didReceiveResult: (QMSReverseGeoCodeSearchResult*)reverseGeoCodeSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSReverseGeoCodeSearchOption* argreverseGeoCodeSearchOption = reverseGeoCodeSearchOption;
  // ref callback arg
  QMSReverseGeoCodeSearchResult* argreverseGeoCodeSearchResult = reverseGeoCodeSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult" arguments:@{@"reverseGeoCodeSearchOption": argreverseGeoCodeSearchOption == nil ? [NSNull null] : argreverseGeoCodeSearchOption, @"reverseGeoCodeSearchResult": argreverseGeoCodeSearchResult == nil ? [NSNull null] : argreverseGeoCodeSearchResult}];
  });
  
}

- (void)searchWithGeoCodeSearchOption : (QMSGeoCodeSearchOption*)geoCodeSearchOption didReceiveResult: (QMSGeoCodeSearchResult*)geoCodeSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSGeoCodeSearchOption* arggeoCodeSearchOption = geoCodeSearchOption;
  // ref callback arg
  QMSGeoCodeSearchResult* arggeoCodeSearchResult = geoCodeSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult" arguments:@{@"geoCodeSearchOption": arggeoCodeSearchOption == nil ? [NSNull null] : arggeoCodeSearchOption, @"geoCodeSearchResult": arggeoCodeSearchResult == nil ? [NSNull null] : arggeoCodeSearchResult}];
  });
  
}

- (void)searchWithDrivingRouteSearchOption : (QMSDrivingRouteSearchOption*)drivingRouteSearchOption didRecevieResult: (QMSDrivingRouteSearchResult*)drivingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSDrivingRouteSearchOption* argdrivingRouteSearchOption = drivingRouteSearchOption;
  // ref callback arg
  QMSDrivingRouteSearchResult* argdrivingRouteSearchResult = drivingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult" arguments:@{@"drivingRouteSearchOption": argdrivingRouteSearchOption == nil ? [NSNull null] : argdrivingRouteSearchOption, @"drivingRouteSearchResult": argdrivingRouteSearchResult == nil ? [NSNull null] : argdrivingRouteSearchResult}];
  });
  
}

- (void)searchWithBusingRouteSearchOption : (QMSBusingRouteSearchOption*)busingRouteSearchOption didRecevieResult: (QMSBusingRouteSearchResult*)busingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSBusingRouteSearchOption* argbusingRouteSearchOption = busingRouteSearchOption;
  // ref callback arg
  QMSBusingRouteSearchResult* argbusingRouteSearchResult = busingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult" arguments:@{@"busingRouteSearchOption": argbusingRouteSearchOption == nil ? [NSNull null] : argbusingRouteSearchOption, @"busingRouteSearchResult": argbusingRouteSearchResult == nil ? [NSNull null] : argbusingRouteSearchResult}];
  });
  
}

- (void)searchWithDistrictSearchOption : (QMSDistrictBaseSearchOption*)districtSearchOption didRecevieResult: (QMSDistrictSearchResult*)districtSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"QMSSearchDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSDistrictBaseSearchOption* argdistrictSearchOption = districtSearchOption;
  // ref callback arg
  QMSDistrictSearchResult* argdistrictSearchResult = districtSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult" arguments:@{@"districtSearchOption": argdistrictSearchOption == nil ? [NSNull null] : argdistrictSearchOption, @"districtSearchResult": argdistrictSearchResult == nil ? [NSNull null] : argdistrictSearchResult}];
  });
  
}

//endregion

@end
