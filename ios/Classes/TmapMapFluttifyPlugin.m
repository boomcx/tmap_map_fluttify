//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "TmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "SubHandler/SubHandler0.h"
#import "SubHandler/SubHandler1.h"
#import "SubHandler/SubHandler2.h"
#import "SubHandler/SubHandler3.h"
#import "SubHandler/SubHandler4.h"
#import "SubHandler/SubHandler5.h"
#import "SubHandler/SubHandler6.h"
#import "SubHandler/SubHandler7.h"
#import "SubHandler/SubHandler8.h"
#import "SubHandler/SubHandler9.h"
#import "SubHandler/Custom/SubHandlerCustom.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation TmapMapFluttifyPlugin {
  NSMutableDictionary<NSString*, Handler>* _handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{}.mutableCopy;

    [_handlerMap addEntriesFromDictionary: [self getSubHandler0]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler1]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler2]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler3]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler4]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler5]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler6]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler7]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler8]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandler9]];
    [_handlerMap addEntriesFromDictionary: [self getSubHandlerCustom]];
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/tmap_map_fluttify"
            binaryMessenger:[registrar messenger]
                      codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [registrar addMethodCallDelegate:[[TmapMapFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  [registrar registerViewFactory: [[QPinAnnotationViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/QPinAnnotationView"];
  [registrar registerViewFactory: [[QAnnotationViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/QAnnotationView"];
  [registrar registerViewFactory: [[QMapViewFactory alloc] initWithRegistrar:registrar] withId: @"me.yohom/QMapView"];
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, [methodCall arguments], methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)mapView : (QMapView*)mapView didChangeActiveBuilding: (QIndoorBuilding*)building
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewIndoorDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewIndoorDelegate::mapView_didChangeActiveBuilding");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QIndoorBuilding* argbuilding = building;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewIndoorDelegate::mapView_didChangeActiveBuilding" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"building": argbuilding == nil ? [NSNull null] : argbuilding}];
  });
  
}

- (void)mapView : (QMapView*)mapView didChangeActiveLevel: (QIndoorLevel*)level
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewIndoorDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewIndoorDelegate::mapView_didChangeActiveLevel");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QIndoorLevel* arglevel = level;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewIndoorDelegate::mapView_didChangeActiveLevel" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"level": arglevel == nil ? [NSNull null] : arglevel}];
  });
  
}

- (void)mapViewInitComplete : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewInitComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewInitComplete" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidFailLoadingMap : (QMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewDidFailLoadingMap_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewDidFailLoadingMap_withError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapView : (QMapView*)mapView regionWillChangeAnimated: (BOOL)animated gesture: (BOOL)bGesture
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_regionWillChangeAnimated_gesture");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argbGesture = @(bGesture);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_regionWillChangeAnimated_gesture" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"bGesture": argbGesture == nil ? [NSNull null] : argbGesture}];
  });
  
}

- (void)mapViewRegionChange : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewRegionChange");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewRegionChange" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (QMapView*)mapView regionDidChangeAnimated: (BOOL)animated gesture: (BOOL)bGesture
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_regionDidChangeAnimated_gesture");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argbGesture = @(bGesture);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_regionDidChangeAnimated_gesture" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"bGesture": argbGesture == nil ? [NSNull null] : argbGesture}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapAtCoordinate" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapPoi: (QPoiInfo*)poi
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapPoi");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QPoiInfo* argpoi = poi;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapPoi" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"poi": argpoi == nil ? [NSNull null] : argpoi}];
  });
  
}

- (void)mapView : (QMapView*)mapView didTapOverlay: (id<QOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didTapOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QOverlay> argoverlay = overlay;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didTapOverlay" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlay": argoverlay == nil ? [NSNull null] : argoverlay}];
  });
  
}

- (QAnnotationView*)mapView : (QMapView*)mapView viewForAnnotation: (id<QAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QAnnotation> argannotation = annotation;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_viewForAnnotation"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"annotation": argannotation == nil ? [NSNull null] : argannotation}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (QAnnotationView*) nil;
}

- (UIView*)mapView : (QMapView*)mapView customCalloutForAnnotationView: (QAnnotationView*)annotationView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_customCalloutForAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argannotationView = annotationView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_customCalloutForAnnotationView"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"annotationView": argannotationView == nil ? [NSNull null] : argannotationView}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (UIView*) nil;
}

- (void)mapView : (QMapView*)mapView didAddAnnotationViews: (NSArray<QAnnotationView*>*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSArray<QAnnotationView*>* argviews = views;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"views": argviews == nil ? [NSNull null] : argviews}];
  });
  
}

- (void)mapView : (QMapView*)mapView didSelectAnnotationView: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (QMapView*)mapView didDeselectAnnotationView: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationView: (QAnnotationView*)view didChangeDragState: (QAnnotationViewDragState)newState fromOldState: (QAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;
  // enum callback arg
  NSNumber* argnewState = @((NSInteger) newState);
  // enum callback arg
  NSNumber* argoldState = @((NSInteger) oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"newState": argnewState == nil ? [NSNull null] : argnewState, @"oldState": argoldState == nil ? [NSNull null] : argoldState}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationView: (QAnnotationView*)view calloutAccessoryControlTapped: (UIControl*)control
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;
  // ref callback arg
  UIControl* argcontrol = control;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"control": argcontrol == nil ? [NSNull null] : argcontrol}];
  });
  
}

- (void)mapView : (QMapView*)mapView annotationViewCalloutTapped: (QAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_annotationViewCalloutTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_annotationViewCalloutTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (QOverlayView*)mapView : (QMapView*)mapView viewForOverlay: (id<QOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_viewForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  id<QOverlay> argoverlay = overlay;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_viewForOverlay"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlay": argoverlay == nil ? [NSNull null] : argoverlay}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (QOverlayView*) nil;
}

- (void)mapView : (QMapView*)mapView didAddOverlayViews: (NSArray*)overlayViews
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didAddOverlayViews");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSArray* argoverlayViews = overlayViews;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didAddOverlayViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayViews": argoverlayViews == nil ? [NSNull null] : argoverlayViews}];
  });
  
}

- (void)mapViewWillStartLocatingUser : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewWillStartLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewWillStartLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidStopLocatingUser : (QMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapViewDidStopLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapViewDidStopLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (QMapView*)mapView didUpdateUserLocation: (QUserLocation*)userLocation fromHeading: (BOOL)fromHeading
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didUpdateUserLocation_fromHeading");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  QUserLocation* arguserLocation = userLocation;
  // primitive callback arg
  NSNumber* argfromHeading = @(fromHeading);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didUpdateUserLocation_fromHeading" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"userLocation": arguserLocation == nil ? [NSNull null] : arguserLocation, @"fromHeading": argfromHeading == nil ? [NSNull null] : argfromHeading}];
  });
  
}

- (void)mapView : (QMapView*)mapView didFailToLocateUserWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didFailToLocateUserWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didFailToLocateUserWithError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapView : (QMapView*)mapView didChangeUserTrackingMode: (QUserTrackingMode)mode animated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMapViewDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMapViewDelegate::mapView_didChangeUserTrackingMode_animated");
  }

  // convert to jsonable arg
  // ref callback arg
  QMapView* argmapView = mapView;
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMapViewDelegate::mapView_didChangeUserTrackingMode_animated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"mode": argmode == nil ? [NSNull null] : argmode, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)searchWithSearchOption : (QMSSearchOption*)searchOption didFailWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithSearchOption_didFailWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSSearchOption* argsearchOption = searchOption;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithSearchOption_didFailWithError" arguments:@{@"searchOption": argsearchOption == nil ? [NSNull null] : argsearchOption, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)searchWithWalkingRouteSearchOption : (QMSWalkingRouteSearchOption*)walkingRouteSearchOption didRecevieResult: (QMSWalkingRouteSearchResult*)walkingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSWalkingRouteSearchOption* argwalkingRouteSearchOption = walkingRouteSearchOption;
  // ref callback arg
  QMSWalkingRouteSearchResult* argwalkingRouteSearchResult = walkingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult" arguments:@{@"walkingRouteSearchOption": argwalkingRouteSearchOption == nil ? [NSNull null] : argwalkingRouteSearchOption, @"walkingRouteSearchResult": argwalkingRouteSearchResult == nil ? [NSNull null] : argwalkingRouteSearchResult}];
  });
  
}

- (void)searchWithPoiSearchOption : (QMSPoiSearchOption*)poiSearchOption didReceiveResult: (QMSPoiSearchResult*)poiSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSPoiSearchOption* argpoiSearchOption = poiSearchOption;
  // ref callback arg
  QMSPoiSearchResult* argpoiSearchResult = poiSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult" arguments:@{@"poiSearchOption": argpoiSearchOption == nil ? [NSNull null] : argpoiSearchOption, @"poiSearchResult": argpoiSearchResult == nil ? [NSNull null] : argpoiSearchResult}];
  });
  
}

- (void)searchWithSuggestionSearchOption : (QMSSuggestionSearchOption*)suggestionSearchOption didReceiveResult: (QMSSuggestionResult*)suggestionSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSSuggestionSearchOption* argsuggestionSearchOption = suggestionSearchOption;
  // ref callback arg
  QMSSuggestionResult* argsuggestionSearchResult = suggestionSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult" arguments:@{@"suggestionSearchOption": argsuggestionSearchOption == nil ? [NSNull null] : argsuggestionSearchOption, @"suggestionSearchResult": argsuggestionSearchResult == nil ? [NSNull null] : argsuggestionSearchResult}];
  });
  
}

- (void)searchWithReverseGeoCodeSearchOption : (QMSReverseGeoCodeSearchOption*)reverseGeoCodeSearchOption didReceiveResult: (QMSReverseGeoCodeSearchResult*)reverseGeoCodeSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSReverseGeoCodeSearchOption* argreverseGeoCodeSearchOption = reverseGeoCodeSearchOption;
  // ref callback arg
  QMSReverseGeoCodeSearchResult* argreverseGeoCodeSearchResult = reverseGeoCodeSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult" arguments:@{@"reverseGeoCodeSearchOption": argreverseGeoCodeSearchOption == nil ? [NSNull null] : argreverseGeoCodeSearchOption, @"reverseGeoCodeSearchResult": argreverseGeoCodeSearchResult == nil ? [NSNull null] : argreverseGeoCodeSearchResult}];
  });
  
}

- (void)searchWithGeoCodeSearchOption : (QMSGeoCodeSearchOption*)geoCodeSearchOption didReceiveResult: (QMSGeoCodeSearchResult*)geoCodeSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSGeoCodeSearchOption* arggeoCodeSearchOption = geoCodeSearchOption;
  // ref callback arg
  QMSGeoCodeSearchResult* arggeoCodeSearchResult = geoCodeSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult" arguments:@{@"geoCodeSearchOption": arggeoCodeSearchOption == nil ? [NSNull null] : arggeoCodeSearchOption, @"geoCodeSearchResult": arggeoCodeSearchResult == nil ? [NSNull null] : arggeoCodeSearchResult}];
  });
  
}

- (void)searchWithDrivingRouteSearchOption : (QMSDrivingRouteSearchOption*)drivingRouteSearchOption didRecevieResult: (QMSDrivingRouteSearchResult*)drivingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSDrivingRouteSearchOption* argdrivingRouteSearchOption = drivingRouteSearchOption;
  // ref callback arg
  QMSDrivingRouteSearchResult* argdrivingRouteSearchResult = drivingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult" arguments:@{@"drivingRouteSearchOption": argdrivingRouteSearchOption == nil ? [NSNull null] : argdrivingRouteSearchOption, @"drivingRouteSearchResult": argdrivingRouteSearchResult == nil ? [NSNull null] : argdrivingRouteSearchResult}];
  });
  
}

- (void)searchWithBusingRouteSearchOption : (QMSBusingRouteSearchOption*)busingRouteSearchOption didRecevieResult: (QMSBusingRouteSearchResult*)busingRouteSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSBusingRouteSearchOption* argbusingRouteSearchOption = busingRouteSearchOption;
  // ref callback arg
  QMSBusingRouteSearchResult* argbusingRouteSearchResult = busingRouteSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult" arguments:@{@"busingRouteSearchOption": argbusingRouteSearchOption == nil ? [NSNull null] : argbusingRouteSearchOption, @"busingRouteSearchResult": argbusingRouteSearchResult == nil ? [NSNull null] : argbusingRouteSearchResult}];
  });
  
}

- (void)searchWithDistrictSearchOption : (QMSDistrictBaseSearchOption*)districtSearchOption didRecevieResult: (QMSDistrictSearchResult*)districtSearchResult
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"QMSSearchDelegate::Callback"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult");
  }

  // convert to jsonable arg
  // ref callback arg
  QMSDistrictBaseSearchOption* argdistrictSearchOption = districtSearchOption;
  // ref callback arg
  QMSDistrictSearchResult* argdistrictSearchResult = districtSearchResult;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult" arguments:@{@"districtSearchOption": argdistrictSearchOption == nil ? [NSNull null] : argdistrictSearchOption, @"districtSearchResult": argdistrictSearchResult == nil ? [NSNull null] : argdistrictSearchResult}];
  });
  
}


@end