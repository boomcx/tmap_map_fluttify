//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.tmap_map_fluttify;

import android.app.Activity;
import android.content.Context;
import android.view.View;

import com.tencent.tencentmap.mapsdk.maps.CameraUpdateFactory;
import com.tencent.tencentmap.mapsdk.maps.TencentMap;
import com.tencent.tencentmap.mapsdk.maps.UiSettings;
import com.tencent.tencentmap.mapsdk.maps.model.CameraPosition;
import com.tencent.tencentmap.mapsdk.maps.model.LatLng;

import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.StandardMessageCodec;
import io.flutter.plugin.common.StandardMethodCodec;
import io.flutter.plugin.platform.PlatformView;
import io.flutter.plugin.platform.PlatformViewFactory;
import me.yohom.foundation_fluttify.core.FluttifyMessageCodec;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
class TextureMapViewFactory extends PlatformViewFactory {

    TextureMapViewFactory(BinaryMessenger messenger, Activity activity) {
        super(StandardMessageCodec.INSTANCE);

        this.messenger = messenger;
        this.activity = activity;

        new MethodChannel(messenger, "me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_TextureMapView", new StandardMethodCodec(new FluttifyMessageCodec())).setMethodCallHandler((methodCall, methodResult) -> {
            Map<String, Object> args = (Map<String, Object>) methodCall.arguments;
            TmapMapFluttifyPlugin.Handler handler = handlerMap.get(methodCall.method);
            if (handler != null) {
                try {
                    handler.call(args, methodResult);
                } catch (Exception e) {
                    e.printStackTrace();
                    methodResult.error(e.getMessage(), null, null);
                }
            } else {
                methodResult.notImplemented();
            }
        });
    }

    private BinaryMessenger messenger;
    private Activity activity;

    private final Map<String, TmapMapFluttifyPlugin.Handler> handlerMap = new HashMap<String, TmapMapFluttifyPlugin.Handler>() {{
        
    }};

    @Override
    public PlatformView create(Context context, int id, Object params) {
        Map<String, Object> __args__ = (Map<String, Object>) params;

        com.tencent.tencentmap.mapsdk.maps.TextureMapView view = new com.tencent.tencentmap.mapsdk.maps.TextureMapView(activity);

        ////////////////////////////////初始化AndroidView////////////////////////////////////////
        Integer mapType = (Integer) __args__.get("mapType");
        Boolean showZoomControl = (Boolean) __args__.get("showZoomControl");
        Boolean showCompass = (Boolean) __args__.get("showCompass");
        Boolean showScaleControl = (Boolean) __args__.get("showScaleControl");
        Boolean zoomGesturesEnabled = (Boolean) __args__.get("zoomGesturesEnabled");
        Boolean scrollGesturesEnabled = (Boolean) __args__.get("scrollGesturesEnabled");
        Boolean rotateGestureEnabled = (Boolean) __args__.get("rotateGestureEnabled");
        Boolean tiltGestureEnabled = (Boolean) __args__.get("tiltGestureEnabled");
        Double zoomLevel = (Double) __args__.get("zoomLevel");
        Double tilt = (Double) __args__.get("tilt");
        Double bearing = (Double) __args__.get("bearing");
        Double centerCoordinateLatitude = (Double) __args__.get("centerCoordinateLatitude");
        Double centerCoordinateLongitude = (Double) __args__.get("centerCoordinateLongitude");

        TencentMap map = view.getMap();
        UiSettings uiSettings = map.getUiSettings();

        if (mapType != null) {
            switch (mapType) {
                case 0:
                    map.setMapType(TencentMap.MAP_TYPE_NORMAL);
                    break;
                case 1:
                    map.setMapType(TencentMap.MAP_TYPE_SATELLITE);
                    break;
                case 2:
                    map.setMapType(TencentMap.MAP_TYPE_DARK);
                    break;
            }
        }
        if (showZoomControl != null) uiSettings.setZoomControlsEnabled(showZoomControl);
        if (showCompass != null) uiSettings.setCompassEnabled(showCompass);
        if (showScaleControl != null) uiSettings.setScaleViewEnabled(showScaleControl);
        if (zoomGesturesEnabled != null) uiSettings.setZoomGesturesEnabled(zoomGesturesEnabled);
        if (scrollGesturesEnabled != null) uiSettings.setScrollGesturesEnabled(scrollGesturesEnabled);
        if (rotateGestureEnabled != null) uiSettings.setRotateGesturesEnabled(rotateGestureEnabled);
        if (tiltGestureEnabled != null) uiSettings.setTiltGesturesEnabled(tiltGestureEnabled);
        CameraPosition.Builder builder = CameraPosition
                .builder()
                .bearing(bearing == null ? 0 : bearing.floatValue())
                .tilt(tilt == null ? 0 : tilt.floatValue())
                .zoom(zoomLevel == null ? 0 : zoomLevel.floatValue());
        if (centerCoordinateLatitude != null && centerCoordinateLongitude != null) {
            builder.target(new LatLng(centerCoordinateLatitude, centerCoordinateLongitude));
        }
        map.moveCamera(CameraUpdateFactory.newCameraPosition(builder.build()));
        ////////////////////////////////初始化AndroidView////////////////////////////////////////

        // 同时存放viewId和refId的对象, 供后续viewId转refId使用
        getHEAP().put(String.valueOf(Integer.MAX_VALUE - id), view);
        getHEAP().put(String.valueOf(System.identityHashCode(view)), view);
        return new PlatformView() {

            // add to HEAP
            @Override
            public View getView() {
                return view;
            }

            @Override
            public void dispose() {}
        };
    }
}
