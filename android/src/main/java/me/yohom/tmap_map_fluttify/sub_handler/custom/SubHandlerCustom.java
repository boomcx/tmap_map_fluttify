//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.tmap_map_fluttify.sub_handler.custom;

import android.location.Location;
import android.util.Log;

import com.tencent.map.geolocation.TencentLocation;
import com.tencent.map.geolocation.TencentLocationListener;
import com.tencent.map.geolocation.TencentLocationManager;
import com.tencent.map.geolocation.TencentLocationRequest;
import com.tencent.tencentmap.mapsdk.maps.LocationSource;
import com.tencent.tencentmap.mapsdk.maps.TencentMap;

import java.util.HashMap;
import java.util.Map;

import io.flutter.plugin.common.BinaryMessenger;
import me.yohom.tmap_map_fluttify.TmapMapFluttifyPlugin.Handler;
import me.yohom.tmap_map_fluttify.sub_handler.custom.tile_provider.UrlTileProviderImpl;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandlerCustom implements TencentLocationListener {

    public static final SubHandlerCustom instance = new SubHandlerCustom();

    private SubHandlerCustom() {
    }

    private LocationSource.OnLocationChangedListener mLocationChangedListener;

    public Map<String, Handler> getSubHandler(BinaryMessenger messenger, android.app.Activity activity) {
        return new HashMap<String, Handler>() {{
            put("com.tencent.tencentmap.mapsdk.maps.TencentMap::setLocationSource", (rawArgs, methodResult) -> {
                Map<String, Object> args = (Map<String, Object>) rawArgs;

                // ref
                TencentMap map = (TencentMap) args.get("__this__");

                // invoke native method
                try {
                    TencentLocationManager manager = TencentLocationManager.getInstance(activity.getApplication());
                    //创建定位请求
                    TencentLocationRequest request = TencentLocationRequest.create();
                    //设置定位周期（位置监听器回调周期）为3s
                    request.setInterval(3000);

                    map.setLocationSource(new LocationSource() {
                        @Override
                        public void activate(OnLocationChangedListener onLocationChangedListener) {
                            //这里我们将地图返回的位置监听保存为当前 Activity 的成员变量
                            mLocationChangedListener = onLocationChangedListener;
                            //开启定位
                            int err = manager.requestLocationUpdates(request, SubHandlerCustom.this);
                            switch (err) {
                                case 1:
                                    methodResult.error("设备缺少使用腾讯定位服务需要的基本条件", null, null);
                                    break;
                                case 2:
                                    methodResult.error("manifest 中配置的 key 不正确", null, null);
                                    break;
                                case 3:
                                    methodResult.error("自动加载libtencentloc.so失败", null, null);
                                    break;
                                default:
                                    break;
                            }
                        }

                        @Override
                        public void deactivate() {
                            //当不需要展示定位点时，需要停止定位并释放相关资源
                            manager.removeUpdates(SubHandlerCustom.this);
                            mLocationChangedListener = null;
                        }
                    });
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    methodResult.error(throwable.getMessage(), null, null);
                    return;
                }

                // convert result to jsonable result
                String jsonableResult = "success";

                methodResult.success(jsonableResult);
            });
            put("com.tencent.tencentmap.mapsdk.maps.model.UrlTileProviderX::create", (__rawArgs__, __methodResult__) -> {
                Map<String, Object> __args__ = (Map<String, Object>) __rawArgs__;

                final int width = (int) __args__.get("width");
                final int height = (int) __args__.get("height");
                final String urlTemplate = (String) __args__.get("urlTemplate");

                try {
                    final UrlTileProviderImpl provider = new UrlTileProviderImpl(width, height, urlTemplate);
                    __methodResult__.success(provider);
                } catch (Throwable throwable) {
                    throwable.printStackTrace();
                    if (getEnableLog()) {
                        Log.d("Current HEAP: ", getHEAP().toString());
                    }
                    __methodResult__.error(throwable.getMessage(), null, null);
                    return;
                }
            });
        }};
    }

    @Override
    public void onLocationChanged(TencentLocation tencentLocation, int i, String s) {
        //用户通过这个监听器就可以设置地图的定位点位置
        if (i == TencentLocation.ERROR_OK && mLocationChangedListener != null) {
            Location location = new Location(tencentLocation.getProvider());
            //设置经纬度
            location.setLatitude(tencentLocation.getLatitude());
            location.setLongitude(tencentLocation.getLongitude());
            //设置精度，这个值会被设置为定位点上表示精度的圆形半径
            location.setAccuracy(tencentLocation.getAccuracy());
            //设置定位标的旋转角度，注意 tencentLocation.getBearing() 只有在 gps 时才有可能获取
            location.setBearing((float) tencentLocation.getBearing());
            //将位置信息返回给地图
            mLocationChangedListener.onLocationChanged(location);
        }
    }

    @Override
    public void onStatusUpdate(String s, int i, String s1) {

    }
}
