//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.tmap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.common.StandardMethodCodec;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.tmap_map_fluttify.TmapMapFluttifyPlugin.Handler;
import me.yohom.foundation_fluttify.core.FluttifyMessageCodec;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler20 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_TencentMapGestureListenerList__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_TencentMapGestureListenerList__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.TencentMapGestureListenerList __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.TencentMapGestureListenerList();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_CameraPosition_Builder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_CameraPosition_Builder__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.CameraPosition.Builder __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CameraPosition.Builder();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_CameraPosition_Builder__com_tencent_tencentmap_mapsdk_maps_model_CameraPosition", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_CameraPosition_Builder__com_tencent_tencentmap_mapsdk_maps_model_CameraPosition");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.CameraPosition cameraposition = (com.tencent.tencentmap.mapsdk.maps.model.CameraPosition) ((Map<String, Object>) __args__).get("cameraposition");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.CameraPosition.Builder __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CameraPosition.Builder(cameraposition);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_IndoorLevel__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_IndoorLevel__String");
                }
            
                // args
                // ref arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.IndoorLevel __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.IndoorLevel(name);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_GeometryConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_GeometryConstants__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.GeometryConstants __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.GeometryConstants();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_PolygonOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_PolygonOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.PolygonOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolygonOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_SubPoi__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_SubPoi__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.SubPoi __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.SubPoi();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_CustomLayerOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_CustomLayerOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.CustomLayerOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CustomLayerOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_IntersectionOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_IntersectionOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.IntersectionOverlayOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.IntersectionOverlayOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_CircleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_CircleOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.CircleOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CircleOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_EmergeAnimation__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_EmergeAnimation__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng startPoint = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("startPoint");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.EmergeAnimation __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.EmergeAnimation(startPoint);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_OverlayLevel__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_OverlayLevel__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.OverlayLevel __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.OverlayLevel();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_TileOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_TileOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.TileOverlayOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.TileOverlayOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_AlphaAnimation__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_AlphaAnimation__float__float");
                }
            
                // args
                // ref arg
                Number fromAlpha = (Number) ((Map<String, Object>) __args__).get("fromAlpha");
                // ref arg
                Number toAlpha = (Number) ((Map<String, Object>) __args__).get("toAlpha");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.AlphaAnimation __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.AlphaAnimation(fromAlpha.floatValue(), toAlpha.floatValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_ScaleAnimation__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_ScaleAnimation__float__float__float__float");
                }
            
                // args
                // ref arg
                Number fromX = (Number) ((Map<String, Object>) __args__).get("fromX");
                // ref arg
                Number toX = (Number) ((Map<String, Object>) __args__).get("toX");
                // ref arg
                Number fromY = (Number) ((Map<String, Object>) __args__).get("fromY");
                // ref arg
                Number toY = (Number) ((Map<String, Object>) __args__).get("toY");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.ScaleAnimation __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.ScaleAnimation(fromX.floatValue(), toX.floatValue(), fromY.floatValue(), toY.floatValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_MapRouteSection__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_MapRouteSection__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.MapRouteSection __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MapRouteSection();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_IndoorInfo__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_IndoorInfo__String__String");
                }
            
                // args
                // ref arg
                String buildingId = (String) ((Map<String, Object>) __args__).get("buildingId");
                // ref arg
                String floorName = (String) ((Map<String, Object>) __args__).get("floorName");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.IndoorInfo __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.IndoorInfo(buildingId, floorName);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_BubbleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_BubbleOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.BubbleOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.BubbleOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_model_LatLngSpan__double__double", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_model_LatLngSpan__double__double");
                }
            
                // args
                // ref arg
                Number latitudeSpan = (Number) ((Map<String, Object>) __args__).get("latitudeSpan");
                // ref arg
                Number longitudeSpan = (Number) ((Map<String, Object>) __args__).get("longitudeSpan");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.model.LatLngSpan __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLngSpan(latitudeSpan.doubleValue(), longitudeSpan.doubleValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_TextureMapView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_TextureMapView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.TextureMapView __obj__ = new com.tencent.tencentmap.mapsdk.maps.TextureMapView(context);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_TextureMapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_TextureMapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.TencentMapOptions tencentMapOptions = (com.tencent.tencentmap.mapsdk.maps.TencentMapOptions) ((Map<String, Object>) __args__).get("tencentMapOptions");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.TextureMapView __obj__ = new com.tencent.tencentmap.mapsdk.maps.TextureMapView(context, tencentMapOptions);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_exception_InvalidLatLngBoundsException__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_exception_InvalidLatLngBoundsException__int");
                }
            
                // args
                // ref arg
                Number latLngsListSize = (Number) ((Map<String, Object>) __args__).get("latLngsListSize");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.exception.InvalidLatLngBoundsException __obj__ = new com.tencent.tencentmap.mapsdk.maps.exception.InvalidLatLngBoundsException(latLngsListSize.intValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.BuildConfig __obj__ = new com.tencent.tencentmap.mapsdk.maps.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_TencentMapOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_TencentMapOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.TencentMapOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.TencentMapOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_MapParamConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_MapParamConstants__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.MapParamConstants __obj__ = new com.tencent.tencentmap.mapsdk.maps.MapParamConstants();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.MapView __obj__ = new com.tencent.tencentmap.mapsdk.maps.MapView(context);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.TencentMapOptions options = (com.tencent.tencentmap.mapsdk.maps.TencentMapOptions) ((Map<String, Object>) __args__).get("options");
            
                // create target object
                com.tencent.tencentmap.mapsdk.maps.MapView __obj__ = new com.tencent.tencentmap.mapsdk.maps.MapView(context, options);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_tencentmap_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_tencentmap_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.tencentmap.BuildConfig __obj__ = new com.tencent.tencentmap.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_orientation_OrientationManager__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_orientation_OrientationManager__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.map.tools.orientation.OrientationManager __obj__ = new com.tencent.map.tools.orientation.OrientationManager(context);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_adapter_URLNetImpl__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_adapter_URLNetImpl__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.adapter.URLNetImpl __obj__ = new com.tencent.map.tools.net.adapter.URLNetImpl();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_http_HttpCanceler__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_http_HttpCanceler__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.http.HttpCanceler __obj__ = new com.tencent.map.tools.net.http.HttpCanceler();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_NetResponse__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_NetResponse__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.NetResponse __obj__ = new com.tencent.map.tools.net.NetResponse();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetLocalException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetLocalException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetLocalException __obj__ = new com.tencent.map.tools.net.exception.NetLocalException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetLocalException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetLocalException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetLocalException __obj__ = new com.tencent.map.tools.net.exception.NetLocalException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_FileUploadResetException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_FileUploadResetException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.FileUploadResetException __obj__ = new com.tencent.map.tools.net.exception.FileUploadResetException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetErrorException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetErrorException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetErrorException __obj__ = new com.tencent.map.tools.net.exception.NetErrorException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetErrorException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetErrorException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetErrorException __obj__ = new com.tencent.map.tools.net.exception.NetErrorException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetDataEmptyException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetDataEmptyException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetDataEmptyException __obj__ = new com.tencent.map.tools.net.exception.NetDataEmptyException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetDataEmptyException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetDataEmptyException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetDataEmptyException __obj__ = new com.tencent.map.tools.net.exception.NetDataEmptyException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetUnavailableException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetUnavailableException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetUnavailableException __obj__ = new com.tencent.map.tools.net.exception.NetUnavailableException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetUnavailableException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetUnavailableException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetUnavailableException __obj__ = new com.tencent.map.tools.net.exception.NetUnavailableException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetCanceledException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetCanceledException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetCanceledException __obj__ = new com.tencent.map.tools.net.exception.NetCanceledException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetCanceledException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetCanceledException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetCanceledException __obj__ = new com.tencent.map.tools.net.exception.NetCanceledException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetJceDataException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetJceDataException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetJceDataException __obj__ = new com.tencent.map.tools.net.exception.NetJceDataException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetJceDataException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetJceDataException__String");
                }
            
                // args
                // ref arg
                String detailMessage = (String) ((Map<String, Object>) __args__).get("detailMessage");
            
                // create target object
                com.tencent.map.tools.net.exception.NetJceDataException __obj__ = new com.tencent.map.tools.net.exception.NetJceDataException(detailMessage);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_exception_NetCustomException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_exception_NetCustomException__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.exception.NetCustomException __obj__ = new com.tencent.map.tools.net.exception.NetCustomException();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_net_NetUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_net_NetUtil__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.net.NetUtil __obj__ = new com.tencent.map.tools.net.NetUtil();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_Util__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_Util__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.Util __obj__ = new com.tencent.map.tools.Util();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_json_JsonUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_json_JsonUtils__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.json.JsonUtils __obj__ = new com.tencent.map.tools.json.JsonUtils();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_EncryptAesUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_EncryptAesUtils__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.EncryptAesUtils __obj__ = new com.tencent.map.tools.EncryptAesUtils();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_sheet_SheetNetworkStateMonitor__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_sheet_SheetNetworkStateMonitor__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context appContext = (android.content.Context) ((Map<String, Object>) __args__).get("appContext");
            
                // create target object
                com.tencent.map.tools.sheet.SheetNetworkStateMonitor __obj__ = new com.tencent.map.tools.sheet.SheetNetworkStateMonitor(appContext);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_sheet_SheetManager_Options__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_sheet_SheetManager_Options__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.sheet.SheetManager.Options __obj__ = new com.tencent.map.tools.sheet.SheetManager.Options();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_tools_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_tools_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.tools.BuildConfig __obj__ = new com.tencent.map.tools.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray");
                }
            
                // args
                // ref arg
                int[] colors = (int[]) ((Map<String, Object>) __args__).get("colors");
                // ref arg
                float[] startPoints = (float[]) ((Map<String, Object>) __args__).get("startPoints");
            
                // create target object
                com.tencent.map.sdk.utilities.heatmap.Gradient __obj__ = new com.tencent.map.sdk.utilities.heatmap.Gradient(colors, startPoints);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray__int");
                }
            
                // args
                // ref arg
                int[] colors = (int[]) ((Map<String, Object>) __args__).get("colors");
                // ref arg
                float[] startPoints = (float[]) ((Map<String, Object>) __args__).get("startPoints");
                // ref arg
                Number colorMapSize = (Number) ((Map<String, Object>) __args__).get("colorMapSize");
            
                // create target object
                com.tencent.map.sdk.utilities.heatmap.Gradient __obj__ = new com.tencent.map.sdk.utilities.heatmap.Gradient(colors, startPoints, colorMapSize.intValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_WeightedLatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng__double", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_utilities_heatmap_WeightedLatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng__double");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng latLng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latLng");
                // ref arg
                Number intensity = (Number) ((Map<String, Object>) __args__).get("intensity");
            
                // create target object
                com.tencent.map.sdk.utilities.heatmap.WeightedLatLng __obj__ = new com.tencent.map.sdk.utilities.heatmap.WeightedLatLng(latLng, intensity.doubleValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_WeightedLatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_utilities_heatmap_WeightedLatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng latLng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latLng");
            
                // create target object
                com.tencent.map.sdk.utilities.heatmap.WeightedLatLng __obj__ = new com.tencent.map.sdk.utilities.heatmap.WeightedLatLng(latLng);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder __obj__ = new com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_comps_offlinemap_OfflineProvince__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_comps_offlinemap_OfflineProvince__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.sdk.comps.offlinemap.OfflineProvince __obj__ = new com.tencent.map.sdk.comps.offlinemap.OfflineProvince();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_comps_offlinemap_OfflineItem__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_comps_offlinemap_OfflineItem__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.sdk.comps.offlinemap.OfflineItem __obj__ = new com.tencent.map.sdk.comps.offlinemap.OfflineItem();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_comps_offlinemap_OfflineNation__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_comps_offlinemap_OfflineNation__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.sdk.comps.offlinemap.OfflineNation __obj__ = new com.tencent.map.sdk.comps.offlinemap.OfflineNation();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_sdk_comps_offlinemap_OfflineCity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_sdk_comps_offlinemap_OfflineCity__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.sdk.comps.offlinemap.OfflineCity __obj__ = new com.tencent.map.sdk.comps.offlinemap.OfflineCity();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_JNIInterface__com_tencent_map_lib_JNIInterfaceCallback", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_JNIInterface__com_tencent_map_lib_JNIInterfaceCallback");
                }
            
                // args
                // ref arg
                com.tencent.map.lib.JNIInterfaceCallback callback = (com.tencent.map.lib.JNIInterfaceCallback) ((Map<String, Object>) __args__).get("callback");
            
                // create target object
                com.tencent.map.lib.JNIInterface __obj__ = new com.tencent.map.lib.JNIInterface(callback);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_AnnocationTextResult__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_AnnocationTextResult__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.AnnocationTextResult __obj__ = new com.tencent.map.lib.models.AnnocationTextResult();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_MaskLayer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_MaskLayer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.MaskLayer __obj__ = new com.tencent.map.lib.models.MaskLayer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_CircleInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_CircleInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.CircleInfo __obj__ = new com.tencent.map.lib.models.CircleInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_AnnocationText__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_AnnocationText__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.AnnocationText __obj__ = new com.tencent.map.lib.models.AnnocationText();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_MarkerInfo__double__double__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_MarkerInfo__double__double__String");
                }
            
                // args
                // ref arg
                Number latitude = (Number) ((Map<String, Object>) __args__).get("latitude");
                // ref arg
                Number longitude = (Number) ((Map<String, Object>) __args__).get("longitude");
                // ref arg
                String iconName = (String) ((Map<String, Object>) __args__).get("iconName");
            
                // create target object
                com.tencent.map.lib.models.MarkerInfo __obj__ = new com.tencent.map.lib.models.MarkerInfo(latitude.doubleValue(), longitude.doubleValue(), iconName);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_Polygon2D__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_Polygon2D__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.Polygon2D __obj__ = new com.tencent.map.lib.models.Polygon2D();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_GeoPoint__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_GeoPoint__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.GeoPoint __obj__ = new com.tencent.map.lib.models.GeoPoint();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_GeoPoint__com_tencent_map_lib_models_GeoPoint", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_GeoPoint__com_tencent_map_lib_models_GeoPoint");
                }
            
                // args
                // ref arg
                com.tencent.map.lib.models.GeoPoint geoPoint = (com.tencent.map.lib.models.GeoPoint) ((Map<String, Object>) __args__).get("geoPoint");
            
                // create target object
                com.tencent.map.lib.models.GeoPoint __obj__ = new com.tencent.map.lib.models.GeoPoint(geoPoint);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_GeoPoint__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_GeoPoint__int__int");
                }
            
                // args
                // ref arg
                Number latitudeE6 = (Number) ((Map<String, Object>) __args__).get("latitudeE6");
                // ref arg
                Number longitudeE6 = (Number) ((Map<String, Object>) __args__).get("longitudeE6");
            
                // create target object
                com.tencent.map.lib.models.GeoPoint __obj__ = new com.tencent.map.lib.models.GeoPoint(latitudeE6.intValue(), longitudeE6.intValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_GeoPoint__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_GeoPoint__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng latLng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latLng");
            
                // create target object
                com.tencent.map.lib.models.GeoPoint __obj__ = new com.tencent.map.lib.models.GeoPoint(latLng);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_CityTrafficInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_CityTrafficInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.CityTrafficInfo __obj__ = new com.tencent.map.lib.models.CityTrafficInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_MapTileID__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_MapTileID__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.MapTileID __obj__ = new com.tencent.map.lib.models.MapTileID();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_SubMarkerInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_SubMarkerInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.SubMarkerInfo __obj__ = new com.tencent.map.lib.models.SubMarkerInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_GroundOverlayInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_GroundOverlayInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.GroundOverlayInfo __obj__ = new com.tencent.map.lib.models.GroundOverlayInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_IntersectionOverlayInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_IntersectionOverlayInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.IntersectionOverlayInfo __obj__ = new com.tencent.map.lib.models.IntersectionOverlayInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_models_AggregationOverlayInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_models_AggregationOverlayInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.models.AggregationOverlayInfo __obj__ = new com.tencent.map.lib.models.AggregationOverlayInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_map_lib_mapstructure_MapRouteSectionWithName__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_map_lib_mapstructure_MapRouteSectionWithName__");
                }
            
                // args
            
            
                // create target object
                com.tencent.map.lib.mapstructure.MapRouteSectionWithName __obj__ = new com.tencent.map.lib.mapstructure.MapRouteSectionWithName();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_deserializer_PolylineDeserializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_deserializer_PolylineDeserializer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.deserializer.PolylineDeserializer __obj__ = new com.tencent.lbssearch.object.deserializer.PolylineDeserializer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_deserializer_RoutePlanningStepDeserializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_deserializer_RoutePlanningStepDeserializer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.deserializer.RoutePlanningStepDeserializer __obj__ = new com.tencent.lbssearch.object.deserializer.RoutePlanningStepDeserializer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_deserializer_TransitResultLatLngBoundsDeserializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_deserializer_TransitResultLatLngBoundsDeserializer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.deserializer.TransitResultLatLngBoundsDeserializer __obj__ = new com.tencent.lbssearch.object.deserializer.TransitResultLatLngBoundsDeserializer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_deserializer_LatLngDeserializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_deserializer_LatLngDeserializer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.deserializer.LatLngDeserializer __obj__ = new com.tencent.lbssearch.object.deserializer.LatLngDeserializer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_deserializer_TransitResultSegmentDeserializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_deserializer_TransitResultSegmentDeserializer__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.deserializer.TransitResultSegmentDeserializer __obj__ = new com.tencent.lbssearch.object.deserializer.TransitResultSegmentDeserializer();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Result__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Result__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Result __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Result();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_BicyclingResultObject_Route__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_BicyclingResultObject_Route__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.BicyclingResultObject.Route __obj__ = new com.tencent.lbssearch.object.result.BicyclingResultObject.Route();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Geo2AddressResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Geo2AddressResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Geo2AddressResultObject __obj__ = new com.tencent.lbssearch.object.result.Geo2AddressResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Transit__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Transit__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Transit __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Transit();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_FormatterAddress__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_FormatterAddress__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.FormatterAddress __obj__ = new com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.FormatterAddress();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_WalkingResultObject_Route__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_WalkingResultObject_Route__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.WalkingResultObject.Route __obj__ = new com.tencent.lbssearch.object.result.WalkingResultObject.Route();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_GetOnOrOff__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_GetOnOrOff__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.GetOnOrOff __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.GetOnOrOff();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_StreetViewResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_StreetViewResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.StreetViewResultObject __obj__ = new com.tencent.lbssearch.object.result.StreetViewResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject_WayPoint__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject_WayPoint__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject.WayPoint __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject.WayPoint();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Station__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Station__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Station __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Station();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_WalkingResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_WalkingResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.WalkingResultObject __obj__ = new com.tencent.lbssearch.object.result.WalkingResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SearchResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SearchResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SearchResultObject __obj__ = new com.tencent.lbssearch.object.result.SearchResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_BicyclingResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_BicyclingResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.BicyclingResultObject __obj__ = new com.tencent.lbssearch.object.result.BicyclingResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_AddressReference_Area__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_AddressReference_Area__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.AddressReference.Area __obj__ = new com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.AddressReference.Area();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DistrictResultObject_DistrictResult__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DistrictResultObject_DistrictResult__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DistrictResultObject.DistrictResult __obj__ = new com.tencent.lbssearch.object.result.DistrictResultObject.DistrictResult();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject_Restriction__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject_Restriction__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject.Restriction __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject.Restriction();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SuggestionResultObject_SuggestionData__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SuggestionResultObject_SuggestionData__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SuggestionResultObject.SuggestionData __obj__ = new com.tencent.lbssearch.object.result.SuggestionResultObject.SuggestionData();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_AddressReference__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult_AddressReference__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.AddressReference __obj__ = new com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult.AddressReference();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Route__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Route__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Route __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Route();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Exit__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Exit__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Exit __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Exit();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Line__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Line__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Line __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Line();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject_Result__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject_Result__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject.Result __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject.Result();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Walking__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Walking__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Walking __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Walking();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SearchResultObject_SearchResultData__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SearchResultObject_SearchResultData__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SearchResultObject.SearchResultData __obj__ = new com.tencent.lbssearch.object.result.SearchResultObject.SearchResultData();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DistrictResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DistrictResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DistrictResultObject __obj__ = new com.tencent.lbssearch.object.result.DistrictResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Address2GeoResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Address2GeoResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Address2GeoResultObject __obj__ = new com.tencent.lbssearch.object.result.Address2GeoResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_BicyclingResultObject_Result__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_BicyclingResultObject_Result__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.BicyclingResultObject.Result __obj__ = new com.tencent.lbssearch.object.result.BicyclingResultObject.Result();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_AddressComponent__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_AddressComponent__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.AddressComponent __obj__ = new com.tencent.lbssearch.object.result.AddressComponent();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_RoutePlanningObject_Step__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_RoutePlanningObject_Step__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.RoutePlanningObject.Step __obj__ = new com.tencent.lbssearch.object.result.RoutePlanningObject.Step();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SearchResultObject_SearchResultData_Pano__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SearchResultObject_SearchResultData_Pano__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SearchResultObject.SearchResultData.Pano __obj__ = new com.tencent.lbssearch.object.result.SearchResultObject.SearchResultData.Pano();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Geo2AddressResultObject_ReverseAddressResult__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult __obj__ = new com.tencent.lbssearch.object.result.Geo2AddressResultObject.ReverseAddressResult();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_Destination__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_Destination__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.Destination __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.Destination();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TransitResultObject_LatLngBounds__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TransitResultObject_LatLngBounds__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TransitResultObject.LatLngBounds __obj__ = new com.tencent.lbssearch.object.result.TransitResultObject.LatLngBounds();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject_Route__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject_Route__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject.Route __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject.Route();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SuggestionResultObject_SubPoi__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SuggestionResultObject_SubPoi__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SuggestionResultObject.SubPoi __obj__ = new com.tencent.lbssearch.object.result.SuggestionResultObject.SubPoi();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_StreetViewResultObject_Details__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_StreetViewResultObject_Details__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.StreetViewResultObject.Details __obj__ = new com.tencent.lbssearch.object.result.StreetViewResultObject.Details();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_SuggestionResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_SuggestionResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.SuggestionResultObject __obj__ = new com.tencent.lbssearch.object.result.SuggestionResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_DrivingResultObject_TaxiFare__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_DrivingResultObject_TaxiFare__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.DrivingResultObject.TaxiFare __obj__ = new com.tencent.lbssearch.object.result.DrivingResultObject.TaxiFare();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_Address2GeoResultObject_Address2GeoResult__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_Address2GeoResultObject_Address2GeoResult__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.Address2GeoResultObject.Address2GeoResult __obj__ = new com.tencent.lbssearch.object.result.Address2GeoResultObject.Address2GeoResult();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_WalkingResultObject_Result__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_WalkingResultObject_Result__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.WalkingResultObject.Result __obj__ = new com.tencent.lbssearch.object.result.WalkingResultObject.Result();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_result_TranslateResultObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_result_TranslateResultObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.result.TranslateResultObject __obj__ = new com.tencent.lbssearch.object.result.TranslateResultObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_RequestParams__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_RequestParams__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.RequestParams __obj__ = new com.tencent.lbssearch.object.RequestParams();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_RequestParams__java_util_Map_String_String_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_RequestParams__java_util_Map_String_String_");
                }
            
                // args
                // ref arg
                java.util.Map<String,String> source = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("source");
            
                // create target object
                com.tencent.lbssearch.object.RequestParams __obj__ = new com.tencent.lbssearch.object.RequestParams(source);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_RequestParams__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_RequestParams__String__String");
                }
            
                // args
                // ref arg
                String key = (String) ((Map<String, Object>) __args__).get("key");
                // ref arg
                String value = (String) ((Map<String, Object>) __args__).get("value");
            
                // create target object
                com.tencent.lbssearch.object.RequestParams __obj__ = new com.tencent.lbssearch.object.RequestParams(key, value);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_RequestParams__java_lang_Object", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_RequestParams__java_lang_Object");
                }
            
                // args
                // ref arg
                java.lang.Object keysAndValues = (java.lang.Object) ((Map<String, Object>) __args__).get("keysAndValues");
            
                // create target object
                com.tencent.lbssearch.object.RequestParams __obj__ = new com.tencent.lbssearch.object.RequestParams(keysAndValues);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DrivingParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DrivingParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.DrivingParam __obj__ = new com.tencent.lbssearch.object.param.DrivingParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DrivingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DrivingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng from = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("from");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng to = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("to");
            
                // create target object
                com.tencent.lbssearch.object.param.DrivingParam __obj__ = new com.tencent.lbssearch.object.param.DrivingParam(from, to);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Region__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Region__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Region __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Region();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Region__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Region__String");
                }
            
                // args
                // ref arg
                String city = (String) ((Map<String, Object>) __args__).get("city");
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Region __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Region(city);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_BicyclingParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_BicyclingParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.BicyclingParam __obj__ = new com.tencent.lbssearch.object.param.BicyclingParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_BicyclingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_BicyclingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng from = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("from");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng to = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("to");
            
                // create target object
                com.tencent.lbssearch.object.param.BicyclingParam __obj__ = new com.tencent.lbssearch.object.param.BicyclingParam(from, to);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DrivingParam_Travel__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DrivingParam_Travel__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.DrivingParam.Travel __obj__ = new com.tencent.lbssearch.object.param.DrivingParam.Travel();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_TransitParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_TransitParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.TransitParam __obj__ = new com.tencent.lbssearch.object.param.TransitParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_TransitParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_TransitParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng from = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("from");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng to = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("to");
            
                // create target object
                com.tencent.lbssearch.object.param.TransitParam __obj__ = new com.tencent.lbssearch.object.param.TransitParam(from, to);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_Geo2AddressParam_PoiOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_Geo2AddressParam_PoiOptions__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.Geo2AddressParam.PoiOptions __obj__ = new com.tencent.lbssearch.object.param.Geo2AddressParam.PoiOptions();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SuggestionParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SuggestionParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.SuggestionParam __obj__ = new com.tencent.lbssearch.object.param.SuggestionParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SuggestionParam__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SuggestionParam__String__String");
                }
            
                // args
                // ref arg
                String keyword = (String) ((Map<String, Object>) __args__).get("keyword");
                // ref arg
                String region = (String) ((Map<String, Object>) __args__).get("region");
            
                // create target object
                com.tencent.lbssearch.object.param.SuggestionParam __obj__ = new com.tencent.lbssearch.object.param.SuggestionParam(keyword, region);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_Address2GeoParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_Address2GeoParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.Address2GeoParam __obj__ = new com.tencent.lbssearch.object.param.Address2GeoParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_Address2GeoParam__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_Address2GeoParam__String");
                }
            
                // args
                // ref arg
                String address = (String) ((Map<String, Object>) __args__).get("address");
            
                // create target object
                com.tencent.lbssearch.object.param.Address2GeoParam __obj__ = new com.tencent.lbssearch.object.param.Address2GeoParam(address);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DistrictSearchParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DistrictSearchParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.DistrictSearchParam __obj__ = new com.tencent.lbssearch.object.param.DistrictSearchParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DistrictSearchParam__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DistrictSearchParam__String");
                }
            
                // args
                // ref arg
                String keyword = (String) ((Map<String, Object>) __args__).get("keyword");
            
                // create target object
                com.tencent.lbssearch.object.param.DistrictSearchParam __obj__ = new com.tencent.lbssearch.object.param.DistrictSearchParam(keyword);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_StreetViewParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_StreetViewParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.StreetViewParam __obj__ = new com.tencent.lbssearch.object.param.StreetViewParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DistrictChildrenParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DistrictChildrenParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.DistrictChildrenParam __obj__ = new com.tencent.lbssearch.object.param.DistrictChildrenParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_WalkingParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_WalkingParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.WalkingParam __obj__ = new com.tencent.lbssearch.object.param.WalkingParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_WalkingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_WalkingParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng from = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("from");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng to = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("to");
            
                // create target object
                com.tencent.lbssearch.object.param.WalkingParam __obj__ = new com.tencent.lbssearch.object.param.WalkingParam(from, to);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Nearby__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Nearby__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Nearby __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Nearby();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Nearby__com_tencent_tencentmap_mapsdk_maps_model_LatLng__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Nearby__com_tencent_tencentmap_mapsdk_maps_model_LatLng__int");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng point = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("point");
                // ref arg
                Number radius = (Number) ((Map<String, Object>) __args__).get("radius");
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Nearby __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Nearby(point, radius.intValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Rectangle__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Rectangle__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Rectangle __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Rectangle();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam_Rectangle__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam_Rectangle__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng leftBottom = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("leftBottom");
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng rightTop = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("rightTop");
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam.Rectangle __obj__ = new com.tencent.lbssearch.object.param.SearchParam.Rectangle(leftBottom, rightTop);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_TranslateParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_TranslateParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.TranslateParam __obj__ = new com.tencent.lbssearch.object.param.TranslateParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_SearchParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_SearchParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.SearchParam __obj__ = new com.tencent.lbssearch.object.param.SearchParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_DrivingParam_Travel_Point__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_DrivingParam_Travel_Point__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng latLng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latLng");
            
                // create target object
                com.tencent.lbssearch.object.param.DrivingParam.Travel.Point __obj__ = new com.tencent.lbssearch.object.param.DrivingParam.Travel.Point(latLng);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_Geo2AddressParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_Geo2AddressParam__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.object.param.Geo2AddressParam __obj__ = new com.tencent.lbssearch.object.param.Geo2AddressParam();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_object_param_Geo2AddressParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_object_param_Geo2AddressParam__com_tencent_tencentmap_mapsdk_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.tencent.tencentmap.mapsdk.maps.model.LatLng latLng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latLng");
            
                // create target object
                com.tencent.lbssearch.object.param.Geo2AddressParam __obj__ = new com.tencent.lbssearch.object.param.Geo2AddressParam(latLng);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_httpresponse_Poi__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_httpresponse_Poi__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.httpresponse.Poi __obj__ = new com.tencent.lbssearch.httpresponse.Poi();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_httpresponse_AdInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_httpresponse_AdInfo__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.httpresponse.AdInfo __obj__ = new com.tencent.lbssearch.httpresponse.AdInfo();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_httpresponse_BaseObject__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_httpresponse_BaseObject__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.httpresponse.BaseObject __obj__ = new com.tencent.lbssearch.httpresponse.BaseObject();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.BuildConfig __obj__ = new com.tencent.lbssearch.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_HttpProvider__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_HttpProvider__");
                }
            
                // args
            
            
                // create target object
                com.tencent.lbssearch.HttpProvider __obj__ = new com.tencent.lbssearch.HttpProvider();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcom_tencent_lbssearch_TencentSearch__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_tencent_lbssearch_TencentSearch__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context context = (android.content.Context) ((Map<String, Object>) __args__).get("context");
            
                // create target object
                com.tencent.lbssearch.TencentSearch __obj__ = new com.tencent.lbssearch.TencentSearch(context);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_net_NetResponse__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.net.NetResponse> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.net.NetResponse __obj__ = new com.tencent.tencentmap.net.NetResponse();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_net_NetResponse__com_tencent_map_tools_net_NetResponse", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.net.NetResponse> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.map.tools.net.NetResponse response = (com.tencent.map.tools.net.NetResponse) ((Map<String, Object>) __args__).get("response");
            
                    // create target object
                    com.tencent.tencentmap.net.NetResponse __obj__ = new com.tencent.tencentmap.net.NetResponse(response);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MaskLayerOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MaskLayerOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MaskLayerOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MaskLayerOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_TrafficStyle__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.TrafficStyle> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.TrafficStyle __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.TrafficStyle();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_AnimationSet__boolean", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.AnimationSet> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    boolean shareInterpolator = (boolean) ((Map<String, Object>) __args__).get("shareInterpolator");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.AnimationSet __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.AnimationSet(shareInterpolator);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MyLocationStyle__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MyLocationStyle> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MyLocationStyle __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MyLocationStyle();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_CamerParameter__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.CamerParameter> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.CamerParameter __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CamerParameter();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_VisibleRegion__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLngBounds", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.VisibleRegion> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng latlng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latlng");
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng latlng1 = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latlng1");
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng latlng2 = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latlng2");
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng latlng3 = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latlng3");
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds latlngbounds = (com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds) ((Map<String, Object>) __args__).get("latlngbounds");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.VisibleRegion __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.VisibleRegion(latlng, latlng1, latlng2, latlng3, latlngbounds);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MapPoi__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MapPoi> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MapPoi __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MapPoi();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MapPoi__double__double", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MapPoi> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number latitude = (Number) ((Map<String, Object>) __args__).get("latitude");
                    // ref arg
                    Number longitude = (Number) ((Map<String, Object>) __args__).get("longitude");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MapPoi __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MapPoi(latitude.doubleValue(), longitude.doubleValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MapPoi__double__double__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MapPoi> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number latitude = (Number) ((Map<String, Object>) __args__).get("latitude");
                    // ref arg
                    Number longitude = (Number) ((Map<String, Object>) __args__).get("longitude");
                    // ref arg
                    String name = (String) ((Map<String, Object>) __args__).get("name");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MapPoi __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MapPoi(latitude.doubleValue(), longitude.doubleValue(), name);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLngBounds_Builder__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds.Builder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds.Builder __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds.Builder();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_SegmentText__int__int__String", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number startIndex = (Number) ((Map<String, Object>) __args__).get("startIndex");
                    // ref arg
                    Number endIndex = (Number) ((Map<String, Object>) __args__).get("endIndex");
                    // ref arg
                    String text = (String) ((Map<String, Object>) __args__).get("text");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText(startIndex.intValue(), endIndex.intValue(), text);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_RotateAnimation__float__float__float__float__float", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.RotateAnimation> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number fromdegree = (Number) ((Map<String, Object>) __args__).get("fromdegree");
                    // ref arg
                    Number todegree = (Number) ((Map<String, Object>) __args__).get("todegree");
                    // ref arg
                    Number pivotx = (Number) ((Map<String, Object>) __args__).get("pivotx");
                    // ref arg
                    Number pivoty = (Number) ((Map<String, Object>) __args__).get("pivoty");
                    // ref arg
                    Number pivotz = (Number) ((Map<String, Object>) __args__).get("pivotz");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.RotateAnimation __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.RotateAnimation(fromdegree.floatValue(), todegree.floatValue(), pivotx.floatValue(), pivoty.floatValue(), pivotz.floatValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_TranslateAnimation__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.TranslateAnimation> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng mTarget = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("mTarget");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.TranslateAnimation __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.TranslateAnimation(mTarget);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_VectorHeatOverlayOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.VectorHeatOverlayOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.VectorHeatOverlayOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.VectorHeatOverlayOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_PolylineOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_Tile__int__int__byteArray", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.Tile> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number width = (Number) ((Map<String, Object>) __args__).get("width");
                    // ref arg
                    Number height = (Number) ((Map<String, Object>) __args__).get("height");
                    // ref arg
                    byte[] data = (byte[]) ((Map<String, Object>) __args__).get("data");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.Tile __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.Tile(width.intValue(), height.intValue(), data);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MapRouteSectionWithName__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MapRouteSectionWithName> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MapRouteSectionWithName __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MapRouteSectionWithName();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_GroundOverlayOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.GroundOverlayOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.GroundOverlayOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.GroundOverlayOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_CameraPosition__com_tencent_tencentmap_mapsdk_maps_model_LatLng__float__float__float", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.CameraPosition> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng latlng = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("latlng");
                    // ref arg
                    Number zoomLevel = (Number) ((Map<String, Object>) __args__).get("zoomLevel");
                    // ref arg
                    Number skew = (Number) ((Map<String, Object>) __args__).get("skew");
                    // ref arg
                    Number rotate = (Number) ((Map<String, Object>) __args__).get("rotate");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.CameraPosition __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.CameraPosition(latlng, zoomLevel.floatValue(), skew.floatValue(), rotate.floatValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_AoiLayerOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.AoiLayerOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.AoiLayerOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.AoiLayerOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_IndoorMapPoi__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.IndoorMapPoi> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.IndoorMapPoi __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.IndoorMapPoi();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MarkerOptions__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng position = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("position");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions(position);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_MarkerOptions__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.MarkerOptions();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_Text_Builder__com_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_SegmentText", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText segmentText = (com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText) ((Map<String, Object>) __args__).get("segmentText");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder(segmentText);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_Text_Builder__java_util_List_com_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_SegmentText_", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    java.util.List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText> segmentTexts = (java.util.List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.SegmentText>) ((Map<String, Object>) __args__).get("segmentTexts");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.Text.Builder(segmentTexts);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLngBounds__com_tencent_tencentmap_mapsdk_maps_model_LatLng__com_tencent_tencentmap_mapsdk_maps_model_LatLng", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng northeast = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("northeast");
                    // ref arg
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng southwest = (com.tencent.tencentmap.mapsdk.maps.model.LatLng) ((Map<String, Object>) __args__).get("southwest");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLngBounds(northeast, southwest);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_PolylineOptions_LineType__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.LineType> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.LineType __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.PolylineOptions.LineType();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLng__", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLng> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLng();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLng__double__double", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLng> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number latitude = (Number) ((Map<String, Object>) __args__).get("latitude");
                    // ref arg
                    Number longitude = (Number) ((Map<String, Object>) __args__).get("longitude");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLng(latitude.doubleValue(), longitude.doubleValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLng__double__double__double", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLng> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number latitude = (Number) ((Map<String, Object>) __args__).get("latitude");
                    // ref arg
                    Number longitude = (Number) ((Map<String, Object>) __args__).get("longitude");
                    // ref arg
                    Number altitude = (Number) ((Map<String, Object>) __args__).get("altitude");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLng(latitude.doubleValue(), longitude.doubleValue(), altitude.doubleValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_model_LatLng__android_location_Location", (__argsBatch__, __methodResult__) -> {
                List<com.tencent.tencentmap.mapsdk.maps.model.LatLng> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    android.location.Location location = (android.location.Location) ((Map<String, Object>) __args__).get("location");
            
                    // create target object
                    com.tencent.tencentmap.mapsdk.maps.model.LatLng __obj__ = new com.tencent.tencentmap.mapsdk.maps.model.LatLng(location);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
