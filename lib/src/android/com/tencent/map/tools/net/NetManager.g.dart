// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_tools_net_NetManager extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.tools.net.NetManager';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<com_tencent_map_tools_net_NetManager> getInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager::getInstance([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::getInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_net_NetManager()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setAdapter(android_content_Context context, com_tencent_map_tools_net_NetAdapter adapter) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager@$refId::setAdapter([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::setAdapter', {"context": context, "adapter": adapter, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_net_NetResponse> doGet(String url, String userAgent, int retryMethod, int timeOut, Map<String,String> mapHeaders, com_tencent_map_tools_net_http_HttpCanceler canceler) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager@$refId::doGet([\'url\':$url, \'userAgent\':$userAgent, \'retryMethod\':$retryMethod, \'timeOut\':$timeOut, \'mapHeaders\':$mapHeaders])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doGet', {"url": url, "userAgent": userAgent, "retryMethod": retryMethod, "timeOut": timeOut, "mapHeaders": mapHeaders, "canceler": canceler, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_net_NetResponse()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_net_NetResponse> doPost(String url, String userAgent, Uint8List postData, int retryMethod, int timeout, Map<String,String> mapHeaders, com_tencent_map_tools_net_http_HttpCanceler canceler) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager@$refId::doPost([\'url\':$url, \'userAgent\':$userAgent, \'postData\':$postData, \'retryMethod\':$retryMethod, \'timeout\':$timeout, \'mapHeaders\':$mapHeaders])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doPost', {"url": url, "userAgent": userAgent, "postData": postData, "retryMethod": retryMethod, "timeout": timeout, "mapHeaders": mapHeaders, "canceler": canceler, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_net_NetResponse()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_net_NetResponse> doPostNoBuffer(String url, String userAgent, Uint8List postData) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager@$refId::doPostNoBuffer([\'url\':$url, \'userAgent\':$userAgent, \'postData\':$postData])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doPostNoBuffer', {"url": url, "userAgent": userAgent, "postData": postData, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_net_NetResponse()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<void> doRangePost(String url, Uint8List postData, String token, String nonce, String timeStamp, String start, com_tencent_map_tools_net_http_HttpCanceler canceler) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.net.NetManager@$refId::doRangePost([\'url\':$url, \'postData\':$postData, \'token\':$token, \'nonce\':$nonce, \'timeStamp\':$timeStamp, \'start\':$start])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doRangePost', {"url": url, "postData": postData, "token": token, "nonce": nonce, "timeStamp": timeStamp, "start": start, "canceler": canceler, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_tools_net_NetManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_tools_net_NetManager_Batch on List<com_tencent_map_tools_net_NetManager> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<com_tencent_map_tools_net_NetManager>> getInstance_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::getInstance_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_net_NetManager()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setAdapter_batch(List<android_content_Context> context, List<com_tencent_map_tools_net_NetAdapter> adapter) async {
    if (context.length != adapter.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::setAdapter_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"context": context[__i__], "adapter": adapter[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_net_NetResponse>> doGet_batch(List<String> url, List<String> userAgent, List<int> retryMethod, List<int> timeOut, List<Map<String,String>> mapHeaders, List<com_tencent_map_tools_net_http_HttpCanceler> canceler) async {
    if (url.length != userAgent.length || userAgent.length != retryMethod.length || retryMethod.length != timeOut.length || timeOut.length != mapHeaders.length || mapHeaders.length != canceler.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doGet_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"url": url[__i__], "userAgent": userAgent[__i__], "retryMethod": retryMethod[__i__], "timeOut": timeOut[__i__], "mapHeaders": mapHeaders[__i__], "canceler": canceler[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_net_NetResponse()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_net_NetResponse>> doPost_batch(List<String> url, List<String> userAgent, List<Uint8List> postData, List<int> retryMethod, List<int> timeout, List<Map<String,String>> mapHeaders, List<com_tencent_map_tools_net_http_HttpCanceler> canceler) async {
    if (url.length != userAgent.length || userAgent.length != postData.length || postData.length != retryMethod.length || retryMethod.length != timeout.length || timeout.length != mapHeaders.length || mapHeaders.length != canceler.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doPost_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"url": url[__i__], "userAgent": userAgent[__i__], "postData": postData[__i__], "retryMethod": retryMethod[__i__], "timeout": timeout[__i__], "mapHeaders": mapHeaders[__i__], "canceler": canceler[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_net_NetResponse()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_net_NetResponse>> doPostNoBuffer_batch(List<String> url, List<String> userAgent, List<Uint8List> postData) async {
    if (url.length != userAgent.length || userAgent.length != postData.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doPostNoBuffer_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"url": url[__i__], "userAgent": userAgent[__i__], "postData": postData[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_net_NetResponse()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> doRangePost_batch(List<String> url, List<Uint8List> postData, List<String> token, List<String> nonce, List<String> timeStamp, List<String> start, List<com_tencent_map_tools_net_http_HttpCanceler> canceler) async {
    if (url.length != postData.length || postData.length != token.length || token.length != nonce.length || nonce.length != timeStamp.length || timeStamp.length != start.length || start.length != canceler.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.net.NetManager::doRangePost_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"url": url[__i__], "postData": postData[__i__], "token": token[__i__], "nonce": nonce[__i__], "timeStamp": timeStamp[__i__], "start": start[__i__], "canceler": canceler[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}