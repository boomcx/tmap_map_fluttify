// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_tools_sheet_SheetManager_Options extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.tools.sheet.SheetManager.Options';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_map_tools_sheet_SheetManager_Options> create__() async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_tools_sheet_SheetManager_Options__', );
    final object = com_tencent_map_tools_sheet_SheetManager_Options()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_tools_sheet_SheetManager_Options__', {'length': length});
  
    final List<com_tencent_map_tools_sheet_SheetManager_Options> typedResult = resultBatch.map((result) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<com_tencent_map_tools_sheet_SheetManager_UncaughtListener> getUncaughtListener() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getUncaughtListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getUncaughtListener', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_UncaughtListener()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setUncaughtListener(com_tencent_map_tools_sheet_SheetManager_UncaughtListener uncaughtListener) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setUncaughtListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setUncaughtListener', {"uncaughtListener": uncaughtListener, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options_AdapterType> getAdapterType() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getAdapterType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getAdapterType', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as int).tocom_tencent_map_tools_sheet_SheetManager_Options_AdapterType();
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setAdapterType(com_tencent_map_tools_sheet_SheetManager_Options_AdapterType adapterType) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setAdapterType([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setAdapterType', {"adapterType": adapterType.toValue(), "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getPluginName() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getPluginName([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getPluginName', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setSheetProjectName(String pluginName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setSheetProjectName([\'pluginName\':$pluginName])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSheetProjectName', {"pluginName": pluginName, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getPluginUpdateUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getPluginUpdateUrl([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getPluginUpdateUrl', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setPluginUpdateUrl(String pluginUpdateUrl) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setPluginUpdateUrl([\'pluginUpdateUrl\':$pluginUpdateUrl])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setPluginUpdateUrl', {"pluginUpdateUrl": pluginUpdateUrl, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSdkVersion() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSdkVersion([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkVersion', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setVersion(String sdkVersion) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setVersion([\'sdkVersion\':$sdkVersion])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setVersion', {"sdkVersion": sdkVersion, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSdkVersionCode() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSdkVersionCode([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkVersionCode', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setVersionCode(String sdkVersionCode) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setVersionCode([\'sdkVersionCode\':$sdkVersionCode])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setVersionCode', {"sdkVersionCode": sdkVersionCode, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSdkRepo() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSdkRepo([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkRepo', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setSdkRepo(String sdkRepo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setSdkRepo([\'sdkRepo\':$sdkRepo])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSdkRepo', {"sdkRepo": sdkRepo, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSdkFlavor() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSdkFlavor([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkFlavor', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setFlavor(String sdkFlavor) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setFlavor([\'sdkFlavor\':$sdkFlavor])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setFlavor', {"sdkFlavor": sdkFlavor, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSdkMapKey() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSdkMapKey([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkMapKey', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setAppKey(String sdkMapKey) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setAppKey([\'sdkMapKey\':$sdkMapKey])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setAppKey', {"sdkMapKey": sdkMapKey, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> isCoreLogOn() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::isCoreLogOn([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::isCoreLogOn', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setCoreLogOn(bool coreLogOn) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setCoreLogOn([\'coreLogOn\':$coreLogOn])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogOn', {"coreLogOn": coreLogOn, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setSheetEnable(bool enable) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setSheetEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSheetEnable', {"enable": enable, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<bool> isSheetEnable() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::isSheetEnable([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::isSheetEnable', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getCoreLogReportUrl() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getCoreLogReportUrl([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogReportUrl', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setCoreLogReportUrl(String coreLogReportUrl) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setCoreLogReportUrl([\'coreLogReportUrl\':$coreLogReportUrl])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogReportUrl', {"coreLogReportUrl": coreLogReportUrl, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getCoreLogToken() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getCoreLogToken([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogToken', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setCoreLogToken(String coreLogToken) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setCoreLogToken([\'coreLogToken\':$coreLogToken])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogToken', {"coreLogToken": coreLogToken, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<java_io_File> getCoreLogDir() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getCoreLogDir([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogDir', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = java_io_File()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setCoreLogDir(java_io_File coreLogDir) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setCoreLogDir([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogDir', {"coreLogDir": coreLogDir, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<String> getSoLibName() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::getSoLibName([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSoLibName', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_tools_sheet_SheetManager_Options> setSoLibName(String soLibName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.tools.sheet.SheetManager.Options@$refId::setSoLibName([\'soLibName\':$soLibName])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSoLibName', {"soLibName": soLibName, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_tools_sheet_SheetManager_Options{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_tools_sheet_SheetManager_Options_Batch on List<com_tencent_map_tools_sheet_SheetManager_Options> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_UncaughtListener>> getUncaughtListener_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getUncaughtListener_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_UncaughtListener()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setUncaughtListener_batch(List<com_tencent_map_tools_sheet_SheetManager_UncaughtListener> uncaughtListener) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setUncaughtListener_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"uncaughtListener": uncaughtListener[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options_AdapterType>> getAdapterType_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getAdapterType_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => (__result__ as int).tocom_tencent_map_tools_sheet_SheetManager_Options_AdapterType()).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setAdapterType_batch(List<com_tencent_map_tools_sheet_SheetManager_Options_AdapterType> adapterType) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setAdapterType_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"adapterType": adapterType[__i__].toValue(), "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getPluginName_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getPluginName_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setSheetProjectName_batch(List<String> pluginName) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSheetProjectName_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"pluginName": pluginName[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getPluginUpdateUrl_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getPluginUpdateUrl_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setPluginUpdateUrl_batch(List<String> pluginUpdateUrl) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setPluginUpdateUrl_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"pluginUpdateUrl": pluginUpdateUrl[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSdkVersion_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkVersion_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setVersion_batch(List<String> sdkVersion) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setVersion_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"sdkVersion": sdkVersion[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSdkVersionCode_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkVersionCode_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setVersionCode_batch(List<String> sdkVersionCode) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setVersionCode_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"sdkVersionCode": sdkVersionCode[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSdkRepo_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkRepo_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setSdkRepo_batch(List<String> sdkRepo) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSdkRepo_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"sdkRepo": sdkRepo[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSdkFlavor_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkFlavor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setFlavor_batch(List<String> sdkFlavor) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setFlavor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"sdkFlavor": sdkFlavor[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSdkMapKey_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSdkMapKey_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setAppKey_batch(List<String> sdkMapKey) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setAppKey_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"sdkMapKey": sdkMapKey[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> isCoreLogOn_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::isCoreLogOn_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setCoreLogOn_batch(List<bool> coreLogOn) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogOn_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"coreLogOn": coreLogOn[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setSheetEnable_batch(List<bool> enable) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSheetEnable_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"enable": enable[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<bool>> isSheetEnable_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::isSheetEnable_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getCoreLogReportUrl_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogReportUrl_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setCoreLogReportUrl_batch(List<String> coreLogReportUrl) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogReportUrl_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"coreLogReportUrl": coreLogReportUrl[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getCoreLogToken_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogToken_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setCoreLogToken_batch(List<String> coreLogToken) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogToken_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"coreLogToken": coreLogToken[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<java_io_File>> getCoreLogDir_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getCoreLogDir_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => java_io_File()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setCoreLogDir_batch(List<java_io_File> coreLogDir) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setCoreLogDir_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"coreLogDir": coreLogDir[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<String>> getSoLibName_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::getSoLibName_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_tools_sheet_SheetManager_Options>> setSoLibName_batch(List<String> soLibName) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.tools.sheet.SheetManager.Options::setSoLibName_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"soLibName": soLibName[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_tools_sheet_SheetManager_Options()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}