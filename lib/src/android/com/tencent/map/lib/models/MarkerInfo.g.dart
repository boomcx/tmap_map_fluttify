// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_lib_models_MarkerInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.lib.models.MarkerInfo';

  @override
  final String tag__ = 'tmap_map_fluttify';

  static final int TYPE_2D_GEO_ANGLE = 0;
  static final int TYPE_2D_SCREEN_ANGLE = 1;
  static final int TYPE_2D_UI = 2;
  static final int TYPE_3D = 3;
  //endregion

  //region creators
  static Future<com_tencent_map_lib_models_MarkerInfo> create__double__double__String(double latitude, double longitude, String iconName) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_lib_models_MarkerInfo__double__double__String', {"latitude": latitude, "longitude": longitude, "iconName": iconName});
    final object = com_tencent_map_lib_models_MarkerInfo()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_lib_models_MarkerInfo>> create_batch__double__double__String(List<double> latitude, List<double> longitude, List<String> iconName) async {
    if (latitude.length != longitude.length || longitude.length != iconName.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_lib_models_MarkerInfo__double__double__String', [for (int __i__ = 0; __i__ < latitude.length; __i__++) {"latitude": latitude[__i__], "longitude": longitude[__i__], "iconName": iconName[__i__]}]);
  
    final List<com_tencent_map_lib_models_MarkerInfo> typedResult = resultBatch.map((result) => com_tencent_map_lib_models_MarkerInfo()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<com_tencent_map_lib_models_MarkerInfo> position(double latitude, double longitude) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::position([\'latitude\':$latitude, \'longitude\':$longitude])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::position', {"latitude": latitude, "longitude": longitude, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> iconName(String iconName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::iconName([\'iconName\':$iconName])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconName', {"iconName": iconName, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> type(int type) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::type([\'type\':$type])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::type', {"type": type, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> anchor(double x, double y) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::anchor([\'x\':$x, \'y\':$y])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::anchor', {"x": x, "y": y, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> rotation(double rotation) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::rotation([\'rotation\':$rotation])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::rotation', {"rotation": rotation, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> alpha(double alpha) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::alpha([\'alpha\':$alpha])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::alpha', {"alpha": alpha, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> scale(double x, double y) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::scale([\'x\':$x, \'y\':$y])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::scale', {"x": x, "y": y, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> avoidAnnotation(bool avoidAnnotation) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::avoidAnnotation([\'avoidAnnotation\':$avoidAnnotation])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::avoidAnnotation', {"avoidAnnotation": avoidAnnotation, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> interactive(bool interactive) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::interactive([\'interactive\':$interactive])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::interactive', {"interactive": interactive, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> displayLevel(int level) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::displayLevel([\'level\':$level])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::displayLevel', {"level": level, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> priority(int priority) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::priority([\'priority\':$priority])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::priority', {"priority": priority, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> forceLoad(bool forceLoad) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::forceLoad([\'forceLoad\':$forceLoad])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::forceLoad', {"forceLoad": forceLoad, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> minScaleLevel(int scaleLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::minScaleLevel([\'scaleLevel\':$scaleLevel])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::minScaleLevel', {"scaleLevel": scaleLevel, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> maxScaleLevel(int scaleLevel) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::maxScaleLevel([\'scaleLevel\':$scaleLevel])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::maxScaleLevel', {"scaleLevel": scaleLevel, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> visible(bool visibility) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::visible([\'visibility\':$visibility])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::visible', {"visibility": visibility, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> avoidOtherMarker(bool isAvoid) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::avoidOtherMarker([\'isAvoid\':$isAvoid])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::avoidOtherMarker', {"isAvoid": isAvoid, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> subMarkerInfo(com_tencent_map_lib_models_SubMarkerInfo subMarkerInfo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::subMarkerInfo([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::subMarkerInfo', {"subMarkerInfo": subMarkerInfo, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> iconWidth(int iconWidth) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::iconWidth([\'iconWidth\':$iconWidth])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconWidth', {"iconWidth": iconWidth, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_lib_models_MarkerInfo> iconHeight(int iconHeight) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.lib.models.MarkerInfo@$refId::iconHeight([\'iconHeight\':$iconHeight])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconHeight', {"iconHeight": iconHeight, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_lib_models_MarkerInfo()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_lib_models_MarkerInfo{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_lib_models_MarkerInfo_Batch on List<com_tencent_map_lib_models_MarkerInfo> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> position_batch(List<double> latitude, List<double> longitude) async {
    if (latitude.length != longitude.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::position_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"latitude": latitude[__i__], "longitude": longitude[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> iconName_batch(List<String> iconName) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconName_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"iconName": iconName[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> type_batch(List<int> type) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::type_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"type": type[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> anchor_batch(List<double> x, List<double> y) async {
    if (x.length != y.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::anchor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"x": x[__i__], "y": y[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> rotation_batch(List<double> rotation) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::rotation_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"rotation": rotation[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> alpha_batch(List<double> alpha) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::alpha_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"alpha": alpha[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> scale_batch(List<double> x, List<double> y) async {
    if (x.length != y.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::scale_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"x": x[__i__], "y": y[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> avoidAnnotation_batch(List<bool> avoidAnnotation) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::avoidAnnotation_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"avoidAnnotation": avoidAnnotation[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> interactive_batch(List<bool> interactive) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::interactive_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"interactive": interactive[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> displayLevel_batch(List<int> level) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::displayLevel_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"level": level[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> priority_batch(List<int> priority) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::priority_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"priority": priority[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> forceLoad_batch(List<bool> forceLoad) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::forceLoad_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"forceLoad": forceLoad[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> minScaleLevel_batch(List<int> scaleLevel) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::minScaleLevel_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"scaleLevel": scaleLevel[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> maxScaleLevel_batch(List<int> scaleLevel) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::maxScaleLevel_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"scaleLevel": scaleLevel[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> visible_batch(List<bool> visibility) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::visible_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"visibility": visibility[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> avoidOtherMarker_batch(List<bool> isAvoid) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::avoidOtherMarker_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"isAvoid": isAvoid[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> subMarkerInfo_batch(List<com_tencent_map_lib_models_SubMarkerInfo> subMarkerInfo) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::subMarkerInfo_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"subMarkerInfo": subMarkerInfo[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> iconWidth_batch(List<int> iconWidth) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconWidth_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"iconWidth": iconWidth[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_lib_models_MarkerInfo>> iconHeight_batch(List<int> iconHeight) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.MarkerInfo::iconHeight_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"iconHeight": iconHeight[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_lib_models_MarkerInfo()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}