// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_lib_models_CircleInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.lib.models.CircleInfo';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_map_lib_models_CircleInfo> create__() async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_lib_models_CircleInfo__', );
    final object = com_tencent_map_lib_models_CircleInfo()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_lib_models_CircleInfo>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_lib_models_CircleInfo__', {'length': length});
  
    final List<com_tencent_map_lib_models_CircleInfo> typedResult = resultBatch.map((result) => com_tencent_map_lib_models_CircleInfo()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_centerX() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_centerX", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_centerY() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_centerY", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<double> get_radius() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_radius", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_fillColor() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_fillColor", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_borderColor() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_borderColor", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_borderWidth() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_borderWidth", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<bool> get_drawFill() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_drawFill", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<bool> get_drawBorder() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_drawBorder", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<bool> get_isVisible() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_isVisible", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_zIndex() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_zIndex", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_level() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_level", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_centerX(int centerX) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_centerX', <String, dynamic>{'__this__': this, "centerX": centerX});
  
  
  }
  
  Future<void> set_centerY(int centerY) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_centerY', <String, dynamic>{'__this__': this, "centerY": centerY});
  
  
  }
  
  Future<void> set_radius(double radius) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_radius', <String, dynamic>{'__this__': this, "radius": radius});
  
  
  }
  
  Future<void> set_fillColor(int fillColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_fillColor', <String, dynamic>{'__this__': this, "fillColor": fillColor});
  
  
  }
  
  Future<void> set_borderColor(int borderColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_borderColor', <String, dynamic>{'__this__': this, "borderColor": borderColor});
  
  
  }
  
  Future<void> set_borderWidth(int borderWidth) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_borderWidth', <String, dynamic>{'__this__': this, "borderWidth": borderWidth});
  
  
  }
  
  Future<void> set_drawFill(bool drawFill) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_drawFill', <String, dynamic>{'__this__': this, "drawFill": drawFill});
  
  
  }
  
  Future<void> set_drawBorder(bool drawBorder) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_drawBorder', <String, dynamic>{'__this__': this, "drawBorder": drawBorder});
  
  
  }
  
  Future<void> set_isVisible(bool isVisible) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_isVisible', <String, dynamic>{'__this__': this, "isVisible": isVisible});
  
  
  }
  
  Future<void> set_zIndex(int zIndex) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_zIndex', <String, dynamic>{'__this__': this, "zIndex": zIndex});
  
  
  }
  
  Future<void> set_level(int level) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_level', <String, dynamic>{'__this__': this, "level": level});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_lib_models_CircleInfo{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_lib_models_CircleInfo_Batch on List<com_tencent_map_lib_models_CircleInfo> {
  //region getters
  Future<List<int>> get_centerX_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_centerX_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_centerY_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_centerY_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_radius_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_radius_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_fillColor_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_fillColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_borderColor_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_borderColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_borderWidth_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_borderWidth_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_drawFill_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_drawFill_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_drawBorder_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_drawBorder_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_isVisible_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_isVisible_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_zIndex_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_zIndex_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_level_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CircleInfo::get_level_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_centerX_batch(List<int> centerX) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_centerX_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "centerX": centerX[__i__]}]);
  
  
  }
  
  Future<void> set_centerY_batch(List<int> centerY) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_centerY_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "centerY": centerY[__i__]}]);
  
  
  }
  
  Future<void> set_radius_batch(List<double> radius) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_radius_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "radius": radius[__i__]}]);
  
  
  }
  
  Future<void> set_fillColor_batch(List<int> fillColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_fillColor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "fillColor": fillColor[__i__]}]);
  
  
  }
  
  Future<void> set_borderColor_batch(List<int> borderColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_borderColor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "borderColor": borderColor[__i__]}]);
  
  
  }
  
  Future<void> set_borderWidth_batch(List<int> borderWidth) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_borderWidth_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "borderWidth": borderWidth[__i__]}]);
  
  
  }
  
  Future<void> set_drawFill_batch(List<bool> drawFill) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_drawFill_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "drawFill": drawFill[__i__]}]);
  
  
  }
  
  Future<void> set_drawBorder_batch(List<bool> drawBorder) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_drawBorder_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "drawBorder": drawBorder[__i__]}]);
  
  
  }
  
  Future<void> set_isVisible_batch(List<bool> isVisible) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_isVisible_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "isVisible": isVisible[__i__]}]);
  
  
  }
  
  Future<void> set_zIndex_batch(List<int> zIndex) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_zIndex_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "zIndex": zIndex[__i__]}]);
  
  
  }
  
  Future<void> set_level_batch(List<int> level) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CircleInfo::set_level_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "level": level[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}