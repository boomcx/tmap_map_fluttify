// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_lib_models_CityTrafficInfo extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.lib.models.CityTrafficInfo';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_map_lib_models_CityTrafficInfo> create__() async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_lib_models_CityTrafficInfo__', );
    final object = com_tencent_map_lib_models_CityTrafficInfo()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_lib_models_CityTrafficInfo>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_lib_models_CityTrafficInfo__', {'length': length});
  
    final List<com_tencent_map_lib_models_CityTrafficInfo> typedResult = resultBatch.map((result) => com_tencent_map_lib_models_CityTrafficInfo()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<bool> get_isChina() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_isChina", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<bool> get_isIncre() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_isIncre", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<int> get_timeStamp() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_timeStamp", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_isChina(bool isChina) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_isChina', <String, dynamic>{'__this__': this, "isChina": isChina});
  
  
  }
  
  Future<void> set_isIncre(bool isIncre) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_isIncre', <String, dynamic>{'__this__': this, "isIncre": isIncre});
  
  
  }
  
  Future<void> set_timeStamp(int timeStamp) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_timeStamp', <String, dynamic>{'__this__': this, "timeStamp": timeStamp});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_lib_models_CityTrafficInfo{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_lib_models_CityTrafficInfo_Batch on List<com_tencent_map_lib_models_CityTrafficInfo> {
  //region getters
  Future<List<bool>> get_isChina_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_isChina_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_isIncre_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_isIncre_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<int>> get_timeStamp_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.lib.models.CityTrafficInfo::get_timeStamp_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_isChina_batch(List<bool> isChina) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_isChina_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "isChina": isChina[__i__]}]);
  
  
  }
  
  Future<void> set_isIncre_batch(List<bool> isIncre) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_isIncre_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "isIncre": isIncre[__i__]}]);
  
  
  }
  
  Future<void> set_timeStamp_batch(List<int> timeStamp) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.lib.models.CityTrafficInfo::set_timeStamp_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "timeStamp": timeStamp[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}