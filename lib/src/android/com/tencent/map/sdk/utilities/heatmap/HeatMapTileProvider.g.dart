// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

/* abstract */ class com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider extends java_lang_Object with com_tencent_tencentmap_mapsdk_maps_model_TileProvider {
  //region constants
  static const String name__ = 'com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider';

  @override
  final String tag__ = 'tmap_map_fluttify';

  static final int DEFAULT_RADIUS = 40;
  static final double DEFAULT_OPACITY = 0.6;
  //endregion

  //region creators
  
  //endregion

  //region getters
  static Future<com_tencent_map_sdk_utilities_heatmap_Gradient> get_static_DEFAULT_GRADIENT() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::get_DEFAULT_GRADIENT", );
    return __result__ == null ? null : (com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = __result__);
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<void> setWeightedData(List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setWeightedData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setWeightedData', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setData(List<com_tencent_tencentmap_mapsdk_maps_model_LatLng> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setData', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setGradient(com_tencent_map_sdk_utilities_heatmap_Gradient var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setGradient([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setGradient', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setRadius(int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setRadius([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setRadius', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setOpacity(double var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setOpacity([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setOpacity', {"var1": var1, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setHeatTileGenerator(com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_HeatTileGenerator var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider@$refId::setHeatTileGenerator([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setHeatTileGenerator', {"__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setHeatTileGenerator::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.HeatTileGenerator::generateKernel':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: generateKernel([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                var1?.generateKernel(args['var1']);
                break;
              case 'Callback::com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.HeatTileGenerator::generateColorMap':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: generateColorMap([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                var1?.generateColorMap(args['var1']);
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Batch on List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider> {
  //region getters
  Future<List<com_tencent_map_sdk_utilities_heatmap_Gradient>> get_static_DEFAULT_GRADIENT_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::get_DEFAULT_GRADIENT_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> setWeightedData_batch(List<List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng>> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setWeightedData_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setData_batch(List<List<com_tencent_tencentmap_mapsdk_maps_model_LatLng>> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setData_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setGradient_batch(List<com_tencent_map_sdk_utilities_heatmap_Gradient> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setGradient_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setRadius_batch(List<int> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setRadius_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setOpacity_batch(List<double> var1) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider::setOpacity_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"var1": var1[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}