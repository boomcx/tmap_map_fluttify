// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> create__() async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder__', );
    final object = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder__', {'length': length});
  
    final List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> typedResult = resultBatch.map((result) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> data(List<com_tencent_tencentmap_mapsdk_maps_model_LatLng> val) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::data([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::data', {"val": val, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> weightedData(List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng> val) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::weightedData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::weightedData', {"val": val, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> gradient(com_tencent_map_sdk_utilities_heatmap_Gradient val) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::gradient([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::gradient', {"val": val, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> opacity(double val) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::opacity([\'val\':$val])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::opacity', {"val": val, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> radius(int radius) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::radius([\'radius\':$radius])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::radius', {"radius": radius, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> tileGenerator(com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_HeatTileGenerator tileGenerator) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::tileGenerator([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::tileGenerator', {"__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::tileGenerator::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.HeatTileGenerator::generateKernel':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: generateKernel([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                tileGenerator?.generateKernel(args['var1']);
                break;
              case 'Callback::com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.HeatTileGenerator::generateColorMap':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: generateColorMap([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                tileGenerator?.generateColorMap(args['var1']);
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> readyListener(com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_OnHeatMapReadyListener listener) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::readyListener([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::readyListener', {"__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::readyListener::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.OnHeatMapReadyListener::onHeatMapReady':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onHeatMapReady([])');
                }
          
                // handle the native call
                listener?.onHeatMapReady();
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng>> getData() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::getData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getData', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<String>().map((__it__) => com_tencent_map_sdk_utilities_heatmap_WeightedLatLng()..refId = __it__).toList();
      return __return__;
    }
  }
  
  
  Future<int> getRadius() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::getRadius([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getRadius', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_Gradient> getGradient() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::getGradient([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getGradient', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<double> getOpacity() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::getOpacity([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getOpacity', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider> build(com_tencent_tencentmap_mapsdk_maps_TencentMap map) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder@$refId::build([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::build', {"map": map, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder_Batch on List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> data_batch(List<List<com_tencent_tencentmap_mapsdk_maps_model_LatLng>> val) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::data_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"val": val[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> weightedData_batch(List<List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng>> val) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::weightedData_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"val": val[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> gradient_batch(List<com_tencent_map_sdk_utilities_heatmap_Gradient> val) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::gradient_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"val": val[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> opacity_batch(List<double> val) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::opacity_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"val": val[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder>> radius_batch(List<int> radius) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::radius_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"radius": radius[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider_Builder()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<List<com_tencent_map_sdk_utilities_heatmap_WeightedLatLng>>> getData_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getData_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => (__result__ as List).cast<String>().map((__it__) => com_tencent_map_sdk_utilities_heatmap_WeightedLatLng()..refId = __it__).toList()).toList();
      return typedResult;
    }
  }
  
  
  Future<List<int>> getRadius_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getRadius_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_Gradient>> getGradient_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getGradient_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<double>> getOpacity_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::getOpacity_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider>> build_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMap> map) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.HeatMapTileProvider.Builder::build_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"map": map[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_map_sdk_utilities_heatmap_HeatMapTileProvider()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}