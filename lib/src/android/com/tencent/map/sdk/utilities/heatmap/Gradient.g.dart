// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_map_sdk_utilities_heatmap_Gradient extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.map.sdk.utilities.heatmap.Gradient';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_map_sdk_utilities_heatmap_Gradient> create__intArray__floatArray(Int32List colors, Float64List startPoints) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray', {"colors": colors, "startPoints": startPoints});
    final object = com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = refId;
    return object;
  }
  
  static Future<com_tencent_map_sdk_utilities_heatmap_Gradient> create__intArray__floatArray__int(Int32List colors, Float64List startPoints, int colorMapSize) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray__int', {"colors": colors, "startPoints": startPoints, "colorMapSize": colorMapSize});
    final object = com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_map_sdk_utilities_heatmap_Gradient>> create_batch__intArray__floatArray(List<Int32List> colors, List<Float64List> startPoints) async {
    if (colors.length != startPoints.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray', [for (int __i__ = 0; __i__ < colors.length; __i__++) {"colors": colors[__i__], "startPoints": startPoints[__i__]}]);
  
    final List<com_tencent_map_sdk_utilities_heatmap_Gradient> typedResult = resultBatch.map((result) => com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = result).toList();
    return typedResult;
  }
  
  static Future<List<com_tencent_map_sdk_utilities_heatmap_Gradient>> create_batch__intArray__floatArray__int(List<Int32List> colors, List<Float64List> startPoints, List<int> colorMapSize) async {
    if (colors.length != startPoints.length || startPoints.length != colorMapSize.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_map_sdk_utilities_heatmap_Gradient__intArray__floatArray__int', [for (int __i__ = 0; __i__ < colors.length; __i__++) {"colors": colors[__i__], "startPoints": startPoints[__i__], "colorMapSize": colorMapSize[__i__]}]);
  
    final List<com_tencent_map_sdk_utilities_heatmap_Gradient> typedResult = resultBatch.map((result) => com_tencent_map_sdk_utilities_heatmap_Gradient()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_mColorMapSize() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mColorMapSize", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<Int32List> get_mColors() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mColors", {'__this__': this});
    return __result__ == null ? null : (__result__ as Int32List);
  }
  
  Future<Float64List> get_mStartPoints() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mStartPoints", {'__this__': this});
    return __result__ == null ? null : (__result__ as Float64List);
  }
  
  //endregion

  //region setters
  Future<void> set_mColors(Int32List mColors) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::set_mColors', <String, dynamic>{'__this__': this, "mColors": mColors});
  
  
  }
  
  Future<void> set_mStartPoints(Float64List mStartPoints) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::set_mStartPoints', <String, dynamic>{'__this__': this, "mStartPoints": mStartPoints});
  
  
  }
  
  //endregion

  //region methods
  
  Future<Int32List> generateColorMap(double opacity) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.utilities.heatmap.Gradient@$refId::generateColorMap([\'opacity\':$opacity])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::generateColorMap', {"opacity": opacity, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__ as Int32List;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_map_sdk_utilities_heatmap_Gradient{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_map_sdk_utilities_heatmap_Gradient_Batch on List<com_tencent_map_sdk_utilities_heatmap_Gradient> {
  //region getters
  Future<List<int>> get_mColorMapSize_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mColorMapSize_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<Int32List>> get_mColors_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mColors_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<Int32List>().map((__result__) => __result__ as Int32List).toList();
    return typedResult;
  }
  
  Future<List<Float64List>> get_mStartPoints_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.map.sdk.utilities.heatmap.Gradient::get_mStartPoints_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<Float64List>().map((__result__) => __result__ as Float64List).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_mColors_batch(List<Int32List> mColors) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::set_mColors_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "mColors": mColors[__i__]}]);
  
  
  }
  
  Future<void> set_mStartPoints_batch(List<Float64List> mStartPoints) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::set_mStartPoints_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "mStartPoints": mStartPoints[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<Int32List>> generateColorMap_batch(List<double> opacity) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.utilities.heatmap.Gradient::generateColorMap_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"opacity": opacity[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<Int32List>().map((__result__) => __result__ as Int32List).toList();
      return typedResult;
    }
  }
  
  //endregion
}