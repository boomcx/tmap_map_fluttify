// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class _com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent_SUB extends java_lang_Object with com_tencent_tencentmap_mapsdk_maps_TencentMapComponent_Component, com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent {}

mixin com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent on com_tencent_tencentmap_mapsdk_maps_TencentMapComponent_Component {
  

  static com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent subInstance() => _com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent_SUB();

  @override
  final String tag__ = 'tmap_map_fluttify';

  

  

  
  Future<bool> isOfflineMapEnable() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent@$refId::isOfflineMapEnable([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::isOfflineMapEnable', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> syncLatestData(com_tencent_map_sdk_comps_offlinemap_OfflineMapSyncedListener var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent@$refId::syncLatestData([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::syncLatestData', {"__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::syncLatestData::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.map.sdk.comps.offlinemap.OfflineMapSyncedListener::onSynced':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onSynced([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                var1?.onSynced(args['var1']);
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<List<com_tencent_map_sdk_comps_offlinemap_OfflineItem>> getOfflineItemList() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent@$refId::getOfflineItemList([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::getOfflineItemList', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<String>().map((__it__) => com_tencent_map_sdk_comps_offlinemap_OfflineItem()..refId = __it__).toList();
      return __return__;
    }
  }
  
  
  Future<void> getOfflineItemList__com_tencent_map_tools_Callback_List_com_tencent_map_sdk_comps_offlinemap_OfflineItem__(com_tencent_map_tools_Callback<List<com_tencent_map_sdk_comps_offlinemap_OfflineItem>> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent@$refId::getOfflineItemList([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::getOfflineItemList__com_tencent_map_tools_Callback_List_com_tencent_map_sdk_comps_offlinemap_OfflineItem__', {"__this__": this});
  
  
    // handle native call
    MethodChannel('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::getOfflineItemList__com_tencent_map_tools_Callback_List_com_tencent_map_sdk_comps_offlinemap_OfflineItem__::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::com.tencent.map.tools.Callback::callback':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: callback([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                var1?.callback((args['var1'] as List).cast<String>().map((__it__) => TypeOpTmapMapFluttifyAndroid(__it__).as__<com_tencent_map_sdk_comps_offlinemap_OfflineItem>()).toList());
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
}

extension com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent_Batch on List<com_tencent_map_sdk_comps_offlinemap_OfflineMapComponent> {
  //region methods
  
  Future<List<bool>> isOfflineMapEnable_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::isOfflineMapEnable_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<List<com_tencent_map_sdk_comps_offlinemap_OfflineItem>>> getOfflineItemList_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.map.sdk.comps.offlinemap.OfflineMapComponent::getOfflineItemList_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => (__result__ as List).cast<String>().map((__it__) => com_tencent_map_sdk_comps_offlinemap_OfflineItem()..refId = __it__).toList()).toList();
      return typedResult;
    }
  }
  
  //endregion
}