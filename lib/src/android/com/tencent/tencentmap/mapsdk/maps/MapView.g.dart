// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_tencentmap_mapsdk_maps_MapView extends com_tencent_tencentmap_mapsdk_maps_BaseMapView  {
  //region constants
  static const String name__ = 'com.tencent.tencentmap.mapsdk.maps.MapView';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<com_tencent_tencentmap_mapsdk_maps_MapView> create__android_content_Context(android_content_Context context) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context', {"context": context});
    final object = com_tencent_tencentmap_mapsdk_maps_MapView()..refId = refId;
    return object;
  }
  
  static Future<com_tencent_tencentmap_mapsdk_maps_MapView> create__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions(android_content_Context context, com_tencent_tencentmap_mapsdk_maps_TencentMapOptions options) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions', {"context": context, "options": options});
    final object = com_tencent_tencentmap_mapsdk_maps_MapView()..refId = refId;
    return object;
  }
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_MapView>> create_batch__android_content_Context(List<android_content_Context> context) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__]}]);
  
    final List<com_tencent_tencentmap_mapsdk_maps_MapView> typedResult = resultBatch.map((result) => com_tencent_tencentmap_mapsdk_maps_MapView()..refId = result).toList();
    return typedResult;
  }
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_MapView>> create_batch__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions(List<android_content_Context> context, List<com_tencent_tencentmap_mapsdk_maps_TencentMapOptions> options) async {
    if (context.length != options.length) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchcom_tencent_tencentmap_mapsdk_maps_MapView__android_content_Context__com_tencent_tencentmap_mapsdk_maps_TencentMapOptions', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "options": options[__i__]}]);
  
    final List<com_tencent_tencentmap_mapsdk_maps_MapView> typedResult = resultBatch.map((result) => com_tencent_tencentmap_mapsdk_maps_MapView()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<bool> dispatchTouchEvent(android_view_MotionEvent ev, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::dispatchTouchEvent([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::dispatchTouchEvent', {"ev": ev, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setOnTop(bool isOnTop, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::setOnTop([\'isOnTop\':$isOnTop])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::setOnTop', {"isOnTop": isOnTop, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> setMapPadding(int left, int top, int right, int bottom, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::setMapPadding([\'left\':$left, \'top\':$top, \'right\':$right, \'bottom\':$bottom])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::setMapPadding', {"left": left, "top": top, "right": right, "bottom": bottom, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<Int32List> getMapPadding({bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::getMapPadding([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::getMapPadding', {"__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__ as Int32List;
      return __return__;
    }
  }
  
  
  Future<void> onSizeChanged(int w, int h, int oldw, int oldh, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::onSizeChanged([\'w\':$w, \'h\':$h, \'oldw\':$oldw, \'oldh\':$oldh])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::onSizeChanged', {"w": w, "h": h, "oldw": oldw, "oldh": oldh, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> onSurfaceChanged(Object surfaceTexture, int width, int height, {bool viewChannel = true}) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.MapView@$refId::onSurfaceChanged([\'surfaceTexture\':$surfaceTexture, \'width\':$width, \'height\':$height])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::onSurfaceChanged', {"surfaceTexture": surfaceTexture, "width": width, "height": height, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_tencentmap_mapsdk_maps_MapView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_tencentmap_mapsdk_maps_MapView_Batch on List<com_tencent_tencentmap_mapsdk_maps_MapView> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<bool>> dispatchTouchEvent_batch(List<android_view_MotionEvent> ev, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::dispatchTouchEvent_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"ev": ev[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setOnTop_batch(List<bool> isOnTop, {bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::setOnTop_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"isOnTop": isOnTop[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> setMapPadding_batch(List<int> left, List<int> top, List<int> right, List<int> bottom, {bool viewChannel = true}) async {
    if (left.length != top.length || top.length != right.length || right.length != bottom.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::setMapPadding_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"left": left[__i__], "top": top[__i__], "right": right[__i__], "bottom": bottom[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<Int32List>> getMapPadding_batch({bool viewChannel = true}) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::getMapPadding_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<Int32List>().map((__result__) => __result__ as Int32List).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> onSizeChanged_batch(List<int> w, List<int> h, List<int> oldw, List<int> oldh, {bool viewChannel = true}) async {
    if (w.length != h.length || h.length != oldw.length || oldw.length != oldh.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::onSizeChanged_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"w": w[__i__], "h": h[__i__], "oldw": oldw[__i__], "oldh": oldh[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> onSurfaceChanged_batch(List<Object> surfaceTexture, List<int> width, List<int> height, {bool viewChannel = true}) async {
    if (surfaceTexture.length != width.length || width.length != height.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel(viewChannel ? 'me.yohom/tmap_map_fluttify/com_tencent_tencentmap_mapsdk_maps_MapView' : 'me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.MapView::onSurfaceChanged_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"surfaceTexture": surfaceTexture[__i__], "width": width[__i__], "height": height[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}