// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptorFactory extends java_lang_Object  {
  //region constants
  static const String name__ = 'com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  static Future<double> get_static_HUE_RED() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_RED", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_ORANGE() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_ORANGE", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_YELLOW() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_YELLOW", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_GREEN() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_GREEN", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_CYAN() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_CYAN", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_AZURE() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_AZURE", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_BLUE() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_BLUE", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_VIOLET() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_VIOLET", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_MAGENTA() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_MAGENTA", );
    return __result__ == null ? null : (__result__);
  }
  
  static Future<double> get_static_HUE_ROSE() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_ROSE", );
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> attachMapContext(com_tencent_tencentmap_mapsdk_maps_TencentMapContext mapContext) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::attachMapContext([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::attachMapContext', {"mapContext": mapContext});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  static Future<void> detachMapContext(com_tencent_tencentmap_mapsdk_maps_TencentMapContext mapContext) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::detachMapContext([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::detachMapContext', {"mapContext": mapContext});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromResource__int(int resId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource([\'resId\':$resId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource__int', {"resId": resId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromAsset__String(String assetName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset([\'assetName\':$assetName])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset__String', {"assetName": assetName});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromFile__String(String filename) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile([\'filename\':$filename])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile__String', {"filename": filename});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromPath__String(String filename) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath([\'filename\':$filename])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath__String', {"filename": filename});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromBitmap__android_graphics_Bitmap(android_graphics_Bitmap bitmap) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap__android_graphics_Bitmap', {"bitmap": bitmap});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromView__android_view_View(android_view_View view) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView__android_view_View', {"view": view});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> defaultMarker() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> defaultMarker__double(double color) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker([\'color\':$color])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__double', {"color": color});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromResource__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__int(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, int resId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource([\'resId\':$resId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__int', {"context": context, "resId": resId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromAsset__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, String assetName) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset([\'assetName\':$assetName])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String', {"context": context, "assetName": assetName});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromFile__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, String filename) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile([\'filename\':$filename])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String', {"context": context, "filename": filename});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromPath__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, String filename) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath([\'filename\':$filename])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String', {"context": context, "filename": filename});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext', {"context": context});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__double(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, double color) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker([\'color\':$color])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__double', {"context": context, "color": color});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromBitmap__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_graphics_Bitmap(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, android_graphics_Bitmap bitmap) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_graphics_Bitmap', {"context": context, "bitmap": bitmap});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  
  static Future<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor> fromView__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_view_View(com_tencent_tencentmap_mapsdk_maps_TencentMapContext context, android_view_View view) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_view_View', {"context": context, "view": view});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptorFactory{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptorFactory_Batch on List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptorFactory> {
  //region getters
  Future<List<double>> get_static_HUE_RED_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_RED_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_ORANGE_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_ORANGE_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_YELLOW_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_YELLOW_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_GREEN_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_GREEN_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_CYAN_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_CYAN_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_AZURE_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_AZURE_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_BLUE_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_BLUE_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_VIOLET_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_VIOLET_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_MAGENTA_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_MAGENTA_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_static_HUE_ROSE_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::get_HUE_ROSE_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> attachMapContext_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> mapContext) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::attachMapContext_batch', [for (int __i__ = 0; __i__ < mapContext.length; __i__++) {"mapContext": mapContext[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<void>> detachMapContext_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> mapContext) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::detachMapContext_batch', [for (int __i__ = 0; __i__ < mapContext.length; __i__++) {"mapContext": mapContext[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromResource__int_batch(List<int> resId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource__int_batch', [for (int __i__ = 0; __i__ < resId.length; __i__++) {"resId": resId[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromAsset__String_batch(List<String> assetName) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset__String_batch', [for (int __i__ = 0; __i__ < assetName.length; __i__++) {"assetName": assetName[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromFile__String_batch(List<String> filename) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile__String_batch', [for (int __i__ = 0; __i__ < filename.length; __i__++) {"filename": filename[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromPath__String_batch(List<String> filename) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath__String_batch', [for (int __i__ = 0; __i__ < filename.length; __i__++) {"filename": filename[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromBitmap__android_graphics_Bitmap_batch(List<android_graphics_Bitmap> bitmap) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap__android_graphics_Bitmap_batch', [for (int __i__ = 0; __i__ < bitmap.length; __i__++) {"bitmap": bitmap[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromView__android_view_View_batch(List<android_view_View> view) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView__android_view_View_batch', [for (int __i__ = 0; __i__ < view.length; __i__++) {"view": view[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> defaultMarker_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker_batch', );
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> defaultMarker__double_batch(List<double> color) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__double_batch', [for (int __i__ = 0; __i__ < color.length; __i__++) {"color": color[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromResource__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__int_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<int> resId) async {
    if (context.length != resId.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromResource__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__int_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "resId": resId[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromAsset__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<String> assetName) async {
    if (context.length != assetName.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromAsset__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "assetName": assetName[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromFile__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<String> filename) async {
    if (context.length != filename.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromFile__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "filename": filename[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromPath__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<String> filename) async {
    if (context.length != filename.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromPath__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__String_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "filename": filename[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__double_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<double> color) async {
    if (context.length != color.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::defaultMarker__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__double_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "color": color[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromBitmap__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_graphics_Bitmap_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<android_graphics_Bitmap> bitmap) async {
    if (context.length != bitmap.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromBitmap__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_graphics_Bitmap_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "bitmap": bitmap[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  static Future<List<com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor>> fromView__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_view_View_batch(List<com_tencent_tencentmap_mapsdk_maps_TencentMapContext> context, List<android_view_View> view) async {
    if (context.length != view.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('com.tencent.tencentmap.mapsdk.maps.model.BitmapDescriptorFactory::fromView__com_tencent_tencentmap_mapsdk_maps_TencentMapContext__android_view_View_batch', [for (int __i__ = 0; __i__ < context.length; __i__++) {"context": context[__i__], "view": view[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => com_tencent_tencentmap_mapsdk_maps_model_BitmapDescriptor()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}