// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:tmap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

Future<QCoordinateSpan> QCoordinateSpanMake(double latitudeDelta, double longitudeDelta) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QCoordinateSpanMake::QCoordinateSpanMake([\'latitudeDelta\':$latitudeDelta, \'longitudeDelta\':$longitudeDelta])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QCoordinateSpanMake::QCoordinateSpanMake', {"latitudeDelta": latitudeDelta, "longitudeDelta": longitudeDelta});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateSpan()..refId = __result__;
  }
}

Future<QCoordinateRegion> QCoordinateRegionMake(CLLocationCoordinate2D centerCoordinate, QCoordinateSpan span) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QCoordinateRegionMake::QCoordinateRegionMake([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QCoordinateRegionMake::QCoordinateRegionMake', {"centerCoordinate": centerCoordinate, "span": span});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateRegion()..refId = __result__;
  }
}

Future<QMapPoint> QMapPointMake(double x, double y) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapPointMake::QMapPointMake([\'x\':$x, \'y\':$y])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapPointMake::QMapPointMake', {"x": x, "y": y});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapPoint()..refId = __result__;
  }
}

Future<QMapSize> QMapSizeMake(double width, double height) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapSizeMake::QMapSizeMake([\'width\':$width, \'height\':$height])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapSizeMake::QMapSizeMake', {"width": width, "height": height});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapSize()..refId = __result__;
  }
}

Future<QMapRect> QMapRectMake(double x, double y, double width, double height) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectMake::QMapRectMake([\'x\':$x, \'y\':$y, \'width\':$width, \'height\':$height])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectMake::QMapRectMake', {"x": x, "y": y, "width": width, "height": height});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<double> QMapRectGetMinX(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMinX::QMapRectGetMinX([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMinX::QMapRectGetMinX', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetMinY(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMinY::QMapRectGetMinY([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMinY::QMapRectGetMinY', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetMidX(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMidX::QMapRectGetMidX([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMidX::QMapRectGetMidX', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetMidY(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMidY::QMapRectGetMidY([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMidY::QMapRectGetMidY', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetMaxX(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMaxX::QMapRectGetMaxX([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMaxX::QMapRectGetMaxX', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetMaxY(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetMaxY::QMapRectGetMaxY([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetMaxY::QMapRectGetMaxY', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetWidth(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetWidth::QMapRectGetWidth([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetWidth::QMapRectGetWidth', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapRectGetHeight(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectGetHeight::QMapRectGetHeight([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectGetHeight::QMapRectGetHeight', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapPointEqualToPoint(QMapPoint point1, QMapPoint point2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapPointEqualToPoint::QMapPointEqualToPoint([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapPointEqualToPoint::QMapPointEqualToPoint', {"point1": point1, "point2": point2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapSizeEqualToSize(QMapSize size1, QMapSize size2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapSizeEqualToSize::QMapSizeEqualToSize([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapSizeEqualToSize::QMapSizeEqualToSize', {"size1": size1, "size2": size2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapRectEqualToRect(QMapRect rect1, QMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectEqualToRect::QMapRectEqualToRect([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectEqualToRect::QMapRectEqualToRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapRectIsNull(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectIsNull::QMapRectIsNull([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectIsNull::QMapRectIsNull', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapRectIsEmpty(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectIsEmpty::QMapRectIsEmpty([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectIsEmpty::QMapRectIsEmpty', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapRectContainsPoint(QMapRect rect, QMapPoint point) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectContainsPoint::QMapRectContainsPoint([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectContainsPoint::QMapRectContainsPoint', {"rect": rect, "point": point});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<QMapRect> QMapRectUnionPoint(QMapRect rect, QMapPoint point) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectUnionPoint::QMapRectUnionPoint([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectUnionPoint::QMapRectUnionPoint', {"rect": rect, "point": point});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<QMapRect> QMapRectUnion(QMapRect rect1, QMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectUnion::QMapRectUnion([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectUnion::QMapRectUnion', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<bool> QMapRectIntersectsRect(QMapRect rect1, QMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectIntersectsRect::QMapRectIntersectsRect([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectIntersectsRect::QMapRectIntersectsRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QMapRectContainsRect(QMapRect rect1, QMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectContainsRect::QMapRectContainsRect([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectContainsRect::QMapRectContainsRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<String> QStringFromMapPoint(QMapPoint point) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QStringFromMapPoint::QStringFromMapPoint([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QStringFromMapPoint::QStringFromMapPoint', {"point": point});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<String> QStringFromMapSize(QMapSize size) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QStringFromMapSize::QStringFromMapSize([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QStringFromMapSize::QStringFromMapSize', {"size": size});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<String> QStringFromMapRect(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QStringFromMapRect::QStringFromMapRect([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QStringFromMapRect::QStringFromMapRect', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<QMapPoint> QMapPointForCoordinate(CLLocationCoordinate2D coordinate) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapPointForCoordinate::QMapPointForCoordinate([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapPointForCoordinate::QMapPointForCoordinate', {"coordinate": coordinate});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapPoint()..refId = __result__;
  }
}

Future<CLLocationCoordinate2D> QCoordinateForMapPoint(QMapPoint mapPoint) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QCoordinateForMapPoint::QCoordinateForMapPoint([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QCoordinateForMapPoint::QCoordinateForMapPoint', {"mapPoint": mapPoint});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return CLLocationCoordinate2D()..refId = __result__;
  }
}

Future<QCoordinateRegion> QCoordinateRegionForMapRect(QMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QCoordinateRegionForMapRect::QCoordinateRegionForMapRect([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QCoordinateRegionForMapRect::QCoordinateRegionForMapRect', {"rect": rect});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateRegion()..refId = __result__;
  }
}

Future<QMapRect> QMapRectForCoordinateRegion(QCoordinateRegion region) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapRectForCoordinateRegion::QMapRectForCoordinateRegion([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapRectForCoordinateRegion::QMapRectForCoordinateRegion', {"region": region});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<double> QMetersPerMapPointAtLatitude(double latitude) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMetersPerMapPointAtLatitude::QMetersPerMapPointAtLatitude([\'latitude\':$latitude])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMetersPerMapPointAtLatitude::QMetersPerMapPointAtLatitude', {"latitude": latitude});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMapPointsPerMeterAtLatitude(double latitude) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMapPointsPerMeterAtLatitude::QMapPointsPerMeterAtLatitude([\'latitude\':$latitude])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapPointsPerMeterAtLatitude::QMapPointsPerMeterAtLatitude', {"latitude": latitude});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<QCoordinateRegion> QCoordinateRegionMakeWithDistance(CLLocationCoordinate2D centerCoordinate, double latitudinalMeters, double longitudinalMeters) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QCoordinateRegionMakeWithDistance::QCoordinateRegionMakeWithDistance([\'latitudinalMeters\':$latitudinalMeters, \'longitudinalMeters\':$longitudinalMeters])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QCoordinateRegionMakeWithDistance::QCoordinateRegionMakeWithDistance', {"centerCoordinate": centerCoordinate, "latitudinalMeters": latitudinalMeters, "longitudinalMeters": longitudinalMeters});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateRegion()..refId = __result__;
  }
}

Future<bool> QPolygonContainsPoint(QMapPoint point, List<QMapPoint> polygon, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QPolygonContainsPoint::QPolygonContainsPoint([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolygonContainsPoint::QPolygonContainsPoint', {"point": point, "polygon": polygon, "count": count});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<bool> QPolygonContainsCoordinate(CLLocationCoordinate2D coordinate, List<CLLocationCoordinate2D> polygon, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QPolygonContainsCoordinate::QPolygonContainsCoordinate([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolygonContainsCoordinate::QPolygonContainsCoordinate', {"coordinate": coordinate, "polygon": polygon, "count": count});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMetersBetweenMapPoints(QMapPoint a, QMapPoint b) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMetersBetweenMapPoints::QMetersBetweenMapPoints([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMetersBetweenMapPoints::QMetersBetweenMapPoints', {"a": a, "b": b});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<double> QMetersBetweenCoordinates(CLLocationCoordinate2D a, CLLocationCoordinate2D b) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QMetersBetweenCoordinates::QMetersBetweenCoordinates([])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMetersBetweenCoordinates::QMetersBetweenCoordinates', {"a": a, "b": b});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return __result__;
  }
}

Future<QMapRect> QBoundingMapRectWithPoints(List<QMapPoint> points, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QBoundingMapRectWithPoints::QBoundingMapRectWithPoints([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QBoundingMapRectWithPoints::QBoundingMapRectWithPoints', {"points": points, "count": count});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<QMapRect> QBoundingMapRectWithPointsAndCenter(List<QMapPoint> points, int count, QMapPoint centerPoint) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QBoundingMapRectWithPointsAndCenter::QBoundingMapRectWithPointsAndCenter([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QBoundingMapRectWithPointsAndCenter::QBoundingMapRectWithPointsAndCenter', {"points": points, "count": count, "centerPoint": centerPoint});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QMapRect()..refId = __result__;
  }
}

Future<QCoordinateRegion> QBoundingCoordinateRegionWithCoordinates(List<CLLocationCoordinate2D> coordinates, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QBoundingCoordinateRegionWithCoordinates::QBoundingCoordinateRegionWithCoordinates([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QBoundingCoordinateRegionWithCoordinates::QBoundingCoordinateRegionWithCoordinates', {"coordinates": coordinates, "count": count});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateRegion()..refId = __result__;
  }
}

Future<QCoordinateRegion> QBoundingCoordinateRegionWithCoordinatesAndCenter(List<CLLocationCoordinate2D> coordinates, int count, CLLocationCoordinate2D centerCoordinate) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: QBoundingCoordinateRegionWithCoordinatesAndCenter::QBoundingCoordinateRegionWithCoordinatesAndCenter([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QBoundingCoordinateRegionWithCoordinatesAndCenter::QBoundingCoordinateRegionWithCoordinatesAndCenter', {"coordinates": coordinates, "count": count, "centerCoordinate": centerCoordinate});
  

  // handle native call
  

  // convert native result to dart side object
  if (__result__ == null) {
    return null;
  } else {
    return QCoordinateRegion()..refId = __result__;
  }
}
