// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QPolylineView extends QOverlayPathView  {
  //region constants
  static const String name__ = 'QPolylineView';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QPolylineView> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQPolylineView', {'init': init});
    final object = QPolylineView()..refId = refId;
    return object;
  }
  
  static Future<List<QPolylineView>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQPolylineView', {'length': length, 'init': init});
  
    final List<QPolylineView> typedResult = resultBatch.map((result) => QPolylineView()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<QPolyline> get_polyline() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_polyline", {'__this__': this});
    return __result__ == null ? null : (QPolyline()..refId = __result__);
  }
  
  Future<double> get_borderWidth() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_borderWidth", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<UIColor> get_borderColor() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_borderColor", {'__this__': this});
    return __result__ == null ? null : (UIColor()..refId = __result__);
  }
  
  Future<List<num>> get_lineDashPattern() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_lineDashPattern", {'__this__': this});
    return __result__ == null ? null : ((__result__ as List).cast<num>());
  }
  
  Future<QText> get_text() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_text", {'__this__': this});
    return __result__ == null ? null : (QText()..refId = __result__);
  }
  
  //endregion

  //region setters
  Future<void> set_borderWidth(double borderWidth) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::set_borderWidth', <String, dynamic>{'__this__': this, "borderWidth": borderWidth});
  
  
  }
  
  Future<void> set_borderColor(UIColor borderColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::set_borderColor', <String, dynamic>{'__this__': this, "borderColor": borderColor});
  
  
  }
  
  Future<void> set_lineDashPattern(List<num> lineDashPattern) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::set_lineDashPattern', <String, dynamic>{'__this__': this, "lineDashPattern": lineDashPattern});
  
  
  }
  
  Future<void> set_text(QText text) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::set_text', <String, dynamic>{'__this__': this, "text": text});
  
  
  }
  
  //endregion

  //region methods
  
  Future<QPolylineView> initWithPolyline(QPolyline polyline) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QPolylineView@$refId::initWithPolyline([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::initWithPolyline', {"polyline": polyline, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = QPolylineView()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'QPolylineView{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QPolylineView_Batch on List<QPolylineView> {
  //region getters
  Future<List<QPolyline>> get_polyline_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_polyline_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => QPolyline()..refId = __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_borderWidth_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_borderWidth_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<UIColor>> get_borderColor_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_borderColor_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => UIColor()..refId = __result__).toList();
    return typedResult;
  }
  
  Future<List<List<num>>> get_lineDashPattern_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_lineDashPattern_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<List<num>>().map((__result__) => (__result__ as List).cast<num>()).toList();
    return typedResult;
  }
  
  Future<List<QText>> get_text_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QPolylineView::get_text_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => QText()..refId = __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_borderWidth_batch(List<double> borderWidth) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QPolylineView::set_borderWidth_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "borderWidth": borderWidth[__i__]}]);
  
  
  }
  
  Future<void> set_borderColor_batch(List<UIColor> borderColor) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QPolylineView::set_borderColor_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "borderColor": borderColor[__i__]}]);
  
  
  }
  
  Future<void> set_lineDashPattern_batch(List<List<num>> lineDashPattern) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QPolylineView::set_lineDashPattern_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "lineDashPattern": lineDashPattern[__i__]}]);
  
  
  }
  
  Future<void> set_text_batch(List<QText> text) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QPolylineView::set_text_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "text": text[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<QPolylineView>> initWithPolyline_batch(List<QPolyline> polyline) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QPolylineView::initWithPolyline_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"polyline": polyline[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => QPolylineView()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}