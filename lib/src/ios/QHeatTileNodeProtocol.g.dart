// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class _QHeatTileNodeProtocol_SUB extends NSObject with QHeatTileNodeProtocol {}

mixin QHeatTileNodeProtocol on NSObject {
  

  static QHeatTileNodeProtocol subInstance() => _QHeatTileNodeProtocol_SUB();

  @override
  final String tag__ = 'tmap_map_fluttify';

  Future<CLLocationCoordinate2D> get_coordinate() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileNodeProtocol::get_coordinate", {'__this__': this});
    return __result__ == null ? null : (CLLocationCoordinate2D()..refId = __result__);
  }
  
  Future<double> get_value() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileNodeProtocol::get_value", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  

  

  
}

extension QHeatTileNodeProtocol_Batch on List<QHeatTileNodeProtocol> {
  //region methods
  
  //endregion
}