// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QMapConfig extends NSObject  {
  //region constants
  static const String name__ = 'QMapConfig';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QMapConfig> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQMapConfig', {'init': init});
    final object = QMapConfig()..refId = refId;
    return object;
  }
  
  static Future<List<QMapConfig>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQMapConfig', {'length': length, 'init': init});
  
    final List<QMapConfig> typedResult = resultBatch.map((result) => QMapConfig()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_subID() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_subID", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_subKey() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_subKey", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_mapFont() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_mapFont", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_mapFont(String mapFont) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapConfig::set_mapFont', <String, dynamic>{'__this__': this, "mapFont": mapFont});
  
  
  }
  
  //endregion

  //region methods
  
  Future<QMapConfig> initWithSubID_subKey(String subID, String subKey) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMapConfig@$refId::initWithSubID([\'subID\':$subID, \'subKey\':$subKey])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapConfig::initWithSubID_subKey', {"subID": subID, "subKey": subKey, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = QMapConfig()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'QMapConfig{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QMapConfig_Batch on List<QMapConfig> {
  //region getters
  Future<List<String>> get_subID_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_subID_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_subKey_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_subKey_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_mapFont_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMapConfig::get_mapFont_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_mapFont_batch(List<String> mapFont) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMapConfig::set_mapFont_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "mapFont": mapFont[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<QMapConfig>> initWithSubID_subKey_batch(List<String> subID, List<String> subKey) async {
    if (subID.length != subKey.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMapConfig::initWithSubID_subKey_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"subID": subID[__i__], "subKey": subKey[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => QMapConfig()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}