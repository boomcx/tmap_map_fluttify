// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QAnnotationViewLayer extends NSObject  {
  //region constants
  static const String name__ = 'QAnnotationViewLayer';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  Future<CGPoint> get_coordinate() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QAnnotationViewLayer::get_coordinate", {'__this__': this});
    return __result__ == null ? null : (CGPoint()..refId = __result__);
  }
  
  //endregion

  //region setters
  Future<void> set_coordinate(CGPoint coordinate) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QAnnotationViewLayer::set_coordinate', <String, dynamic>{'__this__': this, "coordinate": coordinate});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'QAnnotationViewLayer{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QAnnotationViewLayer_Batch on List<QAnnotationViewLayer> {
  //region getters
  Future<List<CGPoint>> get_coordinate_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QAnnotationViewLayer::get_coordinate_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => CGPoint()..refId = __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_coordinate_batch(List<CGPoint> coordinate) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QAnnotationViewLayer::set_coordinate_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "coordinate": coordinate[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}