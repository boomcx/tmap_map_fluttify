// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QMSDistrictData extends QMSBaseResult  {
  //region constants
  static const String name__ = 'QMSDistrictData';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QMSDistrictData> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQMSDistrictData', {'init': init});
    final object = QMSDistrictData()..refId = refId;
    return object;
  }
  
  static Future<List<QMSDistrictData>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQMSDistrictData', {'length': length, 'init': init});
  
    final List<QMSDistrictData> typedResult = resultBatch.map((result) => QMSDistrictData()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_id_() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_id_", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_name() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_name", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_fullname() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_fullname", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<CLLocationCoordinate2D> get_location() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_location", {'__this__': this});
    return __result__ == null ? null : (CLLocationCoordinate2D()..refId = __result__);
  }
  
  Future<List<String>> get_pinyin() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_pinyin", {'__this__': this});
    return __result__ == null ? null : ((__result__ as List).cast<String>());
  }
  
  Future<List<num>> get_cidx() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_cidx", {'__this__': this});
    return __result__ == null ? null : ((__result__ as List).cast<num>());
  }
  
  //endregion

  //region setters
  Future<void> set_id_(String id_) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_id_', <String, dynamic>{'__this__': this, "id_": id_});
  
  
  }
  
  Future<void> set_name(String name) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_name', <String, dynamic>{'__this__': this, "name": name});
  
  
  }
  
  Future<void> set_fullname(String fullname) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_fullname', <String, dynamic>{'__this__': this, "fullname": fullname});
  
  
  }
  
  Future<void> set_location(CLLocationCoordinate2D location) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_location', <String, dynamic>{'__this__': this, "location": location});
  
  
  }
  
  Future<void> set_pinyin(List<String> pinyin) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_pinyin', <String, dynamic>{'__this__': this, "pinyin": pinyin});
  
  
  }
  
  Future<void> set_cidx(List<num> cidx) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSDistrictData::set_cidx', <String, dynamic>{'__this__': this, "cidx": cidx});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'QMSDistrictData{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QMSDistrictData_Batch on List<QMSDistrictData> {
  //region getters
  Future<List<String>> get_id__batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_id__batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_name_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_name_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_fullname_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_fullname_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<CLLocationCoordinate2D>> get_location_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_location_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => CLLocationCoordinate2D()..refId = __result__).toList();
    return typedResult;
  }
  
  Future<List<List<String>>> get_pinyin_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_pinyin_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<List<String>>().map((__result__) => (__result__ as List).cast<String>()).toList();
    return typedResult;
  }
  
  Future<List<List<num>>> get_cidx_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QMSDistrictData::get_cidx_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<List<num>>().map((__result__) => (__result__ as List).cast<num>()).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_id__batch(List<String> id_) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_id__batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "id_": id_[__i__]}]);
  
  
  }
  
  Future<void> set_name_batch(List<String> name) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_name_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "name": name[__i__]}]);
  
  
  }
  
  Future<void> set_fullname_batch(List<String> fullname) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_fullname_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "fullname": fullname[__i__]}]);
  
  
  }
  
  Future<void> set_location_batch(List<CLLocationCoordinate2D> location) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_location_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "location": location[__i__]}]);
  
  
  }
  
  Future<void> set_pinyin_batch(List<List<String>> pinyin) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_pinyin_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "pinyin": pinyin[__i__]}]);
  
  
  }
  
  Future<void> set_cidx_batch(List<List<num>> cidx) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QMSDistrictData::set_cidx_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "cidx": cidx[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}