// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QMSSearcher extends NSObject  {
  //region constants
  static const String name__ = 'QMSSearcher';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QMSSearcher> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQMSSearcher', {'init': init});
    final object = QMSSearcher()..refId = refId;
    return object;
  }
  
  static Future<List<QMSSearcher>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQMSSearcher', {'length': length, 'init': init});
  
    final List<QMSSearcher> typedResult = resultBatch.map((result) => QMSSearcher()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(QMSSearchDelegate delegate) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('QMSSearchDelegate::Callback', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::QMSSearchDelegate::searchWithSearchOption_didFailWithError':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithSearchOption_didFailWithError([\'searchOption\':${args['searchOption']}, \'error\':${args['error']}])');
              }
          
              // handle the native call
              delegate?.searchWithSearchOption_didFailWithError(TypeOpTmapMapFluttifyIOS((args['searchOption'] as Object))?.as__<QMSSearchOption>(), TypeOpTmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithWalkingRouteSearchOption_didRecevieResult([\'walkingRouteSearchOption\':${args['walkingRouteSearchOption']}, \'walkingRouteSearchResult\':${args['walkingRouteSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithWalkingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['walkingRouteSearchOption'] as Object))?.as__<QMSWalkingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['walkingRouteSearchResult'] as Object))?.as__<QMSWalkingRouteSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithPoiSearchOption_didReceiveResult([\'poiSearchOption\':${args['poiSearchOption']}, \'poiSearchResult\':${args['poiSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithPoiSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['poiSearchOption'] as Object))?.as__<QMSPoiSearchOption>(), TypeOpTmapMapFluttifyIOS((args['poiSearchResult'] as Object))?.as__<QMSPoiSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithSuggestionSearchOption_didReceiveResult([\'suggestionSearchOption\':${args['suggestionSearchOption']}, \'suggestionSearchResult\':${args['suggestionSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithSuggestionSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['suggestionSearchOption'] as Object))?.as__<QMSSuggestionSearchOption>(), TypeOpTmapMapFluttifyIOS((args['suggestionSearchResult'] as Object))?.as__<QMSSuggestionResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithReverseGeoCodeSearchOption_didReceiveResult([\'reverseGeoCodeSearchOption\':${args['reverseGeoCodeSearchOption']}, \'reverseGeoCodeSearchResult\':${args['reverseGeoCodeSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithReverseGeoCodeSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['reverseGeoCodeSearchOption'] as Object))?.as__<QMSReverseGeoCodeSearchOption>(), TypeOpTmapMapFluttifyIOS((args['reverseGeoCodeSearchResult'] as Object))?.as__<QMSReverseGeoCodeSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithGeoCodeSearchOption_didReceiveResult([\'geoCodeSearchOption\':${args['geoCodeSearchOption']}, \'geoCodeSearchResult\':${args['geoCodeSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithGeoCodeSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['geoCodeSearchOption'] as Object))?.as__<QMSGeoCodeSearchOption>(), TypeOpTmapMapFluttifyIOS((args['geoCodeSearchResult'] as Object))?.as__<QMSGeoCodeSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithDrivingRouteSearchOption_didRecevieResult([\'drivingRouteSearchOption\':${args['drivingRouteSearchOption']}, \'drivingRouteSearchResult\':${args['drivingRouteSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithDrivingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['drivingRouteSearchOption'] as Object))?.as__<QMSDrivingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['drivingRouteSearchResult'] as Object))?.as__<QMSDrivingRouteSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithBusingRouteSearchOption_didRecevieResult([\'busingRouteSearchOption\':${args['busingRouteSearchOption']}, \'busingRouteSearchResult\':${args['busingRouteSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithBusingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['busingRouteSearchOption'] as Object))?.as__<QMSBusingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['busingRouteSearchResult'] as Object))?.as__<QMSBusingRouteSearchResult>());
              break;
            case 'Callback::QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: searchWithDistrictSearchOption_didRecevieResult([\'districtSearchOption\':${args['districtSearchOption']}, \'districtSearchResult\':${args['districtSearchResult']}])');
              }
          
              // handle the native call
              delegate?.searchWithDistrictSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['districtSearchOption'] as Object))?.as__<QMSDistrictBaseSearchOption>(), TypeOpTmapMapFluttifyIOS((args['districtSearchResult'] as Object))?.as__<QMSDistrictSearchResult>());
              break;
            default:
              break;
          }
        } catch (e) {
          debugPrint(e);
          throw e;
        }
      });
  }
  
  //endregion

  //region methods
  
  Future<QMSSearcher> initWithDelegate(QMSSearchDelegate delegate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::initWithDelegate([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::initWithDelegate', {"__this__": this});
  
  
    // handle native call
    MethodChannel('QMSSearchDelegate::Callback', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::QMSSearchDelegate::searchWithSearchOption_didFailWithError':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithSearchOption_didFailWithError([\'searchOption\':${args['searchOption']}, \'error\':${args['error']}])');
                }
          
                // handle the native call
                delegate?.searchWithSearchOption_didFailWithError(TypeOpTmapMapFluttifyIOS((args['searchOption'] as Object))?.as__<QMSSearchOption>(), TypeOpTmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithWalkingRouteSearchOption_didRecevieResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithWalkingRouteSearchOption_didRecevieResult([\'walkingRouteSearchOption\':${args['walkingRouteSearchOption']}, \'walkingRouteSearchResult\':${args['walkingRouteSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithWalkingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['walkingRouteSearchOption'] as Object))?.as__<QMSWalkingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['walkingRouteSearchResult'] as Object))?.as__<QMSWalkingRouteSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithPoiSearchOption_didReceiveResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithPoiSearchOption_didReceiveResult([\'poiSearchOption\':${args['poiSearchOption']}, \'poiSearchResult\':${args['poiSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithPoiSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['poiSearchOption'] as Object))?.as__<QMSPoiSearchOption>(), TypeOpTmapMapFluttifyIOS((args['poiSearchResult'] as Object))?.as__<QMSPoiSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithSuggestionSearchOption_didReceiveResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithSuggestionSearchOption_didReceiveResult([\'suggestionSearchOption\':${args['suggestionSearchOption']}, \'suggestionSearchResult\':${args['suggestionSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithSuggestionSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['suggestionSearchOption'] as Object))?.as__<QMSSuggestionSearchOption>(), TypeOpTmapMapFluttifyIOS((args['suggestionSearchResult'] as Object))?.as__<QMSSuggestionResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithReverseGeoCodeSearchOption_didReceiveResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithReverseGeoCodeSearchOption_didReceiveResult([\'reverseGeoCodeSearchOption\':${args['reverseGeoCodeSearchOption']}, \'reverseGeoCodeSearchResult\':${args['reverseGeoCodeSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithReverseGeoCodeSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['reverseGeoCodeSearchOption'] as Object))?.as__<QMSReverseGeoCodeSearchOption>(), TypeOpTmapMapFluttifyIOS((args['reverseGeoCodeSearchResult'] as Object))?.as__<QMSReverseGeoCodeSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithGeoCodeSearchOption_didReceiveResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithGeoCodeSearchOption_didReceiveResult([\'geoCodeSearchOption\':${args['geoCodeSearchOption']}, \'geoCodeSearchResult\':${args['geoCodeSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithGeoCodeSearchOption_didReceiveResult(TypeOpTmapMapFluttifyIOS((args['geoCodeSearchOption'] as Object))?.as__<QMSGeoCodeSearchOption>(), TypeOpTmapMapFluttifyIOS((args['geoCodeSearchResult'] as Object))?.as__<QMSGeoCodeSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithDrivingRouteSearchOption_didRecevieResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithDrivingRouteSearchOption_didRecevieResult([\'drivingRouteSearchOption\':${args['drivingRouteSearchOption']}, \'drivingRouteSearchResult\':${args['drivingRouteSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithDrivingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['drivingRouteSearchOption'] as Object))?.as__<QMSDrivingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['drivingRouteSearchResult'] as Object))?.as__<QMSDrivingRouteSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithBusingRouteSearchOption_didRecevieResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithBusingRouteSearchOption_didRecevieResult([\'busingRouteSearchOption\':${args['busingRouteSearchOption']}, \'busingRouteSearchResult\':${args['busingRouteSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithBusingRouteSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['busingRouteSearchOption'] as Object))?.as__<QMSBusingRouteSearchOption>(), TypeOpTmapMapFluttifyIOS((args['busingRouteSearchResult'] as Object))?.as__<QMSBusingRouteSearchResult>());
                break;
              case 'Callback::QMSSearchDelegate::searchWithDistrictSearchOption_didRecevieResult':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: searchWithDistrictSearchOption_didRecevieResult([\'districtSearchOption\':${args['districtSearchOption']}, \'districtSearchResult\':${args['districtSearchResult']}])');
                }
          
                // handle the native call
                delegate?.searchWithDistrictSearchOption_didRecevieResult(TypeOpTmapMapFluttifyIOS((args['districtSearchOption'] as Object))?.as__<QMSDistrictBaseSearchOption>(), TypeOpTmapMapFluttifyIOS((args['districtSearchResult'] as Object))?.as__<QMSDistrictSearchResult>());
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = QMSSearcher()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithWalkingRouteSearchOption(QMSWalkingRouteSearchOption wakingRouteSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithWalkingRouteSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithWalkingRouteSearchOption', {"wakingRouteSearchOption": wakingRouteSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithPoiSearchOption(QMSPoiSearchOption poiSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithPoiSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithPoiSearchOption', {"poiSearchOption": poiSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithSuggestionSearchOption(QMSSuggestionSearchOption suggestionSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithSuggestionSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithSuggestionSearchOption', {"suggestionSearchOption": suggestionSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithReverseGeoCodeSearchOption(QMSReverseGeoCodeSearchOption reverseGeoCodeSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithReverseGeoCodeSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithReverseGeoCodeSearchOption', {"reverseGeoCodeSearchOption": reverseGeoCodeSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithGeoCodeSearchOption(QMSGeoCodeSearchOption geoCodeSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithGeoCodeSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithGeoCodeSearchOption', {"geoCodeSearchOption": geoCodeSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithDrivingRouteSearchOption(QMSDrivingRouteSearchOption drivingRouteSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithDrivingRouteSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDrivingRouteSearchOption', {"drivingRouteSearchOption": drivingRouteSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithBusingRouteSearchOption(QMSBusingRouteSearchOption busingRouteSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithBusingRouteSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithBusingRouteSearchOption', {"busingRouteSearchOption": busingRouteSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithDistrictListSearchOption(QMSDistrictListSearchOption districtListSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithDistrictListSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictListSearchOption', {"districtListSearchOption": districtListSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithDistrictChildrenSearchOption(QMSDistrictChildrenSearchOption districtChildrenSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithDistrictChildrenSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictChildrenSearchOption', {"districtChildrenSearchOption": districtChildrenSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> searchWithDistrictSearchSearchOption(QMSDistrictSearchSearchOption districtSearchSearchOption) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QMSSearcher@$refId::searchWithDistrictSearchSearchOption([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictSearchSearchOption', {"districtSearchSearchOption": districtSearchSearchOption, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'QMSSearcher{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QMSSearcher_Batch on List<QMSSearcher> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> searchWithWalkingRouteSearchOption_batch(List<QMSWalkingRouteSearchOption> wakingRouteSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithWalkingRouteSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"wakingRouteSearchOption": wakingRouteSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithPoiSearchOption_batch(List<QMSPoiSearchOption> poiSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithPoiSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"poiSearchOption": poiSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithSuggestionSearchOption_batch(List<QMSSuggestionSearchOption> suggestionSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithSuggestionSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"suggestionSearchOption": suggestionSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithReverseGeoCodeSearchOption_batch(List<QMSReverseGeoCodeSearchOption> reverseGeoCodeSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithReverseGeoCodeSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"reverseGeoCodeSearchOption": reverseGeoCodeSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithGeoCodeSearchOption_batch(List<QMSGeoCodeSearchOption> geoCodeSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithGeoCodeSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"geoCodeSearchOption": geoCodeSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithDrivingRouteSearchOption_batch(List<QMSDrivingRouteSearchOption> drivingRouteSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDrivingRouteSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"drivingRouteSearchOption": drivingRouteSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithBusingRouteSearchOption_batch(List<QMSBusingRouteSearchOption> busingRouteSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithBusingRouteSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"busingRouteSearchOption": busingRouteSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithDistrictListSearchOption_batch(List<QMSDistrictListSearchOption> districtListSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictListSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"districtListSearchOption": districtListSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithDistrictChildrenSearchOption_batch(List<QMSDistrictChildrenSearchOption> districtChildrenSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictChildrenSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"districtChildrenSearchOption": districtChildrenSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> searchWithDistrictSearchSearchOption_batch(List<QMSDistrictSearchSearchOption> districtSearchSearchOption) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QMSSearcher::searchWithDistrictSearchSearchOption_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"districtSearchSearchOption": districtSearchSearchOption[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}