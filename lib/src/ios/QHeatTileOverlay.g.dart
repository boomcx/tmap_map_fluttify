// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QHeatTileOverlay extends QTileOverlay with QOverlay {
  //region constants
  static const String name__ = 'QHeatTileOverlay';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QHeatTileOverlay> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQHeatTileOverlay', {'init': init});
    final object = QHeatTileOverlay()..refId = refId;
    return object;
  }
  
  static Future<List<QHeatTileOverlay>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQHeatTileOverlay', {'length': length, 'init': init});
  
    final List<QHeatTileOverlay> typedResult = resultBatch.map((result) => QHeatTileOverlay()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<int> get_decayRadius() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_decayRadius", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<double> get_opacity() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_opacity", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<QHeatTileGradient> get_gradient() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_gradient", {'__this__': this});
    return __result__ == null ? null : (QHeatTileGradient()..refId = __result__);
  }
  
  //endregion

  //region setters
  Future<void> set_decayRadius(int decayRadius) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QHeatTileOverlay::set_decayRadius', <String, dynamic>{'__this__': this, "decayRadius": decayRadius});
  
  
  }
  
  Future<void> set_opacity(double opacity) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QHeatTileOverlay::set_opacity', <String, dynamic>{'__this__': this, "opacity": opacity});
  
  
  }
  
  Future<void> set_gradient(QHeatTileGradient gradient) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QHeatTileOverlay::set_gradient', <String, dynamic>{'__this__': this, "gradient": gradient});
  
  
  }
  
  //endregion

  //region methods
  
  Future<QHeatTileOverlay> initWithHeatTileNodes(List<dynamic> heatTileNodes) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QHeatTileOverlay@$refId::initWithHeatTileNodes([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QHeatTileOverlay::initWithHeatTileNodes', {"heatTileNodes": heatTileNodes, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = QHeatTileOverlay()..refId = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'QHeatTileOverlay{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QHeatTileOverlay_Batch on List<QHeatTileOverlay> {
  //region getters
  Future<List<int>> get_decayRadius_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_decayRadius_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<double>> get_opacity_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_opacity_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<double>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<QHeatTileGradient>> get_gradient_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QHeatTileOverlay::get_gradient_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => QHeatTileGradient()..refId = __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_decayRadius_batch(List<int> decayRadius) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QHeatTileOverlay::set_decayRadius_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "decayRadius": decayRadius[__i__]}]);
  
  
  }
  
  Future<void> set_opacity_batch(List<double> opacity) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QHeatTileOverlay::set_opacity_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "opacity": opacity[__i__]}]);
  
  
  }
  
  Future<void> set_gradient_batch(List<QHeatTileGradient> gradient) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QHeatTileOverlay::set_gradient_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "gradient": gradient[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<QHeatTileOverlay>> initWithHeatTileNodes_batch(List<List<dynamic>> heatTileNodes) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QHeatTileOverlay::initWithHeatTileNodes_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"heatTileNodes": heatTileNodes[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => QHeatTileOverlay()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}