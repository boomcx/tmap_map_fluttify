// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:tmap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class QTileOverlay extends NSObject with QOverlay {
  //region constants
  static const String name__ = 'QTileOverlay';

  @override
  final String tag__ = 'tmap_map_fluttify';

  
  //endregion

  //region creators
  static Future<QTileOverlay> create__({ bool init = true /* ios only */ }) async {
    final refId = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::createQTileOverlay', {'init': init});
    final object = QTileOverlay()..refId = refId;
    return object;
  }
  
  static Future<List<QTileOverlay>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('ObjectFactory::create_batchQTileOverlay', {'length': length, 'init': init});
  
    final List<QTileOverlay> typedResult = resultBatch.map((result) => QTileOverlay()..refId = result).toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<String> get_URLTemplate() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_URLTemplate", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<bool> get_isHighResoultionTile() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_isHighResoultionTile", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  Future<String> get_tileCacheDir() async {
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_tileCacheDir", {'__this__': this});
    return __result__ == null ? null : (__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_isHighResoultionTile(bool isHighResoultionTile) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::set_isHighResoultionTile', <String, dynamic>{'__this__': this, "isHighResoultionTile": isHighResoultionTile});
  
  
  }
  
  Future<void> set_tileCacheDir(String tileCacheDir) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::set_tileCacheDir', <String, dynamic>{'__this__': this, "tileCacheDir": tileCacheDir});
  
  
  }
  
  //endregion

  //region methods
  
  Future<QTileOverlay> initWithURLTemplate(String URLTemplate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QTileOverlay@$refId::initWithURLTemplate([\'URLTemplate\':$URLTemplate])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::initWithURLTemplate', {"URLTemplate": URLTemplate, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = QTileOverlay()..refId = __result__;
      return __return__;
    }
  }
  
  
  Future<void> loadTileAtPath_result(QTileOverlayPath path, void result(NSData tileData, NSError error)) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QTileOverlay@$refId::loadTileAtPath([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::loadTileAtPath_result', {"path": path, "__this__": this});
  
  
    // handle native call
    MethodChannel('void|NSData*#tileData,NSError*#error::Callback@$refId', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify')))
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::void|NSData*#tileData,NSError*#error::void|NSData*#tileData,NSError*#error':
                // print log
                if (fluttifyLogEnabled) {
          
                }
          
                // handle the native call
                if (result != null) result(TypeOpTmapMapFluttifyIOS((args['tileData'] as Object))?.as__<NSData>(), TypeOpTmapMapFluttifyIOS((args['error'] as Object))?.as__<NSError>());
                break;
              default:
                break;
            }
          } catch (e) {
            debugPrint(e);
            throw e;
          }
        });
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  
  Future<void> cancelLoadOfTileAtPath(QTileOverlayPath tilePath) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: QTileOverlay@$refId::cancelLoadOfTileAtPath([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::cancelLoadOfTileAtPath', {"tilePath": tilePath, "__this__": this});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
      return __return__;
    }
  }
  
  //endregion

  @override
  String toString() {
    return 'QTileOverlay{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension QTileOverlay_Batch on List<QTileOverlay> {
  //region getters
  Future<List<String>> get_URLTemplate_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_URLTemplate_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<bool>> get_isHighResoultionTile_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_isHighResoultionTile_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  Future<List<String>> get_tileCacheDir_batch() async {
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod("QTileOverlay::get_tileCacheDir_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_isHighResoultionTile_batch(List<bool> isHighResoultionTile) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QTileOverlay::set_isHighResoultionTile_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "isHighResoultionTile": isHighResoultionTile[__i__]}]);
  
  
  }
  
  Future<void> set_tileCacheDir_batch(List<String> tileCacheDir) async {
    await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec())).invokeMethod('QTileOverlay::set_tileCacheDir_batch', [for (int __i__ = 0; __i__ < length; __i__++) {'__this__': this[__i__], "tileCacheDir": tileCacheDir[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  Future<List<QTileOverlay>> initWithURLTemplate_batch(List<String> URLTemplate) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::initWithURLTemplate_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"URLTemplate": URLTemplate[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => QTileOverlay()..refId = __result__).toList();
      return typedResult;
    }
  }
  
  
  Future<List<void>> cancelLoadOfTileAtPath_batch(List<QTileOverlayPath> tilePath) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('me.yohom/tmap_map_fluttify', StandardMethodCodec(FluttifyMessageCodec('tmap_map_fluttify'))).invokeMethod('QTileOverlay::cancelLoadOfTileAtPath_batch', [for (int __i__ = 0; __i__ < length; __i__++) {"tilePath": tilePath[__i__], "__this__": this[__i__]}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
      return typedResult;
    }
  }
  
  //endregion
}